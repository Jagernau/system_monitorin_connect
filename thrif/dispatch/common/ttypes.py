#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class PositionRequestFields(object):
    """
    Attributes:
     - columns
     - customColumns

    """


    def __init__(self, columns=None, customColumns=None,):
        self.columns = columns
        self.customColumns = customColumns

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.columns = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.columns.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.customColumns = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.customColumns.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PositionRequestFields')
        if self.columns is not None:
            oprot.writeFieldBegin('columns', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.columns))
            for iter12 in self.columns:
                oprot.writeString(iter12.encode('utf-8') if sys.version_info[0] == 2 else iter12)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.customColumns is not None:
            oprot.writeFieldBegin('customColumns', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.customColumns))
            for iter13 in self.customColumns:
                oprot.writeString(iter13.encode('utf-8') if sys.version_info[0] == 2 else iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Variant(object):
    """
    Attributes:
     - i32Value
     - i64Value
     - boolValue
     - doubleValue
     - stringValue

    """


    def __init__(self, i32Value=None, i64Value=None, boolValue=None, doubleValue=None, stringValue=None,):
        self.i32Value = i32Value
        self.i64Value = i64Value
        self.boolValue = boolValue
        self.doubleValue = doubleValue
        self.stringValue = stringValue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.i32Value = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.i64Value = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.boolValue = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.doubleValue = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.stringValue = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Variant')
        if self.i32Value is not None:
            oprot.writeFieldBegin('i32Value', TType.I32, 1)
            oprot.writeI32(self.i32Value)
            oprot.writeFieldEnd()
        if self.i64Value is not None:
            oprot.writeFieldBegin('i64Value', TType.I64, 2)
            oprot.writeI64(self.i64Value)
            oprot.writeFieldEnd()
        if self.boolValue is not None:
            oprot.writeFieldBegin('boolValue', TType.BOOL, 3)
            oprot.writeBool(self.boolValue)
            oprot.writeFieldEnd()
        if self.doubleValue is not None:
            oprot.writeFieldBegin('doubleValue', TType.DOUBLE, 4)
            oprot.writeDouble(self.doubleValue)
            oprot.writeFieldEnd()
        if self.stringValue is not None:
            oprot.writeFieldBegin('stringValue', TType.STRING, 5)
            oprot.writeString(self.stringValue.encode('utf-8') if sys.version_info[0] == 2 else self.stringValue)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Position(object):
    """
    Attributes:
     - values
     - customValues
     - sensorKey

    """


    def __init__(self, values=None, customValues=None, sensorKey=None,):
        self.values = values
        self.customValues = customValues
        self.sensorKey = sensorKey

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.values = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = Variant()
                        _elem19.read(iprot)
                        self.values.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.customValues = []
                    (_etype23, _size20) = iprot.readListBegin()
                    for _i24 in range(_size20):
                        _elem25 = Variant()
                        _elem25.read(iprot)
                        self.customValues.append(_elem25)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.sensorKey = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Position')
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.values))
            for iter26 in self.values:
                iter26.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.customValues is not None:
            oprot.writeFieldBegin('customValues', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.customValues))
            for iter27 in self.customValues:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.sensorKey is not None:
            oprot.writeFieldBegin('sensorKey', TType.STRING, 3)
            oprot.writeString(self.sensorKey.encode('utf-8') if sys.version_info[0] == 2 else self.sensorKey)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PositionWithVehicle(object):
    """
    Attributes:
     - position
     - vehicleUuid

    """


    def __init__(self, position=None, vehicleUuid=None,):
        self.position = position
        self.vehicleUuid = vehicleUuid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.position = Position()
                    self.position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.vehicleUuid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PositionWithVehicle')
        if self.position is not None:
            oprot.writeFieldBegin('position', TType.STRUCT, 1)
            self.position.write(oprot)
            oprot.writeFieldEnd()
        if self.vehicleUuid is not None:
            oprot.writeFieldBegin('vehicleUuid', TType.STRING, 2)
            oprot.writeString(self.vehicleUuid.encode('utf-8') if sys.version_info[0] == 2 else self.vehicleUuid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PositionWithColumns(object):
    """
    Attributes:
     - position
     - columns
     - vehicleUuid

    """


    def __init__(self, position=None, columns=None, vehicleUuid=None,):
        self.position = position
        self.columns = columns
        self.vehicleUuid = vehicleUuid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.position = Position()
                    self.position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.columns = PositionRequestFields()
                    self.columns.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.vehicleUuid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PositionWithColumns')
        if self.position is not None:
            oprot.writeFieldBegin('position', TType.STRUCT, 1)
            self.position.write(oprot)
            oprot.writeFieldEnd()
        if self.columns is not None:
            oprot.writeFieldBegin('columns', TType.STRUCT, 2)
            self.columns.write(oprot)
            oprot.writeFieldEnd()
        if self.vehicleUuid is not None:
            oprot.writeFieldBegin('vehicleUuid', TType.STRING, 3)
            oprot.writeString(self.vehicleUuid.encode('utf-8') if sys.version_info[0] == 2 else self.vehicleUuid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Track(object):
    """
    Attributes:
     - positions
     - vehicleUuid
     - limited

    """


    def __init__(self, positions=None, vehicleUuid=None, limited=None,):
        self.positions = positions
        self.vehicleUuid = vehicleUuid
        self.limited = limited

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.positions = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = Position()
                        _elem33.read(iprot)
                        self.positions.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.vehicleUuid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.limited = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Track')
        if self.positions is not None:
            oprot.writeFieldBegin('positions', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.positions))
            for iter34 in self.positions:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.vehicleUuid is not None:
            oprot.writeFieldBegin('vehicleUuid', TType.STRING, 2)
            oprot.writeString(self.vehicleUuid.encode('utf-8') if sys.version_info[0] == 2 else self.vehicleUuid)
            oprot.writeFieldEnd()
        if self.limited is not None:
            oprot.writeFieldBegin('limited', TType.BOOL, 3)
            oprot.writeBool(self.limited)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class VehicleRelayTrackRequest(object):
    """
    Attributes:
     - vehicleUuid
     - fromTimestamp

    """


    def __init__(self, vehicleUuid=None, fromTimestamp=None,):
        self.vehicleUuid = vehicleUuid
        self.fromTimestamp = fromTimestamp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.vehicleUuid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.fromTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('VehicleRelayTrackRequest')
        if self.vehicleUuid is not None:
            oprot.writeFieldBegin('vehicleUuid', TType.STRING, 1)
            oprot.writeString(self.vehicleUuid.encode('utf-8') if sys.version_info[0] == 2 else self.vehicleUuid)
            oprot.writeFieldEnd()
        if self.fromTimestamp is not None:
            oprot.writeFieldBegin('fromTimestamp', TType.I64, 2)
            oprot.writeI64(self.fromTimestamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class VehicleHistoryTrackRequest(object):
    """
    Attributes:
     - vehicleUuid
     - fromTimestamp
     - toTimestamp
     - includeTrackSensors

    """


    def __init__(self, vehicleUuid=None, fromTimestamp=None, toTimestamp=None, includeTrackSensors=None,):
        self.vehicleUuid = vehicleUuid
        self.fromTimestamp = fromTimestamp
        self.toTimestamp = toTimestamp
        self.includeTrackSensors = includeTrackSensors

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.vehicleUuid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.fromTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.toTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.includeTrackSensors = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('VehicleHistoryTrackRequest')
        if self.vehicleUuid is not None:
            oprot.writeFieldBegin('vehicleUuid', TType.STRING, 1)
            oprot.writeString(self.vehicleUuid.encode('utf-8') if sys.version_info[0] == 2 else self.vehicleUuid)
            oprot.writeFieldEnd()
        if self.fromTimestamp is not None:
            oprot.writeFieldBegin('fromTimestamp', TType.I64, 2)
            oprot.writeI64(self.fromTimestamp)
            oprot.writeFieldEnd()
        if self.toTimestamp is not None:
            oprot.writeFieldBegin('toTimestamp', TType.I64, 3)
            oprot.writeI64(self.toTimestamp)
            oprot.writeFieldEnd()
        if self.includeTrackSensors is not None:
            oprot.writeFieldBegin('includeTrackSensors', TType.BOOL, 4)
            oprot.writeBool(self.includeTrackSensors)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class VehicleHistoryTrackGroupedDetailsRequest(object):
    """
    Attributes:
     - vehicleUuid
     - fromTimestamp
     - toTimestamp
     - desc
     - limit
     - offset
     - columns

    """


    def __init__(self, vehicleUuid=None, fromTimestamp=None, toTimestamp=None, desc=None, limit=None, offset=None, columns=None,):
        self.vehicleUuid = vehicleUuid
        self.fromTimestamp = fromTimestamp
        self.toTimestamp = toTimestamp
        self.desc = desc
        self.limit = limit
        self.offset = offset
        self.columns = columns

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.vehicleUuid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.fromTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.toTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.desc = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.limit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.offset = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.columns = PositionRequestFields()
                    self.columns.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('VehicleHistoryTrackGroupedDetailsRequest')
        if self.vehicleUuid is not None:
            oprot.writeFieldBegin('vehicleUuid', TType.STRING, 1)
            oprot.writeString(self.vehicleUuid.encode('utf-8') if sys.version_info[0] == 2 else self.vehicleUuid)
            oprot.writeFieldEnd()
        if self.fromTimestamp is not None:
            oprot.writeFieldBegin('fromTimestamp', TType.I64, 2)
            oprot.writeI64(self.fromTimestamp)
            oprot.writeFieldEnd()
        if self.toTimestamp is not None:
            oprot.writeFieldBegin('toTimestamp', TType.I64, 3)
            oprot.writeI64(self.toTimestamp)
            oprot.writeFieldEnd()
        if self.desc is not None:
            oprot.writeFieldBegin('desc', TType.BOOL, 4)
            oprot.writeBool(self.desc)
            oprot.writeFieldEnd()
        if self.limit is not None:
            oprot.writeFieldBegin('limit', TType.I32, 5)
            oprot.writeI32(self.limit)
            oprot.writeFieldEnd()
        if self.offset is not None:
            oprot.writeFieldBegin('offset', TType.I32, 6)
            oprot.writeI32(self.offset)
            oprot.writeFieldEnd()
        if self.columns is not None:
            oprot.writeFieldBegin('columns', TType.STRUCT, 7)
            self.columns.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class VehicleHistoryTrackGroupedDetailsResponse(object):
    """
    Attributes:
     - columns
     - valueRows

    """


    def __init__(self, columns=None, valueRows=None,):
        self.columns = columns
        self.valueRows = valueRows

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.columns = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in range(_size35):
                        _elem40 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.columns.append(_elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.valueRows = []
                    (_etype44, _size41) = iprot.readListBegin()
                    for _i45 in range(_size41):
                        _elem46 = []
                        (_etype50, _size47) = iprot.readListBegin()
                        for _i51 in range(_size47):
                            _elem52 = Variant()
                            _elem52.read(iprot)
                            _elem46.append(_elem52)
                        iprot.readListEnd()
                        self.valueRows.append(_elem46)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('VehicleHistoryTrackGroupedDetailsResponse')
        if self.columns is not None:
            oprot.writeFieldBegin('columns', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.columns))
            for iter53 in self.columns:
                oprot.writeString(iter53.encode('utf-8') if sys.version_info[0] == 2 else iter53)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.valueRows is not None:
            oprot.writeFieldBegin('valueRows', TType.LIST, 2)
            oprot.writeListBegin(TType.LIST, len(self.valueRows))
            for iter54 in self.valueRows:
                oprot.writeListBegin(TType.STRUCT, len(iter54))
                for iter55 in iter54:
                    iter55.write(oprot)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TripTrackRequest(object):
    """
    Attributes:
     - tripId
     - fromTimestamp
     - toTimestamp

    """


    def __init__(self, tripId=None, fromTimestamp=None, toTimestamp=None,):
        self.tripId = tripId
        self.fromTimestamp = fromTimestamp
        self.toTimestamp = toTimestamp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.tripId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.fromTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.toTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TripTrackRequest')
        if self.tripId is not None:
            oprot.writeFieldBegin('tripId', TType.STRING, 1)
            oprot.writeString(self.tripId.encode('utf-8') if sys.version_info[0] == 2 else self.tripId)
            oprot.writeFieldEnd()
        if self.fromTimestamp is not None:
            oprot.writeFieldBegin('fromTimestamp', TType.I64, 2)
            oprot.writeI64(self.fromTimestamp)
            oprot.writeFieldEnd()
        if self.toTimestamp is not None:
            oprot.writeFieldBegin('toTimestamp', TType.I64, 3)
            oprot.writeI64(self.toTimestamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GeoPoint(object):
    """
    Attributes:
     - lon
     - lat

    """


    def __init__(self, lon=None, lat=None,):
        self.lon = lon
        self.lat = lat

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.lon = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.lat = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GeoPoint')
        if self.lon is not None:
            oprot.writeFieldBegin('lon', TType.DOUBLE, 1)
            oprot.writeDouble(self.lon)
            oprot.writeFieldEnd()
        if self.lat is not None:
            oprot.writeFieldBegin('lat', TType.DOUBLE, 2)
            oprot.writeDouble(self.lat)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GeoRect(object):
    """
    Attributes:
     - topLeft
     - rightBottom

    """


    def __init__(self, topLeft=None, rightBottom=None,):
        self.topLeft = topLeft
        self.rightBottom = rightBottom

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.topLeft = GeoPoint()
                    self.topLeft.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.rightBottom = GeoPoint()
                    self.rightBottom.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GeoRect')
        if self.topLeft is not None:
            oprot.writeFieldBegin('topLeft', TType.STRUCT, 1)
            self.topLeft.write(oprot)
            oprot.writeFieldEnd()
        if self.rightBottom is not None:
            oprot.writeFieldBegin('rightBottom', TType.STRUCT, 2)
            self.rightBottom.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Viewport(object):
    """
    Attributes:
     - height
     - width
     - zoom
     - hotPoint

    """


    def __init__(self, height=None, width=None, zoom=None, hotPoint=None,):
        self.height = height
        self.width = width
        self.zoom = zoom
        self.hotPoint = hotPoint

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.height = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.width = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.zoom = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.hotPoint = GeoPoint()
                    self.hotPoint.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Viewport')
        if self.height is not None:
            oprot.writeFieldBegin('height', TType.I32, 1)
            oprot.writeI32(self.height)
            oprot.writeFieldEnd()
        if self.width is not None:
            oprot.writeFieldBegin('width', TType.I32, 2)
            oprot.writeI32(self.width)
            oprot.writeFieldEnd()
        if self.zoom is not None:
            oprot.writeFieldBegin('zoom', TType.I32, 3)
            oprot.writeI32(self.zoom)
            oprot.writeFieldEnd()
        if self.hotPoint is not None:
            oprot.writeFieldBegin('hotPoint', TType.STRUCT, 4)
            self.hotPoint.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Polyline(object):
    """
    Attributes:
     - points

    """


    def __init__(self, points=None,):
        self.points = points

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.points = []
                    (_etype59, _size56) = iprot.readListBegin()
                    for _i60 in range(_size56):
                        _elem61 = GeoPoint()
                        _elem61.read(iprot)
                        self.points.append(_elem61)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Polyline')
        if self.points is not None:
            oprot.writeFieldBegin('points', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.points))
            for iter62 in self.points:
                iter62.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ClippedPolyline(object):
    """
    Attributes:
     - polylines

    """


    def __init__(self, polylines=None,):
        self.polylines = polylines

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.polylines = []
                    (_etype66, _size63) = iprot.readListBegin()
                    for _i67 in range(_size63):
                        _elem68 = Polyline()
                        _elem68.read(iprot)
                        self.polylines.append(_elem68)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ClippedPolyline')
        if self.polylines is not None:
            oprot.writeFieldBegin('polylines', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.polylines))
            for iter69 in self.polylines:
                iter69.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Address(object):
    """
    Attributes:
     - langId
     - country
     - region
     - parish
     - city
     - district
     - street
     - building

    """


    def __init__(self, langId=None, country=None, region=None, parish=None, city=None, district=None, street=None, building=None,):
        self.langId = langId
        self.country = country
        self.region = region
        self.parish = parish
        self.city = city
        self.district = district
        self.street = street
        self.building = building

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.langId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.country = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.region = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.parish = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.city = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.district = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.street = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.building = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Address')
        if self.langId is not None:
            oprot.writeFieldBegin('langId', TType.I16, 1)
            oprot.writeI16(self.langId)
            oprot.writeFieldEnd()
        if self.country is not None:
            oprot.writeFieldBegin('country', TType.STRING, 2)
            oprot.writeString(self.country.encode('utf-8') if sys.version_info[0] == 2 else self.country)
            oprot.writeFieldEnd()
        if self.region is not None:
            oprot.writeFieldBegin('region', TType.STRING, 3)
            oprot.writeString(self.region.encode('utf-8') if sys.version_info[0] == 2 else self.region)
            oprot.writeFieldEnd()
        if self.parish is not None:
            oprot.writeFieldBegin('parish', TType.STRING, 4)
            oprot.writeString(self.parish.encode('utf-8') if sys.version_info[0] == 2 else self.parish)
            oprot.writeFieldEnd()
        if self.city is not None:
            oprot.writeFieldBegin('city', TType.STRING, 5)
            oprot.writeString(self.city.encode('utf-8') if sys.version_info[0] == 2 else self.city)
            oprot.writeFieldEnd()
        if self.district is not None:
            oprot.writeFieldBegin('district', TType.STRING, 6)
            oprot.writeString(self.district.encode('utf-8') if sys.version_info[0] == 2 else self.district)
            oprot.writeFieldEnd()
        if self.street is not None:
            oprot.writeFieldBegin('street', TType.STRING, 7)
            oprot.writeString(self.street.encode('utf-8') if sys.version_info[0] == 2 else self.street)
            oprot.writeFieldEnd()
        if self.building is not None:
            oprot.writeFieldBegin('building', TType.STRING, 8)
            oprot.writeString(self.building.encode('utf-8') if sys.version_info[0] == 2 else self.building)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RelaySession(object):
    """
    Attributes:
     - uuid

    """


    def __init__(self, uuid=None,):
        self.uuid = uuid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.uuid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RelaySession')
        if self.uuid is not None:
            oprot.writeFieldBegin('uuid', TType.STRING, 1)
            oprot.writeString(self.uuid.encode('utf-8') if sys.version_info[0] == 2 else self.uuid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RelayingTracksRequest(object):
    """
    Attributes:
     - relaySession
     - waitTimeoutSeconds: How long request can wait data, if not set - default value is used, if 0 - return nothing on no data

    """


    def __init__(self, relaySession=None, waitTimeoutSeconds=None,):
        self.relaySession = relaySession
        self.waitTimeoutSeconds = waitTimeoutSeconds

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.relaySession = RelaySession()
                    self.relaySession.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.waitTimeoutSeconds = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RelayingTracksRequest')
        if self.relaySession is not None:
            oprot.writeFieldBegin('relaySession', TType.STRUCT, 1)
            self.relaySession.write(oprot)
            oprot.writeFieldEnd()
        if self.waitTimeoutSeconds is not None:
            oprot.writeFieldBegin('waitTimeoutSeconds', TType.I64, 2)
            oprot.writeI64(self.waitTimeoutSeconds)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RelaySessionError(TException):
    """
    Attributes:
     - message

    """


    def __init__(self, message=None,):
        super(RelaySessionError, self).__setattr__('message', message)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.message, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RelaySessionError')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChartPoint(object):
    """
    Attributes:
     - capturedTimestamp
     - val

    """


    def __init__(self, capturedTimestamp=None, val=None,):
        self.capturedTimestamp = capturedTimestamp
        self.val = val

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.capturedTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.val = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ChartPoint')
        if self.capturedTimestamp is not None:
            oprot.writeFieldBegin('capturedTimestamp', TType.I64, 1)
            oprot.writeI64(self.capturedTimestamp)
            oprot.writeFieldEnd()
        if self.val is not None:
            oprot.writeFieldBegin('val', TType.DOUBLE, 2)
            oprot.writeDouble(self.val)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChartCurve(object):
    """
    Attributes:
     - points

    """


    def __init__(self, points=None,):
        self.points = points

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.points = []
                    (_etype73, _size70) = iprot.readListBegin()
                    for _i74 in range(_size70):
                        _elem75 = ChartPoint()
                        _elem75.read(iprot)
                        self.points.append(_elem75)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ChartCurve')
        if self.points is not None:
            oprot.writeFieldBegin('points', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.points))
            for iter76 in self.points:
                iter76.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChartPositionCustomFieldId(object):
    """
    Attributes:
     - fieldName
     - sensor

    """


    def __init__(self, fieldName=None, sensor=None,):
        self.fieldName = fieldName
        self.sensor = sensor

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fieldName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.sensor = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ChartPositionCustomFieldId')
        if self.fieldName is not None:
            oprot.writeFieldBegin('fieldName', TType.STRING, 1)
            oprot.writeString(self.fieldName.encode('utf-8') if sys.version_info[0] == 2 else self.fieldName)
            oprot.writeFieldEnd()
        if self.sensor is not None:
            oprot.writeFieldBegin('sensor', TType.STRING, 2)
            oprot.writeString(self.sensor.encode('utf-8') if sys.version_info[0] == 2 else self.sensor)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChartCurveId(object):
    """
    Attributes:
     - positionFieldName
     - positionCustomFieldId

    """


    def __init__(self, positionFieldName=None, positionCustomFieldId=None,):
        self.positionFieldName = positionFieldName
        self.positionCustomFieldId = positionCustomFieldId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.positionFieldName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.positionCustomFieldId = ChartPositionCustomFieldId()
                    self.positionCustomFieldId.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ChartCurveId')
        if self.positionFieldName is not None:
            oprot.writeFieldBegin('positionFieldName', TType.STRING, 1)
            oprot.writeString(self.positionFieldName.encode('utf-8') if sys.version_info[0] == 2 else self.positionFieldName)
            oprot.writeFieldEnd()
        if self.positionCustomFieldId is not None:
            oprot.writeFieldBegin('positionCustomFieldId', TType.STRUCT, 2)
            self.positionCustomFieldId.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RoadAccidentAddress(object):
    """
    Attributes:
     - region
     - settlement
     - street
     - building

    """


    def __init__(self, region=None, settlement=None, street=None, building=None,):
        self.region = region
        self.settlement = settlement
        self.street = street
        self.building = building

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.region = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.settlement = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.street = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.building = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RoadAccidentAddress')
        if self.region is not None:
            oprot.writeFieldBegin('region', TType.STRING, 1)
            oprot.writeString(self.region.encode('utf-8') if sys.version_info[0] == 2 else self.region)
            oprot.writeFieldEnd()
        if self.settlement is not None:
            oprot.writeFieldBegin('settlement', TType.STRING, 2)
            oprot.writeString(self.settlement.encode('utf-8') if sys.version_info[0] == 2 else self.settlement)
            oprot.writeFieldEnd()
        if self.street is not None:
            oprot.writeFieldBegin('street', TType.STRING, 3)
            oprot.writeString(self.street.encode('utf-8') if sys.version_info[0] == 2 else self.street)
            oprot.writeFieldEnd()
        if self.building is not None:
            oprot.writeFieldBegin('building', TType.STRING, 4)
            oprot.writeString(self.building.encode('utf-8') if sys.version_info[0] == 2 else self.building)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(PositionRequestFields)
PositionRequestFields.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'columns', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.LIST, 'customColumns', (TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(Variant)
Variant.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'i32Value', None, None, ),  # 1
    (2, TType.I64, 'i64Value', None, None, ),  # 2
    (3, TType.BOOL, 'boolValue', None, None, ),  # 3
    (4, TType.DOUBLE, 'doubleValue', None, None, ),  # 4
    (5, TType.STRING, 'stringValue', 'UTF8', None, ),  # 5
)
all_structs.append(Position)
Position.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'values', (TType.STRUCT, [Variant, None], False), None, ),  # 1
    (2, TType.LIST, 'customValues', (TType.STRUCT, [Variant, None], False), None, ),  # 2
    (3, TType.STRING, 'sensorKey', 'UTF8', None, ),  # 3
)
all_structs.append(PositionWithVehicle)
PositionWithVehicle.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'position', [Position, None], None, ),  # 1
    (2, TType.STRING, 'vehicleUuid', 'UTF8', None, ),  # 2
)
all_structs.append(PositionWithColumns)
PositionWithColumns.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'position', [Position, None], None, ),  # 1
    (2, TType.STRUCT, 'columns', [PositionRequestFields, None], None, ),  # 2
    (3, TType.STRING, 'vehicleUuid', 'UTF8', None, ),  # 3
)
all_structs.append(Track)
Track.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'positions', (TType.STRUCT, [Position, None], False), None, ),  # 1
    (2, TType.STRING, 'vehicleUuid', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'limited', None, None, ),  # 3
)
all_structs.append(VehicleRelayTrackRequest)
VehicleRelayTrackRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'vehicleUuid', 'UTF8', None, ),  # 1
    (2, TType.I64, 'fromTimestamp', None, None, ),  # 2
)
all_structs.append(VehicleHistoryTrackRequest)
VehicleHistoryTrackRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'vehicleUuid', 'UTF8', None, ),  # 1
    (2, TType.I64, 'fromTimestamp', None, None, ),  # 2
    (3, TType.I64, 'toTimestamp', None, None, ),  # 3
    (4, TType.BOOL, 'includeTrackSensors', None, None, ),  # 4
)
all_structs.append(VehicleHistoryTrackGroupedDetailsRequest)
VehicleHistoryTrackGroupedDetailsRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'vehicleUuid', 'UTF8', None, ),  # 1
    (2, TType.I64, 'fromTimestamp', None, None, ),  # 2
    (3, TType.I64, 'toTimestamp', None, None, ),  # 3
    (4, TType.BOOL, 'desc', None, None, ),  # 4
    (5, TType.I32, 'limit', None, None, ),  # 5
    (6, TType.I32, 'offset', None, None, ),  # 6
    (7, TType.STRUCT, 'columns', [PositionRequestFields, None], None, ),  # 7
)
all_structs.append(VehicleHistoryTrackGroupedDetailsResponse)
VehicleHistoryTrackGroupedDetailsResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'columns', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.LIST, 'valueRows', (TType.LIST, (TType.STRUCT, [Variant, None], False), False), None, ),  # 2
)
all_structs.append(TripTrackRequest)
TripTrackRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'tripId', 'UTF8', None, ),  # 1
    (2, TType.I64, 'fromTimestamp', None, None, ),  # 2
    (3, TType.I64, 'toTimestamp', None, None, ),  # 3
)
all_structs.append(GeoPoint)
GeoPoint.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'lon', None, None, ),  # 1
    (2, TType.DOUBLE, 'lat', None, None, ),  # 2
)
all_structs.append(GeoRect)
GeoRect.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'topLeft', [GeoPoint, None], None, ),  # 1
    (2, TType.STRUCT, 'rightBottom', [GeoPoint, None], None, ),  # 2
)
all_structs.append(Viewport)
Viewport.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'height', None, None, ),  # 1
    (2, TType.I32, 'width', None, None, ),  # 2
    (3, TType.I32, 'zoom', None, None, ),  # 3
    (4, TType.STRUCT, 'hotPoint', [GeoPoint, None], None, ),  # 4
)
all_structs.append(Polyline)
Polyline.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'points', (TType.STRUCT, [GeoPoint, None], False), None, ),  # 1
)
all_structs.append(ClippedPolyline)
ClippedPolyline.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'polylines', (TType.STRUCT, [Polyline, None], False), None, ),  # 1
)
all_structs.append(Address)
Address.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'langId', None, None, ),  # 1
    (2, TType.STRING, 'country', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'region', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'parish', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'city', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'district', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'street', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'building', 'UTF8', None, ),  # 8
)
all_structs.append(RelaySession)
RelaySession.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'uuid', 'UTF8', None, ),  # 1
)
all_structs.append(RelayingTracksRequest)
RelayingTracksRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'relaySession', [RelaySession, None], None, ),  # 1
    (2, TType.I64, 'waitTimeoutSeconds', None, None, ),  # 2
)
all_structs.append(RelaySessionError)
RelaySessionError.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(ChartPoint)
ChartPoint.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'capturedTimestamp', None, None, ),  # 1
    (2, TType.DOUBLE, 'val', None, None, ),  # 2
)
all_structs.append(ChartCurve)
ChartCurve.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'points', (TType.STRUCT, [ChartPoint, None], False), None, ),  # 1
)
all_structs.append(ChartPositionCustomFieldId)
ChartPositionCustomFieldId.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'fieldName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'sensor', 'UTF8', None, ),  # 2
)
all_structs.append(ChartCurveId)
ChartCurveId.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'positionFieldName', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'positionCustomFieldId', [ChartPositionCustomFieldId, None], None, ),  # 2
)
all_structs.append(RoadAccidentAddress)
RoadAccidentAddress.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'region', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'settlement', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'street', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'building', 'UTF8', None, ),  # 4
)
fix_spec(all_structs)
del all_structs
