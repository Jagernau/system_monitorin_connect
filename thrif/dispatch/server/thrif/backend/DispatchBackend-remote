#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from dispatch.server.thrift.backend import DispatchBackend
from dispatch.server.thrift.backend.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  Session login(string userLoginName, string password, bool longSession)')
    print('  void logout(Session session)')
    print('  User getUser(Session session, string id)')
    print('   getUserSecurityData(Session session,  id)')
    print('   getUsers(Session session, UserFilter filter, UserFilterOptionalParams optionalParams)')
    print('  User getCurrentUser(Session session)')
    print('   getChildrenUsers(Session session, string parentGroupId, bool recursive)')
    print('  User createUser(Session session, string parentGroupId, string login, string password, string roleId,  groupLink, string welcomeName, string email, string phone)')
    print('  User createUserSecure(Session session, string parentGroupId, string login, string passwordHash, string passwordSalt, string roleId,  groupLink, string welcomeName, string email, string phone)')
    print('  void editUser(Session session, User data)')
    print('  void deleteUser(Session session, string id)')
    print('  void changePassword(Session session, string oldPassword, string newPassword)')
    print('  void setPassword(Session session, string userId, string newPassword)')
    print('  void setPasswordSecure(Session session, string userId, string newPasswordHash, string newPasswordSalt)')
    print('  Role getRole(Session session, string id)')
    print('  Role getUserRole(Session session, string userId)')
    print('   getGroupRoles(Session session, string parentGroupId, bool recursive)')
    print('  Group getGroup(Session session, string id)')
    print('   getChildrenGroups(Session session, string parentGroupId, bool recursive)')
    print('   getRootGroups(Session session)')
    print('  Group createGroup(Session session, string parentGroupId, string title)')
    print('  Group createCompany(Session session, string parentGroupId, string title, License license)')
    print('  Group createCompanyWithAdditionalFields(Session session, string parentGroupId, string title, License license, AdditionalFields additionalFields)')
    print('  void editGroup(Session session, Group data)')
    print('  void deleteGroup(Session session, string id, bool cascade)')
    print('  MonitoringObject getMonitoringObject(Session session, string id)')
    print('   getChildrenMonitoringObjects(Session session, string parentGroupId, bool recursive)')
    print('   getMonitoringObjectsPortion(Session session, MonitoringObjectFilter filter, i32 offset, i32 limit)')
    print('   getMonitoringObjects(Session session, MonitoringObjectFilter filter, FilterType filterType)')
    print('  MonitoringObject createMonitoringObject(Session session, string parentGroupId, Tracker tracker, string name, string displayColor, string displayIcon)')
    print('  MonitoringObject createMonitoringObjectWithAdditionalFields(Session session, string parentGroupId, Tracker tracker, string name, string displayColor, string displayIcon, AdditionalFields additionalFields)')
    print('  MonitoringObject createMonitoringObjectByObjectDescription(Session session, MonitoringObject data)')
    print('  void editMonitoringObject(Session session, MonitoringObject data)')
    print('  void deleteMonitoringObject(Session session, string id)')
    print('   getMonitoringObjectEvents(Session session,  monitoringObjectIdList, string startDate, string endDate)')
    print('   getMonitoringObjectEventsSince(Session session,  monitoringObjectIdList, string startDate, i64 startMonotonicIndex, i32 limit)')
    print('   getMonitoringObjectIcons(Session session, MonitoringObjectIconFilter filter)')
    print('  void reportRoadAccident(Session session, string monitoringObjectId, RoadAccidentEventParameters eventParams)')
    print('   getMonitoringObjectCommands(Session session, string monitoringObjectId)')
    print('  i64 executeCommand(Session session, string commandId)')
    print('   getCommandsStatus(Session session, string monitoringObjectId)')
    print('  RelaySession startRelayingVehicles(Session session,  requests, PositionRequestFields columns, i32 messageLimit)')
    print('   getRelayingTracks(RelaySession relayingSession)')
    print('   getRelayingTracksEx(RelayingTracksRequest request)')
    print('   getMonitoringObjectsTracks(Session session,  requests, PositionRequestFields columns, i32 messageLimit)')
    print('   getClippedMonitoringObjectTracks(Session session, VehicleHistoryTrackRequest request, PositionRequestFields columns, Viewport viewport, bool useAdditionalTrackSplitting)')
    print('  VehicleHistoryTrackGroupedDetailsResponse getMonitoringObjectTrackGroupedDetails(Session session, VehicleHistoryTrackGroupedDetailsRequest request)')
    print('   getRecentPositions(Session session,  vehicleUuids, PositionRequestFields columns)')
    print('   getRecentPositionsWithAllColumns(Session session,  vehicleUuids)')
    print('  void enableVehicle(Session session, string vehicleId, bool enable)')
    print('  void setTrackerStatus(Session session, string monitoringObjectId, TrackerStatus status)')
    print('   getTrackerStatusHistory(Session session, string monitoringObjectId)')
    print('   getTrackersCertificate(Session session,  monitoringObjectIds)')
    print('  void setTrackerCertificate(Session session, TrackerCertificate certificate)')
    print('  void removeTrackersCertificate(Session session,  monitoringObjectIds)')
    print('  bool isVehicleEnabled(Session session, string vehicleId)')
    print('   getRecentPositionsWithValidGPS(Session session,  vehicleUuids, PositionRequestFields columns)')
    print('  void reportBrokenTracker(Session session, BrokenTrackerRequest request)')
    print('   getGeopointsAddresses(Session session,  points)')
    print('   getCompanyStatistics(Session session, string startDate, string endDate,  companyUUIDs)')
    print('  Relay getRelay(Session session, string id)')
    print('   getChildRelays(Session session, string parentGroupId, bool recursive)')
    print('  Relay createRelay(Session session, string title, string parentGroupId, string protocol, bool enabled,  monitoringObjectsIds, string host, RelayOptionalParams optionalParams)')
    print('  void editRelay(Session session, Relay relay)')
    print('  void deleteRelay(Session session, string id)')
    print('  Geofence getGeofence(Session session, string id)')
    print('   getChildGeofences(Session session, string parentGroupId, bool recursive)')
    print('  string getGeofenceGeometryWKT(Session session, string id)')
    print('  Geofence createGeofence(Session session, string parentGroupId, string title, string color, string geometryWKT)')
    print('  void editGeofence(Session session, Geofence geofence)')
    print('  void editGeofenceGeometryWKT(Session session, string id, string geometryWKT)')
    print('  void deleteGeofence(Session session, string id)')
    print('  Place getPlace(Session session, string id)')
    print('   getChildPlaces(Session session, string parentGroupId, bool recursive)')
    print('  Place createPlace(Session session, string parentGroupId, string title, GeoPoint position)')
    print('  void editPlace(Session session, Place place)')
    print('  void deletePlace(Session session, string id)')
    print('  RouteInfo getRoute(Session session, string routeId)')
    print('   getChildRoutes(Session session, string parentGroupId, bool recursive)')
    print('   getRouteLines(Session session, string routeId, Viewport viewport)')
    print('  RouteInfo createRoute(Session session, string parentGroupId, string title, string color, double coridorWidth, RouteControlMethod routeControlMethod, VehicleRoutingType vehicleRoutingType,  routeStageSets)')
    print('  RouteInfo editRoute(Session session, Route route)')
    print('  void deleteRoute(Session session, string id)')
    print('  RouteGeometry calculateRouteGeometry(Session session,  stages, VehicleRoutingType routingType, Viewport viewport)')
    print('  EventsRule getEventsRule(Session session, string id)')
    print('   getChildEventsRules(Session session, string parentGroupId, bool recursive)')
    print('  EventsRule createEventsRule(Session session, string parentGroupId, string title,  monitoringObjectIds,  eventsConditions, bool eventsConditionsAreDisjunctive, EventType generatedEventType, ApplyActionsCondition actionsCondition, EventsRuleActions actions)')
    print('  void editEventsRule(Session session, EventsRule modifiedRule)')
    print('  void deleteEventsRule(Session session, string id)')
    print('   getTripsInfo(Session session,  tripsId)')
    print('   getTripsId(Session session, string parentGroupId,  allowableStatuses, bool recursive)')
    print('   getMonitoringObjectsTrips(Session session,  monitoringObjectsId)')
    print('  Trip createTrip(Session session, string vehicleId, string routeId,  tripStageSets, i64 startTripUnixTime, i64 abortTripUnixTime, TripNotification notificationParams)')
    print('  Trip createTripWithAdditionalFields(Session session, string vehicleId, string routeId,  tripStageSets, i64 startTripUnixTime, i64 abortTripUnixTime, TripNotification notificationParams, AdditionalFields additionalFields)')
    print('  void editTrip(Session session, Trip trip)')
    print('  void deleteTrip(Session session, string id)')
    print('  void cancelTrip(Session session, string id)')
    print('   getTripEvents(Session session,  tripIds,  eventTypes, i64 globalMonotonicIndex)')
    print('   getClippedTripTracks(Session session, TripTrackRequest request, PositionRequestFields columns, Viewport viewport)')
    print('  StoreScheme getStoreScheme(Session session, string schemeId)')
    print('  StoreScheme getAdditionalFieldsScheme(Session session, string parentGroupId, ExtensionForStoreType extensionForType)')
    print('  StoreScheme createStoreScheme(Session session, string parentGroupId, string name,  fields, string description)')
    print('  void deleteStoreScheme(Session session, string id)')
    print('  void editStoreScheme(Session session, StoreScheme scheme)')
    print('   getCountries(Session session, AddressFilterInfo filter)')
    print('   getCities(Session session, AddressInfoItContext context, AddressFilterInfo filter)')
    print('   getStreets(Session session, AddressInfoItContext context, AddressFilterInfo filter)')
    print('   getBuildings(Session session, AddressInfoItContext context, AddressFilterInfo filter)')
    print('  GeoPoint getPoint(Session session, AddressInfoItContext context)')
    print('   getSensorConfigurations(Session session, string monitoringObjectId)')
    print('  void setSensorConfigurations(Session session, string monitoringObjectId,  sensorConfigurations)')
    print('   getTrackSensorConfigurations(Session session, string monitoringObjectId)')
    print('  SensorConfigurationSet createSensorConfigurationSet(Session session, string parentGroupId, string name,  sensorConfigurations)')
    print('  SensorConfigurationSet getSensorConfigurationSet(Session session, string id)')
    print('   getChildSensorConfigurationSet(Session session, string parentGroupId, bool recursive)')
    print('  void editSensorConfigurationSet(Session session, SensorConfigurationSet sensorConfigurationSet)')
    print('  void deleteSensorConfigurationSet(Session session, string id)')
    print('   getMonitoringObjectChart(Session session, VehicleHistoryTrackRequest request,  columns, i32 lod)')
    print('   getMonitoringObjectsTracksRects(Session session,  requests)')
    print('  void changeVehicleCreationTime(Session session, string vehicleId, i64 timestamp)')
    print('   getChildrenReports(Session session, string parentGroupId, bool recursive)')
    print('  void sendReport(Session session, string email, ReportRequest parameters)')
    print('  ScreenReport buildScreenReport(Session session, ReportRequest parameters)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = DispatchBackend.Client(protocol)
transport.open()

if cmd == 'login':
    if len(args) != 3:
        print('login requires 3 args')
        sys.exit(1)
    pp.pprint(client.login(args[0], args[1], eval(args[2]),))

elif cmd == 'logout':
    if len(args) != 1:
        print('logout requires 1 args')
        sys.exit(1)
    pp.pprint(client.logout(eval(args[0]),))

elif cmd == 'getUser':
    if len(args) != 2:
        print('getUser requires 2 args')
        sys.exit(1)
    pp.pprint(client.getUser(eval(args[0]), args[1],))

elif cmd == 'getUserSecurityData':
    if len(args) != 2:
        print('getUserSecurityData requires 2 args')
        sys.exit(1)
    pp.pprint(client.getUserSecurityData(eval(args[0]), eval(args[1]),))

elif cmd == 'getUsers':
    if len(args) != 3:
        print('getUsers requires 3 args')
        sys.exit(1)
    pp.pprint(client.getUsers(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'getCurrentUser':
    if len(args) != 1:
        print('getCurrentUser requires 1 args')
        sys.exit(1)
    pp.pprint(client.getCurrentUser(eval(args[0]),))

elif cmd == 'getChildrenUsers':
    if len(args) != 3:
        print('getChildrenUsers requires 3 args')
        sys.exit(1)
    pp.pprint(client.getChildrenUsers(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'createUser':
    if len(args) != 9:
        print('createUser requires 9 args')
        sys.exit(1)
    pp.pprint(client.createUser(eval(args[0]), args[1], args[2], args[3], args[4], eval(args[5]), args[6], args[7], args[8],))

elif cmd == 'createUserSecure':
    if len(args) != 10:
        print('createUserSecure requires 10 args')
        sys.exit(1)
    pp.pprint(client.createUserSecure(eval(args[0]), args[1], args[2], args[3], args[4], args[5], eval(args[6]), args[7], args[8], args[9],))

elif cmd == 'editUser':
    if len(args) != 2:
        print('editUser requires 2 args')
        sys.exit(1)
    pp.pprint(client.editUser(eval(args[0]), eval(args[1]),))

elif cmd == 'deleteUser':
    if len(args) != 2:
        print('deleteUser requires 2 args')
        sys.exit(1)
    pp.pprint(client.deleteUser(eval(args[0]), args[1],))

elif cmd == 'changePassword':
    if len(args) != 3:
        print('changePassword requires 3 args')
        sys.exit(1)
    pp.pprint(client.changePassword(eval(args[0]), args[1], args[2],))

elif cmd == 'setPassword':
    if len(args) != 3:
        print('setPassword requires 3 args')
        sys.exit(1)
    pp.pprint(client.setPassword(eval(args[0]), args[1], args[2],))

elif cmd == 'setPasswordSecure':
    if len(args) != 4:
        print('setPasswordSecure requires 4 args')
        sys.exit(1)
    pp.pprint(client.setPasswordSecure(eval(args[0]), args[1], args[2], args[3],))

elif cmd == 'getRole':
    if len(args) != 2:
        print('getRole requires 2 args')
        sys.exit(1)
    pp.pprint(client.getRole(eval(args[0]), args[1],))

elif cmd == 'getUserRole':
    if len(args) != 2:
        print('getUserRole requires 2 args')
        sys.exit(1)
    pp.pprint(client.getUserRole(eval(args[0]), args[1],))

elif cmd == 'getGroupRoles':
    if len(args) != 3:
        print('getGroupRoles requires 3 args')
        sys.exit(1)
    pp.pprint(client.getGroupRoles(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'getGroup':
    if len(args) != 2:
        print('getGroup requires 2 args')
        sys.exit(1)
    pp.pprint(client.getGroup(eval(args[0]), args[1],))

elif cmd == 'getChildrenGroups':
    if len(args) != 3:
        print('getChildrenGroups requires 3 args')
        sys.exit(1)
    pp.pprint(client.getChildrenGroups(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'getRootGroups':
    if len(args) != 1:
        print('getRootGroups requires 1 args')
        sys.exit(1)
    pp.pprint(client.getRootGroups(eval(args[0]),))

elif cmd == 'createGroup':
    if len(args) != 3:
        print('createGroup requires 3 args')
        sys.exit(1)
    pp.pprint(client.createGroup(eval(args[0]), args[1], args[2],))

elif cmd == 'createCompany':
    if len(args) != 4:
        print('createCompany requires 4 args')
        sys.exit(1)
    pp.pprint(client.createCompany(eval(args[0]), args[1], args[2], eval(args[3]),))

elif cmd == 'createCompanyWithAdditionalFields':
    if len(args) != 5:
        print('createCompanyWithAdditionalFields requires 5 args')
        sys.exit(1)
    pp.pprint(client.createCompanyWithAdditionalFields(eval(args[0]), args[1], args[2], eval(args[3]), eval(args[4]),))

elif cmd == 'editGroup':
    if len(args) != 2:
        print('editGroup requires 2 args')
        sys.exit(1)
    pp.pprint(client.editGroup(eval(args[0]), eval(args[1]),))

elif cmd == 'deleteGroup':
    if len(args) != 3:
        print('deleteGroup requires 3 args')
        sys.exit(1)
    pp.pprint(client.deleteGroup(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'getMonitoringObject':
    if len(args) != 2:
        print('getMonitoringObject requires 2 args')
        sys.exit(1)
    pp.pprint(client.getMonitoringObject(eval(args[0]), args[1],))

elif cmd == 'getChildrenMonitoringObjects':
    if len(args) != 3:
        print('getChildrenMonitoringObjects requires 3 args')
        sys.exit(1)
    pp.pprint(client.getChildrenMonitoringObjects(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'getMonitoringObjectsPortion':
    if len(args) != 4:
        print('getMonitoringObjectsPortion requires 4 args')
        sys.exit(1)
    pp.pprint(client.getMonitoringObjectsPortion(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'getMonitoringObjects':
    if len(args) != 3:
        print('getMonitoringObjects requires 3 args')
        sys.exit(1)
    pp.pprint(client.getMonitoringObjects(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'createMonitoringObject':
    if len(args) != 6:
        print('createMonitoringObject requires 6 args')
        sys.exit(1)
    pp.pprint(client.createMonitoringObject(eval(args[0]), args[1], eval(args[2]), args[3], args[4], args[5],))

elif cmd == 'createMonitoringObjectWithAdditionalFields':
    if len(args) != 7:
        print('createMonitoringObjectWithAdditionalFields requires 7 args')
        sys.exit(1)
    pp.pprint(client.createMonitoringObjectWithAdditionalFields(eval(args[0]), args[1], eval(args[2]), args[3], args[4], args[5], eval(args[6]),))

elif cmd == 'createMonitoringObjectByObjectDescription':
    if len(args) != 2:
        print('createMonitoringObjectByObjectDescription requires 2 args')
        sys.exit(1)
    pp.pprint(client.createMonitoringObjectByObjectDescription(eval(args[0]), eval(args[1]),))

elif cmd == 'editMonitoringObject':
    if len(args) != 2:
        print('editMonitoringObject requires 2 args')
        sys.exit(1)
    pp.pprint(client.editMonitoringObject(eval(args[0]), eval(args[1]),))

elif cmd == 'deleteMonitoringObject':
    if len(args) != 2:
        print('deleteMonitoringObject requires 2 args')
        sys.exit(1)
    pp.pprint(client.deleteMonitoringObject(eval(args[0]), args[1],))

elif cmd == 'getMonitoringObjectEvents':
    if len(args) != 4:
        print('getMonitoringObjectEvents requires 4 args')
        sys.exit(1)
    pp.pprint(client.getMonitoringObjectEvents(eval(args[0]), eval(args[1]), args[2], args[3],))

elif cmd == 'getMonitoringObjectEventsSince':
    if len(args) != 5:
        print('getMonitoringObjectEventsSince requires 5 args')
        sys.exit(1)
    pp.pprint(client.getMonitoringObjectEventsSince(eval(args[0]), eval(args[1]), args[2], eval(args[3]), eval(args[4]),))

elif cmd == 'getMonitoringObjectIcons':
    if len(args) != 2:
        print('getMonitoringObjectIcons requires 2 args')
        sys.exit(1)
    pp.pprint(client.getMonitoringObjectIcons(eval(args[0]), eval(args[1]),))

elif cmd == 'reportRoadAccident':
    if len(args) != 3:
        print('reportRoadAccident requires 3 args')
        sys.exit(1)
    pp.pprint(client.reportRoadAccident(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'getMonitoringObjectCommands':
    if len(args) != 2:
        print('getMonitoringObjectCommands requires 2 args')
        sys.exit(1)
    pp.pprint(client.getMonitoringObjectCommands(eval(args[0]), args[1],))

elif cmd == 'executeCommand':
    if len(args) != 2:
        print('executeCommand requires 2 args')
        sys.exit(1)
    pp.pprint(client.executeCommand(eval(args[0]), args[1],))

elif cmd == 'getCommandsStatus':
    if len(args) != 2:
        print('getCommandsStatus requires 2 args')
        sys.exit(1)
    pp.pprint(client.getCommandsStatus(eval(args[0]), args[1],))

elif cmd == 'startRelayingVehicles':
    if len(args) != 4:
        print('startRelayingVehicles requires 4 args')
        sys.exit(1)
    pp.pprint(client.startRelayingVehicles(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'getRelayingTracks':
    if len(args) != 1:
        print('getRelayingTracks requires 1 args')
        sys.exit(1)
    pp.pprint(client.getRelayingTracks(eval(args[0]),))

elif cmd == 'getRelayingTracksEx':
    if len(args) != 1:
        print('getRelayingTracksEx requires 1 args')
        sys.exit(1)
    pp.pprint(client.getRelayingTracksEx(eval(args[0]),))

elif cmd == 'getMonitoringObjectsTracks':
    if len(args) != 4:
        print('getMonitoringObjectsTracks requires 4 args')
        sys.exit(1)
    pp.pprint(client.getMonitoringObjectsTracks(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'getClippedMonitoringObjectTracks':
    if len(args) != 5:
        print('getClippedMonitoringObjectTracks requires 5 args')
        sys.exit(1)
    pp.pprint(client.getClippedMonitoringObjectTracks(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'getMonitoringObjectTrackGroupedDetails':
    if len(args) != 2:
        print('getMonitoringObjectTrackGroupedDetails requires 2 args')
        sys.exit(1)
    pp.pprint(client.getMonitoringObjectTrackGroupedDetails(eval(args[0]), eval(args[1]),))

elif cmd == 'getRecentPositions':
    if len(args) != 3:
        print('getRecentPositions requires 3 args')
        sys.exit(1)
    pp.pprint(client.getRecentPositions(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'getRecentPositionsWithAllColumns':
    if len(args) != 2:
        print('getRecentPositionsWithAllColumns requires 2 args')
        sys.exit(1)
    pp.pprint(client.getRecentPositionsWithAllColumns(eval(args[0]), eval(args[1]),))

elif cmd == 'enableVehicle':
    if len(args) != 3:
        print('enableVehicle requires 3 args')
        sys.exit(1)
    pp.pprint(client.enableVehicle(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'setTrackerStatus':
    if len(args) != 3:
        print('setTrackerStatus requires 3 args')
        sys.exit(1)
    pp.pprint(client.setTrackerStatus(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'getTrackerStatusHistory':
    if len(args) != 2:
        print('getTrackerStatusHistory requires 2 args')
        sys.exit(1)
    pp.pprint(client.getTrackerStatusHistory(eval(args[0]), args[1],))

elif cmd == 'getTrackersCertificate':
    if len(args) != 2:
        print('getTrackersCertificate requires 2 args')
        sys.exit(1)
    pp.pprint(client.getTrackersCertificate(eval(args[0]), eval(args[1]),))

elif cmd == 'setTrackerCertificate':
    if len(args) != 2:
        print('setTrackerCertificate requires 2 args')
        sys.exit(1)
    pp.pprint(client.setTrackerCertificate(eval(args[0]), eval(args[1]),))

elif cmd == 'removeTrackersCertificate':
    if len(args) != 2:
        print('removeTrackersCertificate requires 2 args')
        sys.exit(1)
    pp.pprint(client.removeTrackersCertificate(eval(args[0]), eval(args[1]),))

elif cmd == 'isVehicleEnabled':
    if len(args) != 2:
        print('isVehicleEnabled requires 2 args')
        sys.exit(1)
    pp.pprint(client.isVehicleEnabled(eval(args[0]), args[1],))

elif cmd == 'getRecentPositionsWithValidGPS':
    if len(args) != 3:
        print('getRecentPositionsWithValidGPS requires 3 args')
        sys.exit(1)
    pp.pprint(client.getRecentPositionsWithValidGPS(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'reportBrokenTracker':
    if len(args) != 2:
        print('reportBrokenTracker requires 2 args')
        sys.exit(1)
    pp.pprint(client.reportBrokenTracker(eval(args[0]), eval(args[1]),))

elif cmd == 'getGeopointsAddresses':
    if len(args) != 2:
        print('getGeopointsAddresses requires 2 args')
        sys.exit(1)
    pp.pprint(client.getGeopointsAddresses(eval(args[0]), eval(args[1]),))

elif cmd == 'getCompanyStatistics':
    if len(args) != 4:
        print('getCompanyStatistics requires 4 args')
        sys.exit(1)
    pp.pprint(client.getCompanyStatistics(eval(args[0]), args[1], args[2], eval(args[3]),))

elif cmd == 'getRelay':
    if len(args) != 2:
        print('getRelay requires 2 args')
        sys.exit(1)
    pp.pprint(client.getRelay(eval(args[0]), args[1],))

elif cmd == 'getChildRelays':
    if len(args) != 3:
        print('getChildRelays requires 3 args')
        sys.exit(1)
    pp.pprint(client.getChildRelays(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'createRelay':
    if len(args) != 8:
        print('createRelay requires 8 args')
        sys.exit(1)
    pp.pprint(client.createRelay(eval(args[0]), args[1], args[2], args[3], eval(args[4]), eval(args[5]), args[6], eval(args[7]),))

elif cmd == 'editRelay':
    if len(args) != 2:
        print('editRelay requires 2 args')
        sys.exit(1)
    pp.pprint(client.editRelay(eval(args[0]), eval(args[1]),))

elif cmd == 'deleteRelay':
    if len(args) != 2:
        print('deleteRelay requires 2 args')
        sys.exit(1)
    pp.pprint(client.deleteRelay(eval(args[0]), args[1],))

elif cmd == 'getGeofence':
    if len(args) != 2:
        print('getGeofence requires 2 args')
        sys.exit(1)
    pp.pprint(client.getGeofence(eval(args[0]), args[1],))

elif cmd == 'getChildGeofences':
    if len(args) != 3:
        print('getChildGeofences requires 3 args')
        sys.exit(1)
    pp.pprint(client.getChildGeofences(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'getGeofenceGeometryWKT':
    if len(args) != 2:
        print('getGeofenceGeometryWKT requires 2 args')
        sys.exit(1)
    pp.pprint(client.getGeofenceGeometryWKT(eval(args[0]), args[1],))

elif cmd == 'createGeofence':
    if len(args) != 5:
        print('createGeofence requires 5 args')
        sys.exit(1)
    pp.pprint(client.createGeofence(eval(args[0]), args[1], args[2], args[3], args[4],))

elif cmd == 'editGeofence':
    if len(args) != 2:
        print('editGeofence requires 2 args')
        sys.exit(1)
    pp.pprint(client.editGeofence(eval(args[0]), eval(args[1]),))

elif cmd == 'editGeofenceGeometryWKT':
    if len(args) != 3:
        print('editGeofenceGeometryWKT requires 3 args')
        sys.exit(1)
    pp.pprint(client.editGeofenceGeometryWKT(eval(args[0]), args[1], args[2],))

elif cmd == 'deleteGeofence':
    if len(args) != 2:
        print('deleteGeofence requires 2 args')
        sys.exit(1)
    pp.pprint(client.deleteGeofence(eval(args[0]), args[1],))

elif cmd == 'getPlace':
    if len(args) != 2:
        print('getPlace requires 2 args')
        sys.exit(1)
    pp.pprint(client.getPlace(eval(args[0]), args[1],))

elif cmd == 'getChildPlaces':
    if len(args) != 3:
        print('getChildPlaces requires 3 args')
        sys.exit(1)
    pp.pprint(client.getChildPlaces(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'createPlace':
    if len(args) != 4:
        print('createPlace requires 4 args')
        sys.exit(1)
    pp.pprint(client.createPlace(eval(args[0]), args[1], args[2], eval(args[3]),))

elif cmd == 'editPlace':
    if len(args) != 2:
        print('editPlace requires 2 args')
        sys.exit(1)
    pp.pprint(client.editPlace(eval(args[0]), eval(args[1]),))

elif cmd == 'deletePlace':
    if len(args) != 2:
        print('deletePlace requires 2 args')
        sys.exit(1)
    pp.pprint(client.deletePlace(eval(args[0]), args[1],))

elif cmd == 'getRoute':
    if len(args) != 2:
        print('getRoute requires 2 args')
        sys.exit(1)
    pp.pprint(client.getRoute(eval(args[0]), args[1],))

elif cmd == 'getChildRoutes':
    if len(args) != 3:
        print('getChildRoutes requires 3 args')
        sys.exit(1)
    pp.pprint(client.getChildRoutes(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'getRouteLines':
    if len(args) != 3:
        print('getRouteLines requires 3 args')
        sys.exit(1)
    pp.pprint(client.getRouteLines(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'createRoute':
    if len(args) != 8:
        print('createRoute requires 8 args')
        sys.exit(1)
    pp.pprint(client.createRoute(eval(args[0]), args[1], args[2], args[3], eval(args[4]), eval(args[5]), eval(args[6]), eval(args[7]),))

elif cmd == 'editRoute':
    if len(args) != 2:
        print('editRoute requires 2 args')
        sys.exit(1)
    pp.pprint(client.editRoute(eval(args[0]), eval(args[1]),))

elif cmd == 'deleteRoute':
    if len(args) != 2:
        print('deleteRoute requires 2 args')
        sys.exit(1)
    pp.pprint(client.deleteRoute(eval(args[0]), args[1],))

elif cmd == 'calculateRouteGeometry':
    if len(args) != 4:
        print('calculateRouteGeometry requires 4 args')
        sys.exit(1)
    pp.pprint(client.calculateRouteGeometry(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'getEventsRule':
    if len(args) != 2:
        print('getEventsRule requires 2 args')
        sys.exit(1)
    pp.pprint(client.getEventsRule(eval(args[0]), args[1],))

elif cmd == 'getChildEventsRules':
    if len(args) != 3:
        print('getChildEventsRules requires 3 args')
        sys.exit(1)
    pp.pprint(client.getChildEventsRules(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'createEventsRule':
    if len(args) != 9:
        print('createEventsRule requires 9 args')
        sys.exit(1)
    pp.pprint(client.createEventsRule(eval(args[0]), args[1], args[2], eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]), eval(args[7]), eval(args[8]),))

elif cmd == 'editEventsRule':
    if len(args) != 2:
        print('editEventsRule requires 2 args')
        sys.exit(1)
    pp.pprint(client.editEventsRule(eval(args[0]), eval(args[1]),))

elif cmd == 'deleteEventsRule':
    if len(args) != 2:
        print('deleteEventsRule requires 2 args')
        sys.exit(1)
    pp.pprint(client.deleteEventsRule(eval(args[0]), args[1],))

elif cmd == 'getTripsInfo':
    if len(args) != 2:
        print('getTripsInfo requires 2 args')
        sys.exit(1)
    pp.pprint(client.getTripsInfo(eval(args[0]), eval(args[1]),))

elif cmd == 'getTripsId':
    if len(args) != 4:
        print('getTripsId requires 4 args')
        sys.exit(1)
    pp.pprint(client.getTripsId(eval(args[0]), args[1], eval(args[2]), eval(args[3]),))

elif cmd == 'getMonitoringObjectsTrips':
    if len(args) != 2:
        print('getMonitoringObjectsTrips requires 2 args')
        sys.exit(1)
    pp.pprint(client.getMonitoringObjectsTrips(eval(args[0]), eval(args[1]),))

elif cmd == 'createTrip':
    if len(args) != 7:
        print('createTrip requires 7 args')
        sys.exit(1)
    pp.pprint(client.createTrip(eval(args[0]), args[1], args[2], eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]),))

elif cmd == 'createTripWithAdditionalFields':
    if len(args) != 8:
        print('createTripWithAdditionalFields requires 8 args')
        sys.exit(1)
    pp.pprint(client.createTripWithAdditionalFields(eval(args[0]), args[1], args[2], eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]), eval(args[7]),))

elif cmd == 'editTrip':
    if len(args) != 2:
        print('editTrip requires 2 args')
        sys.exit(1)
    pp.pprint(client.editTrip(eval(args[0]), eval(args[1]),))

elif cmd == 'deleteTrip':
    if len(args) != 2:
        print('deleteTrip requires 2 args')
        sys.exit(1)
    pp.pprint(client.deleteTrip(eval(args[0]), args[1],))

elif cmd == 'cancelTrip':
    if len(args) != 2:
        print('cancelTrip requires 2 args')
        sys.exit(1)
    pp.pprint(client.cancelTrip(eval(args[0]), args[1],))

elif cmd == 'getTripEvents':
    if len(args) != 4:
        print('getTripEvents requires 4 args')
        sys.exit(1)
    pp.pprint(client.getTripEvents(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'getClippedTripTracks':
    if len(args) != 4:
        print('getClippedTripTracks requires 4 args')
        sys.exit(1)
    pp.pprint(client.getClippedTripTracks(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'getStoreScheme':
    if len(args) != 2:
        print('getStoreScheme requires 2 args')
        sys.exit(1)
    pp.pprint(client.getStoreScheme(eval(args[0]), args[1],))

elif cmd == 'getAdditionalFieldsScheme':
    if len(args) != 3:
        print('getAdditionalFieldsScheme requires 3 args')
        sys.exit(1)
    pp.pprint(client.getAdditionalFieldsScheme(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'createStoreScheme':
    if len(args) != 5:
        print('createStoreScheme requires 5 args')
        sys.exit(1)
    pp.pprint(client.createStoreScheme(eval(args[0]), args[1], args[2], eval(args[3]), args[4],))

elif cmd == 'deleteStoreScheme':
    if len(args) != 2:
        print('deleteStoreScheme requires 2 args')
        sys.exit(1)
    pp.pprint(client.deleteStoreScheme(eval(args[0]), args[1],))

elif cmd == 'editStoreScheme':
    if len(args) != 2:
        print('editStoreScheme requires 2 args')
        sys.exit(1)
    pp.pprint(client.editStoreScheme(eval(args[0]), eval(args[1]),))

elif cmd == 'getCountries':
    if len(args) != 2:
        print('getCountries requires 2 args')
        sys.exit(1)
    pp.pprint(client.getCountries(eval(args[0]), eval(args[1]),))

elif cmd == 'getCities':
    if len(args) != 3:
        print('getCities requires 3 args')
        sys.exit(1)
    pp.pprint(client.getCities(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'getStreets':
    if len(args) != 3:
        print('getStreets requires 3 args')
        sys.exit(1)
    pp.pprint(client.getStreets(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'getBuildings':
    if len(args) != 3:
        print('getBuildings requires 3 args')
        sys.exit(1)
    pp.pprint(client.getBuildings(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'getPoint':
    if len(args) != 2:
        print('getPoint requires 2 args')
        sys.exit(1)
    pp.pprint(client.getPoint(eval(args[0]), eval(args[1]),))

elif cmd == 'getSensorConfigurations':
    if len(args) != 2:
        print('getSensorConfigurations requires 2 args')
        sys.exit(1)
    pp.pprint(client.getSensorConfigurations(eval(args[0]), args[1],))

elif cmd == 'setSensorConfigurations':
    if len(args) != 3:
        print('setSensorConfigurations requires 3 args')
        sys.exit(1)
    pp.pprint(client.setSensorConfigurations(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'getTrackSensorConfigurations':
    if len(args) != 2:
        print('getTrackSensorConfigurations requires 2 args')
        sys.exit(1)
    pp.pprint(client.getTrackSensorConfigurations(eval(args[0]), args[1],))

elif cmd == 'createSensorConfigurationSet':
    if len(args) != 4:
        print('createSensorConfigurationSet requires 4 args')
        sys.exit(1)
    pp.pprint(client.createSensorConfigurationSet(eval(args[0]), args[1], args[2], eval(args[3]),))

elif cmd == 'getSensorConfigurationSet':
    if len(args) != 2:
        print('getSensorConfigurationSet requires 2 args')
        sys.exit(1)
    pp.pprint(client.getSensorConfigurationSet(eval(args[0]), args[1],))

elif cmd == 'getChildSensorConfigurationSet':
    if len(args) != 3:
        print('getChildSensorConfigurationSet requires 3 args')
        sys.exit(1)
    pp.pprint(client.getChildSensorConfigurationSet(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'editSensorConfigurationSet':
    if len(args) != 2:
        print('editSensorConfigurationSet requires 2 args')
        sys.exit(1)
    pp.pprint(client.editSensorConfigurationSet(eval(args[0]), eval(args[1]),))

elif cmd == 'deleteSensorConfigurationSet':
    if len(args) != 2:
        print('deleteSensorConfigurationSet requires 2 args')
        sys.exit(1)
    pp.pprint(client.deleteSensorConfigurationSet(eval(args[0]), args[1],))

elif cmd == 'getMonitoringObjectChart':
    if len(args) != 4:
        print('getMonitoringObjectChart requires 4 args')
        sys.exit(1)
    pp.pprint(client.getMonitoringObjectChart(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'getMonitoringObjectsTracksRects':
    if len(args) != 2:
        print('getMonitoringObjectsTracksRects requires 2 args')
        sys.exit(1)
    pp.pprint(client.getMonitoringObjectsTracksRects(eval(args[0]), eval(args[1]),))

elif cmd == 'changeVehicleCreationTime':
    if len(args) != 3:
        print('changeVehicleCreationTime requires 3 args')
        sys.exit(1)
    pp.pprint(client.changeVehicleCreationTime(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'getChildrenReports':
    if len(args) != 3:
        print('getChildrenReports requires 3 args')
        sys.exit(1)
    pp.pprint(client.getChildrenReports(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'sendReport':
    if len(args) != 3:
        print('sendReport requires 3 args')
        sys.exit(1)
    pp.pprint(client.sendReport(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'buildScreenReport':
    if len(args) != 2:
        print('buildScreenReport requires 2 args')
        sys.exit(1)
    pp.pprint(client.buildScreenReport(eval(args[0]), eval(args[1]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
