#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def login(self, userLoginName, password, longSession):
        """
        Parameters:
         - userLoginName
         - password
         - longSession
        print('login')
        """
        pass

    def logout(self, session):
        """
        Parameters:
         - session

        """
        pass

    def getUser(self, session, id):
        """
        Parameters:
         - session
         - id

        """
        pass

    def getUserSecurityData(self, session, id):
        """
        Parameters:
         - session
         - id

        """
        pass

    def getUsers(self, session, filter, optionalParams):
        """
        Parameters:
         - session
         - filter
         - optionalParams

        """
        pass

    def getCurrentUser(self, session):
        """
        Parameters:
         - session

        """
        pass

    def getChildrenUsers(self, session, parentGroupId, recursive):
        """
        Parameters:
         - session
         - parentGroupId
         - recursive

        """
        pass

    def createUser(self, session, parentGroupId, login, password, roleId, groupLink, welcomeName, email, phone):
        """
        Parameters:
         - session
         - parentGroupId
         - login
         - password
         - roleId
         - groupLink
         - welcomeName
         - email
         - phone

        """
        pass

    def createUserSecure(self, session, parentGroupId, login, passwordHash, passwordSalt, roleId, groupLink, welcomeName, email, phone):
        """
        Parameters:
         - session
         - parentGroupId
         - login
         - passwordHash
         - passwordSalt
         - roleId
         - groupLink
         - welcomeName
         - email
         - phone

        """
        pass

    def editUser(self, session, data):
        """
        Parameters:
         - session
         - data

        """
        pass

    def deleteUser(self, session, id):
        """
        Parameters:
         - session
         - id

        """
        pass

    def changePassword(self, session, oldPassword, newPassword):
        """
        Parameters:
         - session
         - oldPassword
         - newPassword

        """
        pass

    def setPassword(self, session, userId, newPassword):
        """
        Parameters:
         - session
         - userId
         - newPassword

        """
        pass

    def setPasswordSecure(self, session, userId, newPasswordHash, newPasswordSalt):
        """
        Parameters:
         - session
         - userId
         - newPasswordHash
         - newPasswordSalt

        """
        pass

    def getRole(self, session, id):
        """
        Parameters:
         - session
         - id

        """
        pass

    def getUserRole(self, session, userId):
        """
        Parameters:
         - session
         - userId

        """
        pass

    def getGroupRoles(self, session, parentGroupId, recursive):
        """
        Parameters:
         - session
         - parentGroupId
         - recursive

        """
        pass

    def getGroup(self, session, id):
        """
        Parameters:
         - session
         - id

        """
        pass

    def getChildrenGroups(self, session, parentGroupId, recursive):
        """
        Parameters:
         - session
         - parentGroupId
         - recursive

        """
        pass

    def getRootGroups(self, session):
        """
        Parameters:
         - session

        """
        pass

    def createGroup(self, session, parentGroupId, title):
        """
        Parameters:
         - session
         - parentGroupId
         - title

        """
        pass

    def createCompany(self, session, parentGroupId, title, license):
        """
        Parameters:
         - session
         - parentGroupId
         - title
         - license

        """
        pass

    def createCompanyWithAdditionalFields(self, session, parentGroupId, title, license, additionalFields):
        """
        Parameters:
         - session
         - parentGroupId
         - title
         - license
         - additionalFields

        """
        pass

    def editGroup(self, session, data):
        """
        Parameters:
         - session
         - data

        """
        pass

    def deleteGroup(self, session, id, cascade):
        """
        Parameters:
         - session
         - id
         - cascade

        """
        pass

    def getMonitoringObject(self, session, id):
        """
        Parameters:
         - session
         - id

        """
        pass

    def getChildrenMonitoringObjects(self, session, parentGroupId, recursive):
        """
        Parameters:
         - session
         - parentGroupId
         - recursive

        """
        pass

    def getMonitoringObjectsPortion(self, session, filter, offset, limit):
        """
        Parameters:
         - session
         - filter
         - offset
         - limit

        """
        pass

    def getMonitoringObjects(self, session, filter, filterType):
        """
        Parameters:
         - session
         - filter
         - filterType

        """
        pass

    def createMonitoringObject(self, session, parentGroupId, tracker, name, displayColor, displayIcon):
        """
        Parameters:
         - session
         - parentGroupId
         - tracker
         - name
         - displayColor
         - displayIcon

        """
        pass

    def createMonitoringObjectWithAdditionalFields(self, session, parentGroupId, tracker, name, displayColor, displayIcon, additionalFields):
        """
        Parameters:
         - session
         - parentGroupId
         - tracker
         - name
         - displayColor
         - displayIcon
         - additionalFields

        """
        pass

    def createMonitoringObjectByObjectDescription(self, session, data):
        """
        Parameters:
         - session
         - data

        """
        pass

    def editMonitoringObject(self, session, data):
        """
        Parameters:
         - session
         - data

        """
        pass

    def deleteMonitoringObject(self, session, id):
        """
        Parameters:
         - session
         - id

        """
        pass

    def getMonitoringObjectEvents(self, session, monitoringObjectIdList, startDate, endDate):
        """
        Parameters:
         - session
         - monitoringObjectIdList
         - startDate
         - endDate

        """
        pass

    def getMonitoringObjectEventsSince(self, session, monitoringObjectIdList, startDate, startMonotonicIndex, limit):
        """
        Parameters:
         - session
         - monitoringObjectIdList
         - startDate
         - startMonotonicIndex
         - limit

        """
        pass

    def getMonitoringObjectIcons(self, session, filter):
        """
        Возвращает список иконок объектов мониторинга, удовлетворяющих фильтру

        @param session - сессия пользователя
        @param filter - фильтр иконок

        Parameters:
         - session
         - filter

        """
        pass

    def reportRoadAccident(self, session, monitoringObjectId, eventParams):
        """
        Parameters:
         - session
         - monitoringObjectId
         - eventParams

        """
        pass

    def getMonitoringObjectCommands(self, session, monitoringObjectId):
        """
        Parameters:
         - session
         - monitoringObjectId

        """
        pass

    def executeCommand(self, session, commandId):
        """
        Parameters:
         - session
         - commandId

        """
        pass

    def getCommandsStatus(self, session, monitoringObjectId):
        """
        Parameters:
         - session
         - monitoringObjectId

        """
        pass

    def startRelayingVehicles(self, session, requests, columns, messageLimit):
        """
        Parameters:
         - session
         - requests
         - columns
         - messageLimit

        """
        pass

    def getRelayingTracks(self, relayingSession):
        """
        Parameters:
         - relayingSession

        """
        pass

    def getRelayingTracksEx(self, request):
        """
        Parameters:
         - request

        """
        pass

    def getMonitoringObjectsTracks(self, session, requests, columns, messageLimit):
        """
        Parameters:
         - session
         - requests
         - columns
         - messageLimit

        """
        pass

    def getClippedMonitoringObjectTracks(self, session, request, columns, viewport, useAdditionalTrackSplitting):
        """
        Parameters:
         - session
         - request
         - columns
         - viewport
         - useAdditionalTrackSplitting

        """
        pass

    def getMonitoringObjectTrackGroupedDetails(self, session, request):
        """
        Возвращает краткую сгруппированную историю движения объекта мониторинга

        Parameters:
         - session
         - request

        """
        pass

    def getRecentPositions(self, session, vehicleUuids, columns):
        """
        Parameters:
         - session
         - vehicleUuids
         - columns

        """
        pass

    def getRecentPositionsWithAllColumns(self, session, vehicleUuids):
        """
        Parameters:
         - session
         - vehicleUuids

        """
        pass

    def enableVehicle(self, session, vehicleId, enable):
        """
        Parameters:
         - session
         - vehicleId
         - enable

        """
        pass

    def setTrackerStatus(self, session, monitoringObjectId, status):
        """
        Parameters:
         - session
         - monitoringObjectId
         - status

        """
        pass

    def getTrackerStatusHistory(self, session, monitoringObjectId):
        """
        Parameters:
         - session
         - monitoringObjectId

        """
        pass

    def getTrackersCertificate(self, session, monitoringObjectIds):
        """
        Parameters:
         - session
         - monitoringObjectIds

        """
        pass

    def setTrackerCertificate(self, session, certificate):
        """
        Parameters:
         - session
         - certificate

        """
        pass

    def removeTrackersCertificate(self, session, monitoringObjectIds):
        """
        Parameters:
         - session
         - monitoringObjectIds

        """
        pass

    def isVehicleEnabled(self, session, vehicleId):
        """
        Parameters:
         - session
         - vehicleId

        """
        pass

    def getRecentPositionsWithValidGPS(self, session, vehicleUuids, columns):
        """
        Parameters:
         - session
         - vehicleUuids
         - columns

        """
        pass

    def reportBrokenTracker(self, session, request):
        """
        Parameters:
         - session
         - request

        """
        pass

    def getGeopointsAddresses(self, session, points):
        """
        Parameters:
         - session
         - points

        """
        pass

    def getCompanyStatistics(self, session, startDate, endDate, companyUUIDs):
        """
        Billing service.
        Subset of companyUUIDs available to the user in no particular order.

        Parameters:
         - session: user session
         - startDate: дата и время начала периода аггрегации статистики по компании в формате ISO-8601 (inclusive)
         - endDate: дата и время периода конца аггрегации (non-inclusive)
         - companyUUIDs: список UUID компаний

        """
        pass

    def getRelay(self, session, id):
        """
        returns relay info by its id

        @param session - user session
        @param id - relay id, not empty, uuid


        Parameters:
         - session
         - id

        """
        pass

    def getChildRelays(self, session, parentGroupId, recursive):
        """
        returns relays for parent group

        @param session - user session
        @param parentGroupId - parent group id, not empty, uuid
        @param recursive - return all relays from subgroups


        Parameters:
         - session
         - parentGroupId
         - recursive

        """
        pass

    def createRelay(self, session, title, parentGroupId, protocol, enabled, monitoringObjectsIds, host, optionalParams):
        """
        creates relay and returns it's info

        @param session - user session, uuid
        @param title - relay title, not empty
        @param parentGroupId - parent group id, not empty, uuid
        @param protocol - not empty, one of "egts", "granit06", "kurs", "magicsystems", "olympstroy", "scoutopen", "transnavi", "wialonIPS", "can_way", "sodch", "yandex"
        @param enabled
        @param monitoringObjectsIds - list of monitoring object id, not empty, uuid list
        @param host - relay host, not empty


        Parameters:
         - session
         - title
         - parentGroupId
         - protocol
         - enabled
         - monitoringObjectsIds
         - host
         - optionalParams

        """
        pass

    def editRelay(self, session, relay):
        """
        edits existing relay

        @param session - user session, uuid
        @param relay - relay with modified params


        Parameters:
         - session
         - relay

        """
        pass

    def deleteRelay(self, session, id):
        """
        deletes existing relay

        @param session - user session, uuid
        @param id - relay id, not empty, uuid


        Parameters:
         - session
         - id

        """
        pass

    def getGeofence(self, session, id):
        """
        returns geofence info by its id

        @param session - user session
        @param id - geofence id, not empty, uuid


        Parameters:
         - session
         - id

        """
        pass

    def getChildGeofences(self, session, parentGroupId, recursive):
        """
        returns list of geofences for parent group

        @param session - user session
        @param parentGroupId - parent group id, not empty, uuid
        @param recursive - return all geofences from subgroups


        Parameters:
         - session
         - parentGroupId
         - recursive

        """
        pass

    def getGeofenceGeometryWKT(self, session, id):
        """
        returns geofence geometry by its id

        @param session - user session
        @param id - geofence id, not empty, uuid


        Parameters:
         - session
         - id

        """
        pass

    def createGeofence(self, session, parentGroupId, title, color, geometryWKT):
        """
        creates geofence and returns it's info

        @param session - user session, uuid
        @param parentGroupId - parent group id, not empty, uuid
        @param title - geofence title, not empty
        @param color - geofence color
        @param geometryWKT - geofence geometry in WKT format


        Parameters:
         - session
         - parentGroupId
         - title
         - color
         - geometryWKT

        """
        pass

    def editGeofence(self, session, geofence):
        """
        edits existing geofence

        @param session - user session, uuid
        @param geofence - geofence with modified params


        Parameters:
         - session
         - geofence

        """
        pass

    def editGeofenceGeometryWKT(self, session, id, geometryWKT):
        """
        edits existing geofence geometry

        @param session - user session, uuid
        @param id - geofence id, not empty, uuid
        @param geometryWKT - updated geometry for specified geofence


        Parameters:
         - session
         - id
         - geometryWKT

        """
        pass

    def deleteGeofence(self, session, id):
        """
        deletes existing geofence

        @param session - user session, uuid
        @param id - geofence id, not empty, uuid


        Parameters:
         - session
         - id

        """
        pass

    def getPlace(self, session, id):
        """
        @return place info by its id

        @param session - user session
        @param id - place id, not empty, uuid


        Parameters:
         - session
         - id

        """
        pass

    def getChildPlaces(self, session, parentGroupId, recursive):
        """
        @return places of parent group

        @param session - user session
        @param parentGroupId - parent group id, not empty, uuid
        @param recursive - return all places on map from subgroups


        Parameters:
         - session
         - parentGroupId
         - recursive

        """
        pass

    def createPlace(self, session, parentGroupId, title, position):
        """
        creates place and returns it's info

        @param session - user session, uuid
        @param parentGroupId - parent group id, not empty, uuid
        @param title - place title, not empty
        @param longitude - place longitude
        @param latitude - place latitude


        Parameters:
         - session
         - parentGroupId
         - title
         - position

        """
        pass

    def editPlace(self, session, place):
        """
        edits existing place

        @param session - user session, uuid
        @param place - place with modified params


        Parameters:
         - session
         - place

        """
        pass

    def deletePlace(self, session, id):
        """
        deletes existing place

        @param session - user session, uuid
        @param id - place id, not empty, uuid


        Parameters:
         - session
         - id

        """
        pass

    def getRoute(self, session, routeId):
        """
        @return route info

        @param session - user session
        @param routeId - route id, not empty, uuid


        Parameters:
         - session
         - routeId

        """
        pass

    def getChildRoutes(self, session, parentGroupId, recursive):
        """
        @return group child routes

        @param session - user session
        @param parentGroupId - parent group id, not empty, uuid
        @param recursive - return all routes from subgroups


        Parameters:
         - session
         - parentGroupId
         - recursive

        """
        pass

    def getRouteLines(self, session, routeId, viewport):
        """
        @return points of route line

        @param session - user session
        @param routeId - route id, not empty, uuid


        Parameters:
         - session
         - routeId
         - viewport

        """
        pass

    def createRoute(self, session, parentGroupId, title, color, coridorWidth, routeControlMethod, vehicleRoutingType, routeStageSets):
        """
        creates route and returns its info

        @param session - user session, uuid
        @param parentGroupId - parent group id, uuid
        @param title - route title, not empty
        @param color - route line color, not empty, free format
        @param coridorWidth
        @param routeControlMethod
        @param vehicleRoutingType
        @param routeStages


        Parameters:
         - session
         - parentGroupId
         - title: not empty
         - color: not empty, free format
         - coridorWidth
         - routeControlMethod
         - vehicleRoutingType
         - routeStageSets

        """
        pass

    def editRoute(self, session, route):
        """
        edits route and returns its updated info

        @param session - user session, uuid
        @param route - route with modified params


        Parameters:
         - session
         - route

        """
        pass

    def deleteRoute(self, session, id):
        """
        deletes route

        @param session - user session
        @param id - route id, not empty

        Parameters:
         - session
         - id

        """
        pass

    def calculateRouteGeometry(self, session, stages, routingType, viewport):
        """
        calculatess route geometry

        @param session - user session, uuid
        @param stages


        Parameters:
         - session
         - stages
         - routingType
         - viewport

        """
        pass

    def getEventsRule(self, session, id):
        """
        @return events generating rule by its id
        @param session - user session
        @param id - events generating rule uuid, not empty

        Parameters:
         - session
         - id

        """
        pass

    def getChildEventsRules(self, session, parentGroupId, recursive):
        """
        @return events generating rules in group
        @param session - user session
        @param parentGroupId - parent group uuid, not empty
        @param recursive - also return rules from subgroups

        Parameters:
         - session
         - parentGroupId
         - recursive

        """
        pass

    def createEventsRule(self, session, parentGroupId, title, monitoringObjectIds, eventsConditions, eventsConditionsAreDisjunctive, generatedEventType, actionsCondition, actions):
        """
        @return new events generating rule
        @param session - user session
        @param parentGroupId - parent group uuid, not empty
        @param title - name of the rule, not empty
        @param monitoringObjectIds - monitoring objects uuids, not empty
        @param eventsConditions - condition(s) to make rule's events generated
        @param eventsConditionsAreDisjunctive - false means conjunctive conditions
        @param generatedEventType - type of event to be generated
        @param actionsCondition - additional condition (when events generated) to make rule's actions applied
        @param actions - actions to execute when events generating rule applied

        Parameters:
         - session
         - parentGroupId
         - title
         - monitoringObjectIds
         - eventsConditions
         - eventsConditionsAreDisjunctive
         - generatedEventType
         - actionsCondition
         - actions

        """
        pass

    def editEventsRule(self, session, modifiedRule):
        """
        @param session - user session
        @param modifiedRule - rule to change existing one, identified by uuid

        Parameters:
         - session
         - modifiedRule

        """
        pass

    def deleteEventsRule(self, session, id):
        """
        @param session - user session
        @param id - events generating rule uuid, not empty

        Parameters:
         - session
         - id

        """
        pass

    def getTripsInfo(self, session, tripsId):
        """
        @return trip info by its id

        @param session - user session
        @param id - trip id, not empty, uuid


        Parameters:
         - session
         - tripsId

        """
        pass

    def getTripsId(self, session, parentGroupId, allowableStatuses, recursive):
        """
        @return trips of parent group

        @param session - user session
        @param parentGroupId - parent group id, not empty, uuid
        @param allowableStatuses- return trips whoes status is one of listed, empty if no filtering
        @param recursive - return all trips from subgroups


        Parameters:
         - session
         - parentGroupId
         - allowableStatuses
         - recursive

        """
        pass

    def getMonitoringObjectsTrips(self, session, monitoringObjectsId):
        """
        @return trips for monitoring objects

        @param session - user session
        @param monitoringObjectsId - monitoringObjects uuid list


        Parameters:
         - session
         - monitoringObjectsId

        """
        pass

    def createTrip(self, session, vehicleId, routeId, tripStageSets, startTripUnixTime, abortTripUnixTime, notificationParams):
        """
        creates trip and returns it's info

        @param session - user session, uuid
        @param vehicleId - vehicle uuid
        @param routeId - route uuid
        @param tripStageSets - trip stages uuids for each trip variant


        Parameters:
         - session
         - vehicleId
         - routeId
         - tripStageSets
         - startTripUnixTime
         - abortTripUnixTime
         - notificationParams

        """
        pass

    def createTripWithAdditionalFields(self, session, vehicleId, routeId, tripStageSets, startTripUnixTime, abortTripUnixTime, notificationParams, additionalFields):
        """
        creates trip and returns it's info

        @param session - user session, uuid
        @param trip - trip to create
        @param additionalFields - additional fields


        Parameters:
         - session
         - vehicleId
         - routeId
         - tripStageSets
         - startTripUnixTime
         - abortTripUnixTime
         - notificationParams
         - additionalFields

        """
        pass

    def editTrip(self, session, trip):
        """
        edits existing trip

        @param session - user session, uuid
        @param trip - trip with modified params


        Parameters:
         - session
         - trip

        """
        pass

    def deleteTrip(self, session, id):
        """
        deletes existing trip

        @param session - user session, uuid
        @param id - trip id, not empty, uuid


        Parameters:
         - session
         - id

        """
        pass

    def cancelTrip(self, session, id):
        """
        cancels existing not finished trip

        @param session - user session, uuid
        @param id - trip id, not empty, uuid


        Parameters:
         - session
         - id

        """
        pass

    def getTripEvents(self, session, tripIds, eventTypes, globalMonotonicIndex):
        """
        @return events for selected trips and event types
        @param session - user session
        @param tripIds - selected trip ids
        @param eventTypes - selected event types, must be trip event types
        @param globalMonotonicIndex - skip events with index less than this value. Ignored if 0.

        Parameters:
         - session
         - tripIds
         - eventTypes
         - globalMonotonicIndex

        """
        pass

    def getClippedTripTracks(self, session, request, columns, viewport):
        """

        Return tracks of vehicles on specified trip sorted ascending by captured_timestamp.

        @param request - trip id and captured_timestamp range
        Note: timestamps has closed border.
        @param columns - selected columns


        Parameters:
         - session
         - request
         - columns
         - viewport

        """
        pass

    def getStoreScheme(self, session, schemeId):
        """
        @return store scheme info

        @param session - user session
        @param schemeId - scheme id, not empty, uuid


        Parameters:
         - session
         - schemeId

        """
        pass

    def getAdditionalFieldsScheme(self, session, parentGroupId, extensionForType):
        """
        get scheme for additional fields with group id and extended object type

        @param session - user session
        @param parentGroupId - parent group id, uuid, not empty
        @param extensionForType - extended object type, not empty

        Parameters:
         - session
         - parentGroupId
         - extensionForType

        """
        pass

    def createStoreScheme(self, session, parentGroupId, name, fields, description):
        """
        creates store scheme and returns its info

        @param session - user session, uuid
        @param parentGroupId - parent group id, uuid, not empty
        @param name - scheme name, not empty
        @param fields - list of scheme fields, not empty, field id will be ignored
        @param description - scheme description


        Parameters:
         - session
         - parentGroupId
         - name
         - fields
         - description

        """
        pass

    def deleteStoreScheme(self, session, id):
        """
        delete store scheme

        @param session - user session, uuid
        @param id - scheme id, uuid not empty


        Parameters:
         - session
         - id

        """
        pass

    def editStoreScheme(self, session, scheme):
        """
        edit store scheme

        @param session - user session, uuid
        @param scheme - edited scheme with changes


        Parameters:
         - session
         - scheme

        """
        pass

    def getCountries(self, session, filter):
        """
        @return countries available in map service filtered by filter
        @param session - user session
        @param filter - search filter

        Parameters:
         - session
         - filter

        """
        pass

    def getCities(self, session, context, filter):
        """
        @return cities available in map service filtered by filter
        @param session - user session
        @context - context returned by getCountries call
        @param filter - search filter

        Parameters:
         - session
         - context
         - filter

        """
        pass

    def getStreets(self, session, context, filter):
        """
        @return streets available in map service filtered by filter
        @param session - user session
        @context - context returned by getCities call
        @param filter - search filter

        Parameters:
         - session
         - context
         - filter

        """
        pass

    def getBuildings(self, session, context, filter):
        """
        @return buildings available in map service filtered by filter
        @param session - user session
        @context - context returned by getStreets call
        @param filter - search filter

        Parameters:
         - session
         - context
         - filter

        """
        pass

    def getPoint(self, session, context):
        """
        @return coordinates of object found by address search
        @param session - user session
        @context - context returned by getCountries/Cities/Streets/Buildings calls

        Parameters:
         - session
         - context

        """
        pass

    def getSensorConfigurations(self, session, monitoringObjectId):
        """
        @return existing sensor configurations of monitoring object

        @param session - user session
        @param monitoringObjectId - monitoring object id, not empty, uuid


        Parameters:
         - session
         - monitoringObjectId

        """
        pass

    def setSensorConfigurations(self, session, monitoringObjectId, sensorConfigurations):
        """
        Edits monitoring object sensor configurations.
        Fails on invalid expression in one of configuration, duplicate sensor configurations, ...

        @param session - user session, uuid
        @param monitoringObjectId - id of a monitoring object, uuid
        @param sensors - edited sensor configuration list


        Parameters:
         - session
         - monitoringObjectId
         - sensorConfigurations

        """
        pass

    def getTrackSensorConfigurations(self, session, monitoringObjectId):
        """
        Parameters:
         - session
         - monitoringObjectId

        """
        pass

    def createSensorConfigurationSet(self, session, parentGroupId, name, sensorConfigurations):
        """
        creates sensor configuration set and returns it's

        @param session - user session, uuid
        @param parentGroupId - parent group id, not empty, uuid
        @param name - set name, not empty
        @param list<SensorConfiguration> - list of sensor configurations


        Parameters:
         - session
         - parentGroupId
         - name
         - sensorConfigurations

        """
        pass

    def getSensorConfigurationSet(self, session, id):
        """
        returns sensor configuration set by its id

        @param session - user session
        @param id - set id, not empty, uuid


        Parameters:
         - session
         - id

        """
        pass

    def getChildSensorConfigurationSet(self, session, parentGroupId, recursive):
        """
        returns list of sensor configuration sets for parent group

        @param session - user session
        @param parentGroupId - parent group id, not empty, uuid
        @param recursive - return all sets from subgroups


        Parameters:
         - session
         - parentGroupId
         - recursive

        """
        pass

    def editSensorConfigurationSet(self, session, sensorConfigurationSet):
        """
        edits existing sensor configuration set

        @param session - user session, uuid
        @param sensorConfigurationSet - set with modified params


        Parameters:
         - session
         - sensorConfigurationSet

        """
        pass

    def deleteSensorConfigurationSet(self, session, id):
        """
        deletes existing sensor configuration set

        @param session - user session, uuid
        @param id - set id, not empty, uuid


        Parameters:
         - session
         - id

        """
        pass

    def getMonitoringObjectChart(self, session, request, columns, lod):
        """
        Parameters:
         - session
         - request
         - columns
         - lod

        """
        pass

    def getMonitoringObjectsTracksRects(self, session, requests):
        """
        Parameters:
         - session
         - requests

        """
        pass

    def changeVehicleCreationTime(self, session, vehicleId, timestamp):
        """
        change first vehicle's tracker from_timestamp to given value

        @param session - user session, uuid
        @param vehicleId - vehicle id
        @param timestamp - new time


        Parameters:
         - session
         - vehicleId
         - timestamp

        """
        pass

    def getChildrenReports(self, session, parentGroupId, recursive):
        """
        Parameters:
         - session
         - parentGroupId
         - recursive

        """
        pass

    def sendReport(self, session, email, parameters):
        """
        Parameters:
         - session
         - email
         - parameters

        """
        pass

    def buildScreenReport(self, session, parameters):
        """
        Parameters:
         - session
         - parameters

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def login(self, userLoginName, password, longSession):
        """
        Parameters:
         - userLoginName
         - password
         - longSession

        """
        self.send_login(userLoginName, password, longSession)
        return self.recv_login()

    def send_login(self, userLoginName, password, longSession):
        self._oprot.writeMessageBegin('login', TMessageType.CALL, self._seqid)
        args = login_args()
        args.userLoginName = userLoginName
        args.password = password
        args.longSession = longSession
        try:
            args.write(self._oprot)
        except TException as e:    
            print('%s' % (e.message))    
        self._oprot.writeMessageEnd()
        try:
            self._oprot.trans.flush()
        except TException as e:    
            print('%s' % (e.message))


    def recv_login(self):
        try:
            iprot = self._iprot
        except TException as e:    
            print('%s' % (e.message))
        try:
            (fname, mtype, rseqid) = iprot.readMessageBegin()
        except TException as e:    
            print('recv_lodin %s' % (e.message))    
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = login_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ade is not None:
            raise result.ade
        if result.ule is not None:
            raise result.ule
        if result.tne is not None:
            raise result.tne
        if result.lfe is not None:
            raise result.lfe
        raise TApplicationException(TApplicationException.MISSING_RESULT, "login failed: unknown result")

    def logout(self, session):
        """
        Parameters:
         - session

        """
        self.send_logout(session)
        self.recv_logout()

    def send_logout(self, session):
        self._oprot.writeMessageBegin('logout', TMessageType.CALL, self._seqid)
        args = logout_args()
        args.session = session
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_logout(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = logout_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        return

    def getUser(self, session, id):
        """
        Parameters:
         - session
         - id

        """
        self.send_getUser(session, id)
        return self.recv_getUser()

    def send_getUser(self, session, id):
        self._oprot.writeMessageBegin('getUser', TMessageType.CALL, self._seqid)
        args = getUser_args()
        args.session = session
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getUser(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getUser_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getUser failed: unknown result")

    def getUserSecurityData(self, session, id):
        """
        Parameters:
         - session
         - id

        """
        self.send_getUserSecurityData(session, id)
        return self.recv_getUserSecurityData()

    def send_getUserSecurityData(self, session, id):
        self._oprot.writeMessageBegin('getUserSecurityData', TMessageType.CALL, self._seqid)
        args = getUserSecurityData_args()
        args.session = session
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getUserSecurityData(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getUserSecurityData_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getUserSecurityData failed: unknown result")

    def getUsers(self, session, filter, optionalParams):
        """
        Parameters:
         - session
         - filter
         - optionalParams

        """
        self.send_getUsers(session, filter, optionalParams)
        return self.recv_getUsers()

    def send_getUsers(self, session, filter, optionalParams):
        self._oprot.writeMessageBegin('getUsers', TMessageType.CALL, self._seqid)
        args = getUsers_args()
        args.session = session
        args.filter = filter
        args.optionalParams = optionalParams
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getUsers(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getUsers_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getUsers failed: unknown result")

    def getCurrentUser(self, session):
        """
        Parameters:
         - session

        """
        self.send_getCurrentUser(session)
        return self.recv_getCurrentUser()

    def send_getCurrentUser(self, session):
        self._oprot.writeMessageBegin('getCurrentUser', TMessageType.CALL, self._seqid)
        args = getCurrentUser_args()
        args.session = session
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getCurrentUser(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getCurrentUser_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getCurrentUser failed: unknown result")

    def getChildrenUsers(self, session, parentGroupId, recursive):
        """
        Parameters:
         - session
         - parentGroupId
         - recursive

        """
        self.send_getChildrenUsers(session, parentGroupId, recursive)
        return self.recv_getChildrenUsers()

    def send_getChildrenUsers(self, session, parentGroupId, recursive):
        self._oprot.writeMessageBegin('getChildrenUsers', TMessageType.CALL, self._seqid)
        args = getChildrenUsers_args()
        args.session = session
        args.parentGroupId = parentGroupId
        args.recursive = recursive
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getChildrenUsers(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getChildrenUsers_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getChildrenUsers failed: unknown result")

    def createUser(self, session, parentGroupId, login, password, roleId, groupLink, welcomeName, email, phone):
        """
        Parameters:
         - session
         - parentGroupId
         - login
         - password
         - roleId
         - groupLink
         - welcomeName
         - email
         - phone

        """
        self.send_createUser(session, parentGroupId, login, password, roleId, groupLink, welcomeName, email, phone)
        return self.recv_createUser()

    def send_createUser(self, session, parentGroupId, login, password, roleId, groupLink, welcomeName, email, phone):
        self._oprot.writeMessageBegin('createUser', TMessageType.CALL, self._seqid)
        args = createUser_args()
        args.session = session
        args.parentGroupId = parentGroupId
        args.login = login
        args.password = password
        args.roleId = roleId
        args.groupLink = groupLink
        args.welcomeName = welcomeName
        args.email = email
        args.phone = phone
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createUser(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createUser_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        if result.le is not None:
            raise result.le
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createUser failed: unknown result")

    def createUserSecure(self, session, parentGroupId, login, passwordHash, passwordSalt, roleId, groupLink, welcomeName, email, phone):
        """
        Parameters:
         - session
         - parentGroupId
         - login
         - passwordHash
         - passwordSalt
         - roleId
         - groupLink
         - welcomeName
         - email
         - phone

        """
        self.send_createUserSecure(session, parentGroupId, login, passwordHash, passwordSalt, roleId, groupLink, welcomeName, email, phone)
        return self.recv_createUserSecure()

    def send_createUserSecure(self, session, parentGroupId, login, passwordHash, passwordSalt, roleId, groupLink, welcomeName, email, phone):
        self._oprot.writeMessageBegin('createUserSecure', TMessageType.CALL, self._seqid)
        args = createUserSecure_args()
        args.session = session
        args.parentGroupId = parentGroupId
        args.login = login
        args.passwordHash = passwordHash
        args.passwordSalt = passwordSalt
        args.roleId = roleId
        args.groupLink = groupLink
        args.welcomeName = welcomeName
        args.email = email
        args.phone = phone
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createUserSecure(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createUserSecure_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        if result.le is not None:
            raise result.le
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createUserSecure failed: unknown result")

    def editUser(self, session, data):
        """
        Parameters:
         - session
         - data

        """
        self.send_editUser(session, data)
        self.recv_editUser()

    def send_editUser(self, session, data):
        self._oprot.writeMessageBegin('editUser', TMessageType.CALL, self._seqid)
        args = editUser_args()
        args.session = session
        args.data = data
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_editUser(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = editUser_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        if result.lae is not None:
            raise result.lae
        return

    def deleteUser(self, session, id):
        """
        Parameters:
         - session
         - id

        """
        self.send_deleteUser(session, id)
        self.recv_deleteUser()

    def send_deleteUser(self, session, id):
        self._oprot.writeMessageBegin('deleteUser', TMessageType.CALL, self._seqid)
        args = deleteUser_args()
        args.session = session
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_deleteUser(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = deleteUser_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ad is not None:
            raise result.ad
        if result.one is not None:
            raise result.one
        return

    def changePassword(self, session, oldPassword, newPassword):
        """
        Parameters:
         - session
         - oldPassword
         - newPassword

        """
        self.send_changePassword(session, oldPassword, newPassword)
        self.recv_changePassword()

    def send_changePassword(self, session, oldPassword, newPassword):
        self._oprot.writeMessageBegin('changePassword', TMessageType.CALL, self._seqid)
        args = changePassword_args()
        args.session = session
        args.oldPassword = oldPassword
        args.newPassword = newPassword
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_changePassword(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = changePassword_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.one is not None:
            raise result.one
        return

    def setPassword(self, session, userId, newPassword):
        """
        Parameters:
         - session
         - userId
         - newPassword

        """
        self.send_setPassword(session, userId, newPassword)
        self.recv_setPassword()

    def send_setPassword(self, session, userId, newPassword):
        self._oprot.writeMessageBegin('setPassword', TMessageType.CALL, self._seqid)
        args = setPassword_args()
        args.session = session
        args.userId = userId
        args.newPassword = newPassword
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_setPassword(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = setPassword_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        return

    def setPasswordSecure(self, session, userId, newPasswordHash, newPasswordSalt):
        """
        Parameters:
         - session
         - userId
         - newPasswordHash
         - newPasswordSalt

        """
        self.send_setPasswordSecure(session, userId, newPasswordHash, newPasswordSalt)
        self.recv_setPasswordSecure()

    def send_setPasswordSecure(self, session, userId, newPasswordHash, newPasswordSalt):
        self._oprot.writeMessageBegin('setPasswordSecure', TMessageType.CALL, self._seqid)
        args = setPasswordSecure_args()
        args.session = session
        args.userId = userId
        args.newPasswordHash = newPasswordHash
        args.newPasswordSalt = newPasswordSalt
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_setPasswordSecure(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = setPasswordSecure_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        return

    def getRole(self, session, id):
        """
        Parameters:
         - session
         - id

        """
        self.send_getRole(session, id)
        return self.recv_getRole()

    def send_getRole(self, session, id):
        self._oprot.writeMessageBegin('getRole', TMessageType.CALL, self._seqid)
        args = getRole_args()
        args.session = session
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getRole(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getRole_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getRole failed: unknown result")

    def getUserRole(self, session, userId):
        """
        Parameters:
         - session
         - userId

        """
        self.send_getUserRole(session, userId)
        return self.recv_getUserRole()

    def send_getUserRole(self, session, userId):
        self._oprot.writeMessageBegin('getUserRole', TMessageType.CALL, self._seqid)
        args = getUserRole_args()
        args.session = session
        args.userId = userId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getUserRole(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getUserRole_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getUserRole failed: unknown result")

    def getGroupRoles(self, session, parentGroupId, recursive):
        """
        Parameters:
         - session
         - parentGroupId
         - recursive

        """
        self.send_getGroupRoles(session, parentGroupId, recursive)
        return self.recv_getGroupRoles()

    def send_getGroupRoles(self, session, parentGroupId, recursive):
        self._oprot.writeMessageBegin('getGroupRoles', TMessageType.CALL, self._seqid)
        args = getGroupRoles_args()
        args.session = session
        args.parentGroupId = parentGroupId
        args.recursive = recursive
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getGroupRoles(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getGroupRoles_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getGroupRoles failed: unknown result")

    def getGroup(self, session, id):
        """
        Parameters:
         - session
         - id

        """
        self.send_getGroup(session, id)
        return self.recv_getGroup()

    def send_getGroup(self, session, id):
        self._oprot.writeMessageBegin('getGroup', TMessageType.CALL, self._seqid)
        args = getGroup_args()
        args.session = session
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getGroup(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getGroup_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ad is not None:
            raise result.ad
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getGroup failed: unknown result")

    def getChildrenGroups(self, session, parentGroupId, recursive):
        """
        Parameters:
         - session
         - parentGroupId
         - recursive

        """
        self.send_getChildrenGroups(session, parentGroupId, recursive)
        return self.recv_getChildrenGroups()

    def send_getChildrenGroups(self, session, parentGroupId, recursive):
        self._oprot.writeMessageBegin('getChildrenGroups', TMessageType.CALL, self._seqid)
        args = getChildrenGroups_args()
        args.session = session
        args.parentGroupId = parentGroupId
        args.recursive = recursive
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getChildrenGroups(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getChildrenGroups_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ad is not None:
            raise result.ad
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getChildrenGroups failed: unknown result")

    def getRootGroups(self, session):
        """
        Parameters:
         - session

        """
        self.send_getRootGroups(session)
        return self.recv_getRootGroups()

    def send_getRootGroups(self, session):
        self._oprot.writeMessageBegin('getRootGroups', TMessageType.CALL, self._seqid)
        args = getRootGroups_args()
        args.session = session
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getRootGroups(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getRootGroups_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ad is not None:
            raise result.ad
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getRootGroups failed: unknown result")

    def createGroup(self, session, parentGroupId, title):
        """
        Parameters:
         - session
         - parentGroupId
         - title

        """
        self.send_createGroup(session, parentGroupId, title)
        return self.recv_createGroup()

    def send_createGroup(self, session, parentGroupId, title):
        self._oprot.writeMessageBegin('createGroup', TMessageType.CALL, self._seqid)
        args = createGroup_args()
        args.session = session
        args.parentGroupId = parentGroupId
        args.title = title
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createGroup(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createGroup_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ad is not None:
            raise result.ad
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createGroup failed: unknown result")

    def createCompany(self, session, parentGroupId, title, license):
        """
        Parameters:
         - session
         - parentGroupId
         - title
         - license

        """
        self.send_createCompany(session, parentGroupId, title, license)
        return self.recv_createCompany()

    def send_createCompany(self, session, parentGroupId, title, license):
        self._oprot.writeMessageBegin('createCompany', TMessageType.CALL, self._seqid)
        args = createCompany_args()
        args.session = session
        args.parentGroupId = parentGroupId
        args.title = title
        args.license = license
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createCompany(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createCompany_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ad is not None:
            raise result.ad
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createCompany failed: unknown result")

    def createCompanyWithAdditionalFields(self, session, parentGroupId, title, license, additionalFields):
        """
        Parameters:
         - session
         - parentGroupId
         - title
         - license
         - additionalFields

        """
        self.send_createCompanyWithAdditionalFields(session, parentGroupId, title, license, additionalFields)
        return self.recv_createCompanyWithAdditionalFields()

    def send_createCompanyWithAdditionalFields(self, session, parentGroupId, title, license, additionalFields):
        self._oprot.writeMessageBegin('createCompanyWithAdditionalFields', TMessageType.CALL, self._seqid)
        args = createCompanyWithAdditionalFields_args()
        args.session = session
        args.parentGroupId = parentGroupId
        args.title = title
        args.license = license
        args.additionalFields = additionalFields
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createCompanyWithAdditionalFields(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createCompanyWithAdditionalFields_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ad is not None:
            raise result.ad
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createCompanyWithAdditionalFields failed: unknown result")

    def editGroup(self, session, data):
        """
        Parameters:
         - session
         - data

        """
        self.send_editGroup(session, data)
        self.recv_editGroup()

    def send_editGroup(self, session, data):
        self._oprot.writeMessageBegin('editGroup', TMessageType.CALL, self._seqid)
        args = editGroup_args()
        args.session = session
        args.data = data
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_editGroup(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = editGroup_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        return

    def deleteGroup(self, session, id, cascade):
        """
        Parameters:
         - session
         - id
         - cascade

        """
        self.send_deleteGroup(session, id, cascade)
        self.recv_deleteGroup()

    def send_deleteGroup(self, session, id, cascade):
        self._oprot.writeMessageBegin('deleteGroup', TMessageType.CALL, self._seqid)
        args = deleteGroup_args()
        args.session = session
        args.id = id
        args.cascade = cascade
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_deleteGroup(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = deleteGroup_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ad is not None:
            raise result.ad
        if result.one is not None:
            raise result.one
        return

    def getMonitoringObject(self, session, id):
        """
        Parameters:
         - session
         - id

        """
        self.send_getMonitoringObject(session, id)
        return self.recv_getMonitoringObject()

    def send_getMonitoringObject(self, session, id):
        self._oprot.writeMessageBegin('getMonitoringObject', TMessageType.CALL, self._seqid)
        args = getMonitoringObject_args()
        args.session = session
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getMonitoringObject(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getMonitoringObject_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ad is not None:
            raise result.ad
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getMonitoringObject failed: unknown result")

    def getChildrenMonitoringObjects(self, session, parentGroupId, recursive):
        """
        Parameters:
         - session
         - parentGroupId
         - recursive

        """
        self.send_getChildrenMonitoringObjects(session, parentGroupId, recursive)
        return self.recv_getChildrenMonitoringObjects()

    def send_getChildrenMonitoringObjects(self, session, parentGroupId, recursive):
        self._oprot.writeMessageBegin('getChildrenMonitoringObjects', TMessageType.CALL, self._seqid)
        args = getChildrenMonitoringObjects_args()
        args.session = session
        args.parentGroupId = parentGroupId
        args.recursive = recursive
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getChildrenMonitoringObjects(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getChildrenMonitoringObjects_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ad is not None:
            raise result.ad
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getChildrenMonitoringObjects failed: unknown result")

    def getMonitoringObjectsPortion(self, session, filter, offset, limit):
        """
        Parameters:
         - session
         - filter
         - offset
         - limit

        """
        self.send_getMonitoringObjectsPortion(session, filter, offset, limit)
        return self.recv_getMonitoringObjectsPortion()

    def send_getMonitoringObjectsPortion(self, session, filter, offset, limit):
        self._oprot.writeMessageBegin('getMonitoringObjectsPortion', TMessageType.CALL, self._seqid)
        args = getMonitoringObjectsPortion_args()
        args.session = session
        args.filter = filter
        args.offset = offset
        args.limit = limit
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getMonitoringObjectsPortion(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getMonitoringObjectsPortion_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.ise is not None:
            raise result.ise
        if result.ad is not None:
            raise result.ad
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getMonitoringObjectsPortion failed: unknown result")

    def getMonitoringObjects(self, session, filter, filterType):
        """
        Parameters:
         - session
         - filter
         - filterType

        """
        self.send_getMonitoringObjects(session, filter, filterType)
        return self.recv_getMonitoringObjects()

    def send_getMonitoringObjects(self, session, filter, filterType):
        self._oprot.writeMessageBegin('getMonitoringObjects', TMessageType.CALL, self._seqid)
        args = getMonitoringObjects_args()
        args.session = session
        args.filter = filter
        args.filterType = filterType
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getMonitoringObjects(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getMonitoringObjects_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.ise is not None:
            raise result.ise
        if result.ad is not None:
            raise result.ad
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getMonitoringObjects failed: unknown result")

    def createMonitoringObject(self, session, parentGroupId, tracker, name, displayColor, displayIcon):
        """
        Parameters:
         - session
         - parentGroupId
         - tracker
         - name
         - displayColor
         - displayIcon

        """
        self.send_createMonitoringObject(session, parentGroupId, tracker, name, displayColor, displayIcon)
        return self.recv_createMonitoringObject()

    def send_createMonitoringObject(self, session, parentGroupId, tracker, name, displayColor, displayIcon):
        self._oprot.writeMessageBegin('createMonitoringObject', TMessageType.CALL, self._seqid)
        args = createMonitoringObject_args()
        args.session = session
        args.parentGroupId = parentGroupId
        args.tracker = tracker
        args.name = name
        args.displayColor = displayColor
        args.displayIcon = displayIcon
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createMonitoringObject(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createMonitoringObject_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ad is not None:
            raise result.ad
        if result.one is not None:
            raise result.one
        if result.tau is not None:
            raise result.tau
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createMonitoringObject failed: unknown result")

    def createMonitoringObjectWithAdditionalFields(self, session, parentGroupId, tracker, name, displayColor, displayIcon, additionalFields):
        """
        Parameters:
         - session
         - parentGroupId
         - tracker
         - name
         - displayColor
         - displayIcon
         - additionalFields

        """
        self.send_createMonitoringObjectWithAdditionalFields(session, parentGroupId, tracker, name, displayColor, displayIcon, additionalFields)
        return self.recv_createMonitoringObjectWithAdditionalFields()

    def send_createMonitoringObjectWithAdditionalFields(self, session, parentGroupId, tracker, name, displayColor, displayIcon, additionalFields):
        self._oprot.writeMessageBegin('createMonitoringObjectWithAdditionalFields', TMessageType.CALL, self._seqid)
        args = createMonitoringObjectWithAdditionalFields_args()
        args.session = session
        args.parentGroupId = parentGroupId
        args.tracker = tracker
        args.name = name
        args.displayColor = displayColor
        args.displayIcon = displayIcon
        args.additionalFields = additionalFields
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createMonitoringObjectWithAdditionalFields(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createMonitoringObjectWithAdditionalFields_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ad is not None:
            raise result.ad
        if result.one is not None:
            raise result.one
        if result.tau is not None:
            raise result.tau
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createMonitoringObjectWithAdditionalFields failed: unknown result")

    def createMonitoringObjectByObjectDescription(self, session, data):
        """
        Parameters:
         - session
         - data

        """
        self.send_createMonitoringObjectByObjectDescription(session, data)
        return self.recv_createMonitoringObjectByObjectDescription()

    def send_createMonitoringObjectByObjectDescription(self, session, data):
        self._oprot.writeMessageBegin('createMonitoringObjectByObjectDescription', TMessageType.CALL, self._seqid)
        args = createMonitoringObjectByObjectDescription_args()
        args.session = session
        args.data = data
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createMonitoringObjectByObjectDescription(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createMonitoringObjectByObjectDescription_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ad is not None:
            raise result.ad
        if result.one is not None:
            raise result.one
        if result.tau is not None:
            raise result.tau
        if result.imbe is not None:
            raise result.imbe
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createMonitoringObjectByObjectDescription failed: unknown result")

    def editMonitoringObject(self, session, data):
        """
        Parameters:
         - session
         - data

        """
        self.send_editMonitoringObject(session, data)
        self.recv_editMonitoringObject()

    def send_editMonitoringObject(self, session, data):
        self._oprot.writeMessageBegin('editMonitoringObject', TMessageType.CALL, self._seqid)
        args = editMonitoringObject_args()
        args.session = session
        args.data = data
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_editMonitoringObject(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = editMonitoringObject_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        if result.tau is not None:
            raise result.tau
        return

    def deleteMonitoringObject(self, session, id):
        """
        Parameters:
         - session
         - id

        """
        self.send_deleteMonitoringObject(session, id)
        self.recv_deleteMonitoringObject()

    def send_deleteMonitoringObject(self, session, id):
        self._oprot.writeMessageBegin('deleteMonitoringObject', TMessageType.CALL, self._seqid)
        args = deleteMonitoringObject_args()
        args.session = session
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_deleteMonitoringObject(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = deleteMonitoringObject_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ad is not None:
            raise result.ad
        if result.one is not None:
            raise result.one
        return

    def getMonitoringObjectEvents(self, session, monitoringObjectIdList, startDate, endDate):
        """
        Parameters:
         - session
         - monitoringObjectIdList
         - startDate
         - endDate

        """
        self.send_getMonitoringObjectEvents(session, monitoringObjectIdList, startDate, endDate)
        return self.recv_getMonitoringObjectEvents()

    def send_getMonitoringObjectEvents(self, session, monitoringObjectIdList, startDate, endDate):
        self._oprot.writeMessageBegin('getMonitoringObjectEvents', TMessageType.CALL, self._seqid)
        args = getMonitoringObjectEvents_args()
        args.session = session
        args.monitoringObjectIdList = monitoringObjectIdList
        args.startDate = startDate
        args.endDate = endDate
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getMonitoringObjectEvents(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getMonitoringObjectEvents_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ad is not None:
            raise result.ad
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getMonitoringObjectEvents failed: unknown result")

    def getMonitoringObjectEventsSince(self, session, monitoringObjectIdList, startDate, startMonotonicIndex, limit):
        """
        Parameters:
         - session
         - monitoringObjectIdList
         - startDate
         - startMonotonicIndex
         - limit

        """
        self.send_getMonitoringObjectEventsSince(session, monitoringObjectIdList, startDate, startMonotonicIndex, limit)
        return self.recv_getMonitoringObjectEventsSince()

    def send_getMonitoringObjectEventsSince(self, session, monitoringObjectIdList, startDate, startMonotonicIndex, limit):
        self._oprot.writeMessageBegin('getMonitoringObjectEventsSince', TMessageType.CALL, self._seqid)
        args = getMonitoringObjectEventsSince_args()
        args.session = session
        args.monitoringObjectIdList = monitoringObjectIdList
        args.startDate = startDate
        args.startMonotonicIndex = startMonotonicIndex
        args.limit = limit
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getMonitoringObjectEventsSince(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getMonitoringObjectEventsSince_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ad is not None:
            raise result.ad
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getMonitoringObjectEventsSince failed: unknown result")

    def getMonitoringObjectIcons(self, session, filter):
        """
        Возвращает список иконок объектов мониторинга, удовлетворяющих фильтру

        @param session - сессия пользователя
        @param filter - фильтр иконок

        Parameters:
         - session
         - filter

        """
        self.send_getMonitoringObjectIcons(session, filter)
        return self.recv_getMonitoringObjectIcons()

    def send_getMonitoringObjectIcons(self, session, filter):
        self._oprot.writeMessageBegin('getMonitoringObjectIcons', TMessageType.CALL, self._seqid)
        args = getMonitoringObjectIcons_args()
        args.session = session
        args.filter = filter
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getMonitoringObjectIcons(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getMonitoringObjectIcons_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ad is not None:
            raise result.ad
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getMonitoringObjectIcons failed: unknown result")

    def reportRoadAccident(self, session, monitoringObjectId, eventParams):
        """
        Parameters:
         - session
         - monitoringObjectId
         - eventParams

        """
        self.send_reportRoadAccident(session, monitoringObjectId, eventParams)
        self.recv_reportRoadAccident()

    def send_reportRoadAccident(self, session, monitoringObjectId, eventParams):
        self._oprot.writeMessageBegin('reportRoadAccident', TMessageType.CALL, self._seqid)
        args = reportRoadAccident_args()
        args.session = session
        args.monitoringObjectId = monitoringObjectId
        args.eventParams = eventParams
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_reportRoadAccident(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = reportRoadAccident_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ad is not None:
            raise result.ad
        if result.one is not None:
            raise result.one
        return

    def getMonitoringObjectCommands(self, session, monitoringObjectId):
        """
        Parameters:
         - session
         - monitoringObjectId

        """
        self.send_getMonitoringObjectCommands(session, monitoringObjectId)
        return self.recv_getMonitoringObjectCommands()

    def send_getMonitoringObjectCommands(self, session, monitoringObjectId):
        self._oprot.writeMessageBegin('getMonitoringObjectCommands', TMessageType.CALL, self._seqid)
        args = getMonitoringObjectCommands_args()
        args.session = session
        args.monitoringObjectId = monitoringObjectId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getMonitoringObjectCommands(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getMonitoringObjectCommands_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ad is not None:
            raise result.ad
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getMonitoringObjectCommands failed: unknown result")

    def executeCommand(self, session, commandId):
        """
        Parameters:
         - session
         - commandId

        """
        self.send_executeCommand(session, commandId)
        return self.recv_executeCommand()

    def send_executeCommand(self, session, commandId):
        self._oprot.writeMessageBegin('executeCommand', TMessageType.CALL, self._seqid)
        args = executeCommand_args()
        args.session = session
        args.commandId = commandId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_executeCommand(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = executeCommand_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ad is not None:
            raise result.ad
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "executeCommand failed: unknown result")

    def getCommandsStatus(self, session, monitoringObjectId):
        """
        Parameters:
         - session
         - monitoringObjectId

        """
        self.send_getCommandsStatus(session, monitoringObjectId)
        return self.recv_getCommandsStatus()

    def send_getCommandsStatus(self, session, monitoringObjectId):
        self._oprot.writeMessageBegin('getCommandsStatus', TMessageType.CALL, self._seqid)
        args = getCommandsStatus_args()
        args.session = session
        args.monitoringObjectId = monitoringObjectId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getCommandsStatus(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getCommandsStatus_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ad is not None:
            raise result.ad
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getCommandsStatus failed: unknown result")

    def startRelayingVehicles(self, session, requests, columns, messageLimit):
        """
        Parameters:
         - session
         - requests
         - columns
         - messageLimit

        """
        self.send_startRelayingVehicles(session, requests, columns, messageLimit)
        return self.recv_startRelayingVehicles()

    def send_startRelayingVehicles(self, session, requests, columns, messageLimit):
        self._oprot.writeMessageBegin('startRelayingVehicles', TMessageType.CALL, self._seqid)
        args = startRelayingVehicles_args()
        args.session = session
        args.requests = requests
        args.columns = columns
        args.messageLimit = messageLimit
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_startRelayingVehicles(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = startRelayingVehicles_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        raise TApplicationException(TApplicationException.MISSING_RESULT, "startRelayingVehicles failed: unknown result")

    def getRelayingTracks(self, relayingSession):
        """
        Parameters:
         - relayingSession

        """
        self.send_getRelayingTracks(relayingSession)
        return self.recv_getRelayingTracks()

    def send_getRelayingTracks(self, relayingSession):
        self._oprot.writeMessageBegin('getRelayingTracks', TMessageType.CALL, self._seqid)
        args = getRelayingTracks_args()
        args.relayingSession = relayingSession
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getRelayingTracks(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getRelayingTracks_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.rse is not None:
            raise result.rse
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getRelayingTracks failed: unknown result")

    def getRelayingTracksEx(self, request):
        """
        Parameters:
         - request

        """
        self.send_getRelayingTracksEx(request)
        return self.recv_getRelayingTracksEx()

    def send_getRelayingTracksEx(self, request):
        self._oprot.writeMessageBegin('getRelayingTracksEx', TMessageType.CALL, self._seqid)
        args = getRelayingTracksEx_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getRelayingTracksEx(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getRelayingTracksEx_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.rse is not None:
            raise result.rse
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getRelayingTracksEx failed: unknown result")

    def getMonitoringObjectsTracks(self, session, requests, columns, messageLimit):
        """
        Parameters:
         - session
         - requests
         - columns
         - messageLimit

        """
        self.send_getMonitoringObjectsTracks(session, requests, columns, messageLimit)
        return self.recv_getMonitoringObjectsTracks()

    def send_getMonitoringObjectsTracks(self, session, requests, columns, messageLimit):
        self._oprot.writeMessageBegin('getMonitoringObjectsTracks', TMessageType.CALL, self._seqid)
        args = getMonitoringObjectsTracks_args()
        args.session = session
        args.requests = requests
        args.columns = columns
        args.messageLimit = messageLimit
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getMonitoringObjectsTracks(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getMonitoringObjectsTracks_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getMonitoringObjectsTracks failed: unknown result")

    def getClippedMonitoringObjectTracks(self, session, request, columns, viewport, useAdditionalTrackSplitting):
        """
        Parameters:
         - session
         - request
         - columns
         - viewport
         - useAdditionalTrackSplitting

        """
        self.send_getClippedMonitoringObjectTracks(session, request, columns, viewport, useAdditionalTrackSplitting)
        return self.recv_getClippedMonitoringObjectTracks()

    def send_getClippedMonitoringObjectTracks(self, session, request, columns, viewport, useAdditionalTrackSplitting):
        self._oprot.writeMessageBegin('getClippedMonitoringObjectTracks', TMessageType.CALL, self._seqid)
        args = getClippedMonitoringObjectTracks_args()
        args.session = session
        args.request = request
        args.columns = columns
        args.viewport = viewport
        args.useAdditionalTrackSplitting = useAdditionalTrackSplitting
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getClippedMonitoringObjectTracks(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getClippedMonitoringObjectTracks_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getClippedMonitoringObjectTracks failed: unknown result")

    def getMonitoringObjectTrackGroupedDetails(self, session, request):
        """
        Возвращает краткую сгруппированную историю движения объекта мониторинга

        Parameters:
         - session
         - request

        """
        self.send_getMonitoringObjectTrackGroupedDetails(session, request)
        return self.recv_getMonitoringObjectTrackGroupedDetails()

    def send_getMonitoringObjectTrackGroupedDetails(self, session, request):
        self._oprot.writeMessageBegin('getMonitoringObjectTrackGroupedDetails', TMessageType.CALL, self._seqid)
        args = getMonitoringObjectTrackGroupedDetails_args()
        args.session = session
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getMonitoringObjectTrackGroupedDetails(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getMonitoringObjectTrackGroupedDetails_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getMonitoringObjectTrackGroupedDetails failed: unknown result")

    def getRecentPositions(self, session, vehicleUuids, columns):
        """
        Parameters:
         - session
         - vehicleUuids
         - columns

        """
        self.send_getRecentPositions(session, vehicleUuids, columns)
        return self.recv_getRecentPositions()

    def send_getRecentPositions(self, session, vehicleUuids, columns):
        self._oprot.writeMessageBegin('getRecentPositions', TMessageType.CALL, self._seqid)
        args = getRecentPositions_args()
        args.session = session
        args.vehicleUuids = vehicleUuids
        args.columns = columns
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getRecentPositions(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getRecentPositions_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getRecentPositions failed: unknown result")

    def getRecentPositionsWithAllColumns(self, session, vehicleUuids):
        """
        Parameters:
         - session
         - vehicleUuids

        """
        self.send_getRecentPositionsWithAllColumns(session, vehicleUuids)
        return self.recv_getRecentPositionsWithAllColumns()

    def send_getRecentPositionsWithAllColumns(self, session, vehicleUuids):
        self._oprot.writeMessageBegin('getRecentPositionsWithAllColumns', TMessageType.CALL, self._seqid)
        args = getRecentPositionsWithAllColumns_args()
        args.session = session
        args.vehicleUuids = vehicleUuids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getRecentPositionsWithAllColumns(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getRecentPositionsWithAllColumns_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getRecentPositionsWithAllColumns failed: unknown result")

    def enableVehicle(self, session, vehicleId, enable):
        """
        Parameters:
         - session
         - vehicleId
         - enable

        """
        self.send_enableVehicle(session, vehicleId, enable)
        self.recv_enableVehicle()

    def send_enableVehicle(self, session, vehicleId, enable):
        self._oprot.writeMessageBegin('enableVehicle', TMessageType.CALL, self._seqid)
        args = enableVehicle_args()
        args.session = session
        args.vehicleId = vehicleId
        args.enable = enable
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_enableVehicle(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = enableVehicle_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ad is not None:
            raise result.ad
        if result.one is not None:
            raise result.one
        return

    def setTrackerStatus(self, session, monitoringObjectId, status):
        """
        Parameters:
         - session
         - monitoringObjectId
         - status

        """
        self.send_setTrackerStatus(session, monitoringObjectId, status)
        self.recv_setTrackerStatus()

    def send_setTrackerStatus(self, session, monitoringObjectId, status):
        self._oprot.writeMessageBegin('setTrackerStatus', TMessageType.CALL, self._seqid)
        args = setTrackerStatus_args()
        args.session = session
        args.monitoringObjectId = monitoringObjectId
        args.status = status
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_setTrackerStatus(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = setTrackerStatus_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ad is not None:
            raise result.ad
        if result.one is not None:
            raise result.one
        return

    def getTrackerStatusHistory(self, session, monitoringObjectId):
        """
        Parameters:
         - session
         - monitoringObjectId

        """
        self.send_getTrackerStatusHistory(session, monitoringObjectId)
        return self.recv_getTrackerStatusHistory()

    def send_getTrackerStatusHistory(self, session, monitoringObjectId):
        self._oprot.writeMessageBegin('getTrackerStatusHistory', TMessageType.CALL, self._seqid)
        args = getTrackerStatusHistory_args()
        args.session = session
        args.monitoringObjectId = monitoringObjectId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getTrackerStatusHistory(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getTrackerStatusHistory_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ad is not None:
            raise result.ad
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getTrackerStatusHistory failed: unknown result")

    def getTrackersCertificate(self, session, monitoringObjectIds):
        """
        Parameters:
         - session
         - monitoringObjectIds

        """
        self.send_getTrackersCertificate(session, monitoringObjectIds)
        return self.recv_getTrackersCertificate()

    def send_getTrackersCertificate(self, session, monitoringObjectIds):
        self._oprot.writeMessageBegin('getTrackersCertificate', TMessageType.CALL, self._seqid)
        args = getTrackersCertificate_args()
        args.session = session
        args.monitoringObjectIds = monitoringObjectIds
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getTrackersCertificate(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getTrackersCertificate_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ad is not None:
            raise result.ad
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getTrackersCertificate failed: unknown result")

    def setTrackerCertificate(self, session, certificate):
        """
        Parameters:
         - session
         - certificate

        """
        self.send_setTrackerCertificate(session, certificate)
        self.recv_setTrackerCertificate()

    def send_setTrackerCertificate(self, session, certificate):
        self._oprot.writeMessageBegin('setTrackerCertificate', TMessageType.CALL, self._seqid)
        args = setTrackerCertificate_args()
        args.session = session
        args.certificate = certificate
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_setTrackerCertificate(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = setTrackerCertificate_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ad is not None:
            raise result.ad
        if result.one is not None:
            raise result.one
        return

    def removeTrackersCertificate(self, session, monitoringObjectIds):
        """
        Parameters:
         - session
         - monitoringObjectIds

        """
        self.send_removeTrackersCertificate(session, monitoringObjectIds)
        self.recv_removeTrackersCertificate()

    def send_removeTrackersCertificate(self, session, monitoringObjectIds):
        self._oprot.writeMessageBegin('removeTrackersCertificate', TMessageType.CALL, self._seqid)
        args = removeTrackersCertificate_args()
        args.session = session
        args.monitoringObjectIds = monitoringObjectIds
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_removeTrackersCertificate(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = removeTrackersCertificate_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ad is not None:
            raise result.ad
        if result.one is not None:
            raise result.one
        return

    def isVehicleEnabled(self, session, vehicleId):
        """
        Parameters:
         - session
         - vehicleId

        """
        self.send_isVehicleEnabled(session, vehicleId)
        return self.recv_isVehicleEnabled()

    def send_isVehicleEnabled(self, session, vehicleId):
        self._oprot.writeMessageBegin('isVehicleEnabled', TMessageType.CALL, self._seqid)
        args = isVehicleEnabled_args()
        args.session = session
        args.vehicleId = vehicleId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_isVehicleEnabled(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = isVehicleEnabled_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ad is not None:
            raise result.ad
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "isVehicleEnabled failed: unknown result")

    def getRecentPositionsWithValidGPS(self, session, vehicleUuids, columns):
        """
        Parameters:
         - session
         - vehicleUuids
         - columns

        """
        self.send_getRecentPositionsWithValidGPS(session, vehicleUuids, columns)
        return self.recv_getRecentPositionsWithValidGPS()

    def send_getRecentPositionsWithValidGPS(self, session, vehicleUuids, columns):
        self._oprot.writeMessageBegin('getRecentPositionsWithValidGPS', TMessageType.CALL, self._seqid)
        args = getRecentPositionsWithValidGPS_args()
        args.session = session
        args.vehicleUuids = vehicleUuids
        args.columns = columns
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getRecentPositionsWithValidGPS(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getRecentPositionsWithValidGPS_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getRecentPositionsWithValidGPS failed: unknown result")

    def reportBrokenTracker(self, session, request):
        """
        Parameters:
         - session
         - request

        """
        self.send_reportBrokenTracker(session, request)
        self.recv_reportBrokenTracker()

    def send_reportBrokenTracker(self, session, request):
        self._oprot.writeMessageBegin('reportBrokenTracker', TMessageType.CALL, self._seqid)
        args = reportBrokenTracker_args()
        args.session = session
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_reportBrokenTracker(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = reportBrokenTracker_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.onfe is not None:
            raise result.onfe
        return

    def getGeopointsAddresses(self, session, points):
        """
        Parameters:
         - session
         - points

        """
        self.send_getGeopointsAddresses(session, points)
        return self.recv_getGeopointsAddresses()

    def send_getGeopointsAddresses(self, session, points):
        self._oprot.writeMessageBegin('getGeopointsAddresses', TMessageType.CALL, self._seqid)
        args = getGeopointsAddresses_args()
        args.session = session
        args.points = points
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getGeopointsAddresses(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getGeopointsAddresses_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getGeopointsAddresses failed: unknown result")

    def getCompanyStatistics(self, session, startDate, endDate, companyUUIDs):
        """
        Billing service.
        Subset of companyUUIDs available to the user in no particular order.

        Parameters:
         - session: user session
         - startDate: дата и время начала периода аггрегации статистики по компании в формате ISO-8601 (inclusive)
         - endDate: дата и время периода конца аггрегации (non-inclusive)
         - companyUUIDs: список UUID компаний

        """
        self.send_getCompanyStatistics(session, startDate, endDate, companyUUIDs)
        return self.recv_getCompanyStatistics()

    def send_getCompanyStatistics(self, session, startDate, endDate, companyUUIDs):
        self._oprot.writeMessageBegin('getCompanyStatistics', TMessageType.CALL, self._seqid)
        args = getCompanyStatistics_args()
        args.session = session
        args.startDate = startDate
        args.endDate = endDate
        args.companyUUIDs = companyUUIDs
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getCompanyStatistics(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getCompanyStatistics_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ad is not None:
            raise result.ad
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getCompanyStatistics failed: unknown result")

    def getRelay(self, session, id):
        """
        returns relay info by its id

        @param session - user session
        @param id - relay id, not empty, uuid


        Parameters:
         - session
         - id

        """
        self.send_getRelay(session, id)
        return self.recv_getRelay()

    def send_getRelay(self, session, id):
        self._oprot.writeMessageBegin('getRelay', TMessageType.CALL, self._seqid)
        args = getRelay_args()
        args.session = session
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getRelay(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getRelay_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getRelay failed: unknown result")

    def getChildRelays(self, session, parentGroupId, recursive):
        """
        returns relays for parent group

        @param session - user session
        @param parentGroupId - parent group id, not empty, uuid
        @param recursive - return all relays from subgroups


        Parameters:
         - session
         - parentGroupId
         - recursive

        """
        self.send_getChildRelays(session, parentGroupId, recursive)
        return self.recv_getChildRelays()

    def send_getChildRelays(self, session, parentGroupId, recursive):
        self._oprot.writeMessageBegin('getChildRelays', TMessageType.CALL, self._seqid)
        args = getChildRelays_args()
        args.session = session
        args.parentGroupId = parentGroupId
        args.recursive = recursive
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getChildRelays(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getChildRelays_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getChildRelays failed: unknown result")

    def createRelay(self, session, title, parentGroupId, protocol, enabled, monitoringObjectsIds, host, optionalParams):
        """
        creates relay and returns it's info

        @param session - user session, uuid
        @param title - relay title, not empty
        @param parentGroupId - parent group id, not empty, uuid
        @param protocol - not empty, one of "egts", "granit06", "kurs", "magicsystems", "olympstroy", "scoutopen", "transnavi", "wialonIPS", "can_way", "sodch", "yandex"
        @param enabled
        @param monitoringObjectsIds - list of monitoring object id, not empty, uuid list
        @param host - relay host, not empty


        Parameters:
         - session
         - title
         - parentGroupId
         - protocol
         - enabled
         - monitoringObjectsIds
         - host
         - optionalParams

        """
        self.send_createRelay(session, title, parentGroupId, protocol, enabled, monitoringObjectsIds, host, optionalParams)
        return self.recv_createRelay()

    def send_createRelay(self, session, title, parentGroupId, protocol, enabled, monitoringObjectsIds, host, optionalParams):
        self._oprot.writeMessageBegin('createRelay', TMessageType.CALL, self._seqid)
        args = createRelay_args()
        args.session = session
        args.title = title
        args.parentGroupId = parentGroupId
        args.protocol = protocol
        args.enabled = enabled
        args.monitoringObjectsIds = monitoringObjectsIds
        args.host = host
        args.optionalParams = optionalParams
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createRelay(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createRelay_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createRelay failed: unknown result")

    def editRelay(self, session, relay):
        """
        edits existing relay

        @param session - user session, uuid
        @param relay - relay with modified params


        Parameters:
         - session
         - relay

        """
        self.send_editRelay(session, relay)
        self.recv_editRelay()

    def send_editRelay(self, session, relay):
        self._oprot.writeMessageBegin('editRelay', TMessageType.CALL, self._seqid)
        args = editRelay_args()
        args.session = session
        args.relay = relay
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_editRelay(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = editRelay_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        return

    def deleteRelay(self, session, id):
        """
        deletes existing relay

        @param session - user session, uuid
        @param id - relay id, not empty, uuid


        Parameters:
         - session
         - id

        """
        self.send_deleteRelay(session, id)
        self.recv_deleteRelay()

    def send_deleteRelay(self, session, id):
        self._oprot.writeMessageBegin('deleteRelay', TMessageType.CALL, self._seqid)
        args = deleteRelay_args()
        args.session = session
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_deleteRelay(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = deleteRelay_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        return

    def getGeofence(self, session, id):
        """
        returns geofence info by its id

        @param session - user session
        @param id - geofence id, not empty, uuid


        Parameters:
         - session
         - id

        """
        self.send_getGeofence(session, id)
        return self.recv_getGeofence()

    def send_getGeofence(self, session, id):
        self._oprot.writeMessageBegin('getGeofence', TMessageType.CALL, self._seqid)
        args = getGeofence_args()
        args.session = session
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getGeofence(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getGeofence_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getGeofence failed: unknown result")

    def getChildGeofences(self, session, parentGroupId, recursive):
        """
        returns list of geofences for parent group

        @param session - user session
        @param parentGroupId - parent group id, not empty, uuid
        @param recursive - return all geofences from subgroups


        Parameters:
         - session
         - parentGroupId
         - recursive

        """
        self.send_getChildGeofences(session, parentGroupId, recursive)
        return self.recv_getChildGeofences()

    def send_getChildGeofences(self, session, parentGroupId, recursive):
        self._oprot.writeMessageBegin('getChildGeofences', TMessageType.CALL, self._seqid)
        args = getChildGeofences_args()
        args.session = session
        args.parentGroupId = parentGroupId
        args.recursive = recursive
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getChildGeofences(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getChildGeofences_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getChildGeofences failed: unknown result")

    def getGeofenceGeometryWKT(self, session, id):
        """
        returns geofence geometry by its id

        @param session - user session
        @param id - geofence id, not empty, uuid


        Parameters:
         - session
         - id

        """
        self.send_getGeofenceGeometryWKT(session, id)
        return self.recv_getGeofenceGeometryWKT()

    def send_getGeofenceGeometryWKT(self, session, id):
        self._oprot.writeMessageBegin('getGeofenceGeometryWKT', TMessageType.CALL, self._seqid)
        args = getGeofenceGeometryWKT_args()
        args.session = session
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getGeofenceGeometryWKT(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getGeofenceGeometryWKT_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getGeofenceGeometryWKT failed: unknown result")

    def createGeofence(self, session, parentGroupId, title, color, geometryWKT):
        """
        creates geofence and returns it's info

        @param session - user session, uuid
        @param parentGroupId - parent group id, not empty, uuid
        @param title - geofence title, not empty
        @param color - geofence color
        @param geometryWKT - geofence geometry in WKT format


        Parameters:
         - session
         - parentGroupId
         - title
         - color
         - geometryWKT

        """
        self.send_createGeofence(session, parentGroupId, title, color, geometryWKT)
        return self.recv_createGeofence()

    def send_createGeofence(self, session, parentGroupId, title, color, geometryWKT):
        self._oprot.writeMessageBegin('createGeofence', TMessageType.CALL, self._seqid)
        args = createGeofence_args()
        args.session = session
        args.parentGroupId = parentGroupId
        args.title = title
        args.color = color
        args.geometryWKT = geometryWKT
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createGeofence(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createGeofence_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createGeofence failed: unknown result")

    def editGeofence(self, session, geofence):
        """
        edits existing geofence

        @param session - user session, uuid
        @param geofence - geofence with modified params


        Parameters:
         - session
         - geofence

        """
        self.send_editGeofence(session, geofence)
        self.recv_editGeofence()

    def send_editGeofence(self, session, geofence):
        self._oprot.writeMessageBegin('editGeofence', TMessageType.CALL, self._seqid)
        args = editGeofence_args()
        args.session = session
        args.geofence = geofence
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_editGeofence(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = editGeofence_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        return

    def editGeofenceGeometryWKT(self, session, id, geometryWKT):
        """
        edits existing geofence geometry

        @param session - user session, uuid
        @param id - geofence id, not empty, uuid
        @param geometryWKT - updated geometry for specified geofence


        Parameters:
         - session
         - id
         - geometryWKT

        """
        self.send_editGeofenceGeometryWKT(session, id, geometryWKT)
        self.recv_editGeofenceGeometryWKT()

    def send_editGeofenceGeometryWKT(self, session, id, geometryWKT):
        self._oprot.writeMessageBegin('editGeofenceGeometryWKT', TMessageType.CALL, self._seqid)
        args = editGeofenceGeometryWKT_args()
        args.session = session
        args.id = id
        args.geometryWKT = geometryWKT
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_editGeofenceGeometryWKT(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = editGeofenceGeometryWKT_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        return

    def deleteGeofence(self, session, id):
        """
        deletes existing geofence

        @param session - user session, uuid
        @param id - geofence id, not empty, uuid


        Parameters:
         - session
         - id

        """
        self.send_deleteGeofence(session, id)
        self.recv_deleteGeofence()

    def send_deleteGeofence(self, session, id):
        self._oprot.writeMessageBegin('deleteGeofence', TMessageType.CALL, self._seqid)
        args = deleteGeofence_args()
        args.session = session
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_deleteGeofence(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = deleteGeofence_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        return

    def getPlace(self, session, id):
        """
        @return place info by its id

        @param session - user session
        @param id - place id, not empty, uuid


        Parameters:
         - session
         - id

        """
        self.send_getPlace(session, id)
        return self.recv_getPlace()

    def send_getPlace(self, session, id):
        self._oprot.writeMessageBegin('getPlace', TMessageType.CALL, self._seqid)
        args = getPlace_args()
        args.session = session
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getPlace(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getPlace_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getPlace failed: unknown result")

    def getChildPlaces(self, session, parentGroupId, recursive):
        """
        @return places of parent group

        @param session - user session
        @param parentGroupId - parent group id, not empty, uuid
        @param recursive - return all places on map from subgroups


        Parameters:
         - session
         - parentGroupId
         - recursive

        """
        self.send_getChildPlaces(session, parentGroupId, recursive)
        return self.recv_getChildPlaces()

    def send_getChildPlaces(self, session, parentGroupId, recursive):
        self._oprot.writeMessageBegin('getChildPlaces', TMessageType.CALL, self._seqid)
        args = getChildPlaces_args()
        args.session = session
        args.parentGroupId = parentGroupId
        args.recursive = recursive
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getChildPlaces(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getChildPlaces_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getChildPlaces failed: unknown result")

    def createPlace(self, session, parentGroupId, title, position):
        """
        creates place and returns it's info

        @param session - user session, uuid
        @param parentGroupId - parent group id, not empty, uuid
        @param title - place title, not empty
        @param longitude - place longitude
        @param latitude - place latitude


        Parameters:
         - session
         - parentGroupId
         - title
         - position

        """
        self.send_createPlace(session, parentGroupId, title, position)
        return self.recv_createPlace()

    def send_createPlace(self, session, parentGroupId, title, position):
        self._oprot.writeMessageBegin('createPlace', TMessageType.CALL, self._seqid)
        args = createPlace_args()
        args.session = session
        args.parentGroupId = parentGroupId
        args.title = title
        args.position = position
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createPlace(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createPlace_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createPlace failed: unknown result")

    def editPlace(self, session, place):
        """
        edits existing place

        @param session - user session, uuid
        @param place - place with modified params


        Parameters:
         - session
         - place

        """
        self.send_editPlace(session, place)
        self.recv_editPlace()

    def send_editPlace(self, session, place):
        self._oprot.writeMessageBegin('editPlace', TMessageType.CALL, self._seqid)
        args = editPlace_args()
        args.session = session
        args.place = place
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_editPlace(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = editPlace_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        return

    def deletePlace(self, session, id):
        """
        deletes existing place

        @param session - user session, uuid
        @param id - place id, not empty, uuid


        Parameters:
         - session
         - id

        """
        self.send_deletePlace(session, id)
        self.recv_deletePlace()

    def send_deletePlace(self, session, id):
        self._oprot.writeMessageBegin('deletePlace', TMessageType.CALL, self._seqid)
        args = deletePlace_args()
        args.session = session
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_deletePlace(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = deletePlace_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        return

    def getRoute(self, session, routeId):
        """
        @return route info

        @param session - user session
        @param routeId - route id, not empty, uuid


        Parameters:
         - session
         - routeId

        """
        self.send_getRoute(session, routeId)
        return self.recv_getRoute()

    def send_getRoute(self, session, routeId):
        self._oprot.writeMessageBegin('getRoute', TMessageType.CALL, self._seqid)
        args = getRoute_args()
        args.session = session
        args.routeId = routeId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getRoute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getRoute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getRoute failed: unknown result")

    def getChildRoutes(self, session, parentGroupId, recursive):
        """
        @return group child routes

        @param session - user session
        @param parentGroupId - parent group id, not empty, uuid
        @param recursive - return all routes from subgroups


        Parameters:
         - session
         - parentGroupId
         - recursive

        """
        self.send_getChildRoutes(session, parentGroupId, recursive)
        return self.recv_getChildRoutes()

    def send_getChildRoutes(self, session, parentGroupId, recursive):
        self._oprot.writeMessageBegin('getChildRoutes', TMessageType.CALL, self._seqid)
        args = getChildRoutes_args()
        args.session = session
        args.parentGroupId = parentGroupId
        args.recursive = recursive
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getChildRoutes(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getChildRoutes_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getChildRoutes failed: unknown result")

    def getRouteLines(self, session, routeId, viewport):
        """
        @return points of route line

        @param session - user session
        @param routeId - route id, not empty, uuid


        Parameters:
         - session
         - routeId
         - viewport

        """
        self.send_getRouteLines(session, routeId, viewport)
        return self.recv_getRouteLines()

    def send_getRouteLines(self, session, routeId, viewport):
        self._oprot.writeMessageBegin('getRouteLines', TMessageType.CALL, self._seqid)
        args = getRouteLines_args()
        args.session = session
        args.routeId = routeId
        args.viewport = viewport
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getRouteLines(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getRouteLines_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getRouteLines failed: unknown result")

    def createRoute(self, session, parentGroupId, title, color, coridorWidth, routeControlMethod, vehicleRoutingType, routeStageSets):
        """
        creates route and returns its info

        @param session - user session, uuid
        @param parentGroupId - parent group id, uuid
        @param title - route title, not empty
        @param color - route line color, not empty, free format
        @param coridorWidth
        @param routeControlMethod
        @param vehicleRoutingType
        @param routeStages


        Parameters:
         - session
         - parentGroupId
         - title: not empty
         - color: not empty, free format
         - coridorWidth
         - routeControlMethod
         - vehicleRoutingType
         - routeStageSets

        """
        self.send_createRoute(session, parentGroupId, title, color, coridorWidth, routeControlMethod, vehicleRoutingType, routeStageSets)
        return self.recv_createRoute()

    def send_createRoute(self, session, parentGroupId, title, color, coridorWidth, routeControlMethod, vehicleRoutingType, routeStageSets):
        self._oprot.writeMessageBegin('createRoute', TMessageType.CALL, self._seqid)
        args = createRoute_args()
        args.session = session
        args.parentGroupId = parentGroupId
        args.title = title
        args.color = color
        args.coridorWidth = coridorWidth
        args.routeControlMethod = routeControlMethod
        args.vehicleRoutingType = vehicleRoutingType
        args.routeStageSets = routeStageSets
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createRoute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createRoute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createRoute failed: unknown result")

    def editRoute(self, session, route):
        """
        edits route and returns its updated info

        @param session - user session, uuid
        @param route - route with modified params


        Parameters:
         - session
         - route

        """
        self.send_editRoute(session, route)
        return self.recv_editRoute()

    def send_editRoute(self, session, route):
        self._oprot.writeMessageBegin('editRoute', TMessageType.CALL, self._seqid)
        args = editRoute_args()
        args.session = session
        args.route = route
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_editRoute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = editRoute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "editRoute failed: unknown result")

    def deleteRoute(self, session, id):
        """
        deletes route

        @param session - user session
        @param id - route id, not empty

        Parameters:
         - session
         - id

        """
        self.send_deleteRoute(session, id)
        self.recv_deleteRoute()

    def send_deleteRoute(self, session, id):
        self._oprot.writeMessageBegin('deleteRoute', TMessageType.CALL, self._seqid)
        args = deleteRoute_args()
        args.session = session
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_deleteRoute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = deleteRoute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.be is not None:
            raise result.be
        if result.iee is not None:
            raise result.iee
        if result.uae is not None:
            raise result.uae
        if result.ade is not None:
            raise result.ade
        if result.nfe is not None:
            raise result.nfe
        return

    def calculateRouteGeometry(self, session, stages, routingType, viewport):
        """
        calculatess route geometry

        @param session - user session, uuid
        @param stages


        Parameters:
         - session
         - stages
         - routingType
         - viewport

        """
        self.send_calculateRouteGeometry(session, stages, routingType, viewport)
        return self.recv_calculateRouteGeometry()

    def send_calculateRouteGeometry(self, session, stages, routingType, viewport):
        self._oprot.writeMessageBegin('calculateRouteGeometry', TMessageType.CALL, self._seqid)
        args = calculateRouteGeometry_args()
        args.session = session
        args.stages = stages
        args.routingType = routingType
        args.viewport = viewport
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_calculateRouteGeometry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = calculateRouteGeometry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "calculateRouteGeometry failed: unknown result")

    def getEventsRule(self, session, id):
        """
        @return events generating rule by its id
        @param session - user session
        @param id - events generating rule uuid, not empty

        Parameters:
         - session
         - id

        """
        self.send_getEventsRule(session, id)
        return self.recv_getEventsRule()

    def send_getEventsRule(self, session, id):
        self._oprot.writeMessageBegin('getEventsRule', TMessageType.CALL, self._seqid)
        args = getEventsRule_args()
        args.session = session
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getEventsRule(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getEventsRule_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.be is not None:
            raise result.be
        if result.iee is not None:
            raise result.iee
        if result.uae is not None:
            raise result.uae
        if result.ade is not None:
            raise result.ade
        if result.nfe is not None:
            raise result.nfe
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getEventsRule failed: unknown result")

    def getChildEventsRules(self, session, parentGroupId, recursive):
        """
        @return events generating rules in group
        @param session - user session
        @param parentGroupId - parent group uuid, not empty
        @param recursive - also return rules from subgroups

        Parameters:
         - session
         - parentGroupId
         - recursive

        """
        self.send_getChildEventsRules(session, parentGroupId, recursive)
        return self.recv_getChildEventsRules()

    def send_getChildEventsRules(self, session, parentGroupId, recursive):
        self._oprot.writeMessageBegin('getChildEventsRules', TMessageType.CALL, self._seqid)
        args = getChildEventsRules_args()
        args.session = session
        args.parentGroupId = parentGroupId
        args.recursive = recursive
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getChildEventsRules(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getChildEventsRules_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.be is not None:
            raise result.be
        if result.iee is not None:
            raise result.iee
        if result.uae is not None:
            raise result.uae
        if result.ade is not None:
            raise result.ade
        if result.nfe is not None:
            raise result.nfe
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getChildEventsRules failed: unknown result")

    def createEventsRule(self, session, parentGroupId, title, monitoringObjectIds, eventsConditions, eventsConditionsAreDisjunctive, generatedEventType, actionsCondition, actions):
        """
        @return new events generating rule
        @param session - user session
        @param parentGroupId - parent group uuid, not empty
        @param title - name of the rule, not empty
        @param monitoringObjectIds - monitoring objects uuids, not empty
        @param eventsConditions - condition(s) to make rule's events generated
        @param eventsConditionsAreDisjunctive - false means conjunctive conditions
        @param generatedEventType - type of event to be generated
        @param actionsCondition - additional condition (when events generated) to make rule's actions applied
        @param actions - actions to execute when events generating rule applied

        Parameters:
         - session
         - parentGroupId
         - title
         - monitoringObjectIds
         - eventsConditions
         - eventsConditionsAreDisjunctive
         - generatedEventType
         - actionsCondition
         - actions

        """
        self.send_createEventsRule(session, parentGroupId, title, monitoringObjectIds, eventsConditions, eventsConditionsAreDisjunctive, generatedEventType, actionsCondition, actions)
        return self.recv_createEventsRule()

    def send_createEventsRule(self, session, parentGroupId, title, monitoringObjectIds, eventsConditions, eventsConditionsAreDisjunctive, generatedEventType, actionsCondition, actions):
        self._oprot.writeMessageBegin('createEventsRule', TMessageType.CALL, self._seqid)
        args = createEventsRule_args()
        args.session = session
        args.parentGroupId = parentGroupId
        args.title = title
        args.monitoringObjectIds = monitoringObjectIds
        args.eventsConditions = eventsConditions
        args.eventsConditionsAreDisjunctive = eventsConditionsAreDisjunctive
        args.generatedEventType = generatedEventType
        args.actionsCondition = actionsCondition
        args.actions = actions
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createEventsRule(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createEventsRule_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.be is not None:
            raise result.be
        if result.iee is not None:
            raise result.iee
        if result.uae is not None:
            raise result.uae
        if result.ade is not None:
            raise result.ade
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createEventsRule failed: unknown result")

    def editEventsRule(self, session, modifiedRule):
        """
        @param session - user session
        @param modifiedRule - rule to change existing one, identified by uuid

        Parameters:
         - session
         - modifiedRule

        """
        self.send_editEventsRule(session, modifiedRule)
        self.recv_editEventsRule()

    def send_editEventsRule(self, session, modifiedRule):
        self._oprot.writeMessageBegin('editEventsRule', TMessageType.CALL, self._seqid)
        args = editEventsRule_args()
        args.session = session
        args.modifiedRule = modifiedRule
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_editEventsRule(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = editEventsRule_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.be is not None:
            raise result.be
        if result.iee is not None:
            raise result.iee
        if result.uae is not None:
            raise result.uae
        if result.ade is not None:
            raise result.ade
        if result.nfe is not None:
            raise result.nfe
        return

    def deleteEventsRule(self, session, id):
        """
        @param session - user session
        @param id - events generating rule uuid, not empty

        Parameters:
         - session
         - id

        """
        self.send_deleteEventsRule(session, id)
        self.recv_deleteEventsRule()

    def send_deleteEventsRule(self, session, id):
        self._oprot.writeMessageBegin('deleteEventsRule', TMessageType.CALL, self._seqid)
        args = deleteEventsRule_args()
        args.session = session
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_deleteEventsRule(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = deleteEventsRule_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.be is not None:
            raise result.be
        if result.iee is not None:
            raise result.iee
        if result.uae is not None:
            raise result.uae
        if result.ade is not None:
            raise result.ade
        if result.nfe is not None:
            raise result.nfe
        return

    def getTripsInfo(self, session, tripsId):
        """
        @return trip info by its id

        @param session - user session
        @param id - trip id, not empty, uuid


        Parameters:
         - session
         - tripsId

        """
        self.send_getTripsInfo(session, tripsId)
        return self.recv_getTripsInfo()

    def send_getTripsInfo(self, session, tripsId):
        self._oprot.writeMessageBegin('getTripsInfo', TMessageType.CALL, self._seqid)
        args = getTripsInfo_args()
        args.session = session
        args.tripsId = tripsId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getTripsInfo(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getTripsInfo_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getTripsInfo failed: unknown result")

    def getTripsId(self, session, parentGroupId, allowableStatuses, recursive):
        """
        @return trips of parent group

        @param session - user session
        @param parentGroupId - parent group id, not empty, uuid
        @param allowableStatuses- return trips whoes status is one of listed, empty if no filtering
        @param recursive - return all trips from subgroups


        Parameters:
         - session
         - parentGroupId
         - allowableStatuses
         - recursive

        """
        self.send_getTripsId(session, parentGroupId, allowableStatuses, recursive)
        return self.recv_getTripsId()

    def send_getTripsId(self, session, parentGroupId, allowableStatuses, recursive):
        self._oprot.writeMessageBegin('getTripsId', TMessageType.CALL, self._seqid)
        args = getTripsId_args()
        args.session = session
        args.parentGroupId = parentGroupId
        args.allowableStatuses = allowableStatuses
        args.recursive = recursive
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getTripsId(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getTripsId_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getTripsId failed: unknown result")

    def getMonitoringObjectsTrips(self, session, monitoringObjectsId):
        """
        @return trips for monitoring objects

        @param session - user session
        @param monitoringObjectsId - monitoringObjects uuid list


        Parameters:
         - session
         - monitoringObjectsId

        """
        self.send_getMonitoringObjectsTrips(session, monitoringObjectsId)
        return self.recv_getMonitoringObjectsTrips()

    def send_getMonitoringObjectsTrips(self, session, monitoringObjectsId):
        self._oprot.writeMessageBegin('getMonitoringObjectsTrips', TMessageType.CALL, self._seqid)
        args = getMonitoringObjectsTrips_args()
        args.session = session
        args.monitoringObjectsId = monitoringObjectsId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getMonitoringObjectsTrips(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getMonitoringObjectsTrips_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getMonitoringObjectsTrips failed: unknown result")

    def createTrip(self, session, vehicleId, routeId, tripStageSets, startTripUnixTime, abortTripUnixTime, notificationParams):
        """
        creates trip and returns it's info

        @param session - user session, uuid
        @param vehicleId - vehicle uuid
        @param routeId - route uuid
        @param tripStageSets - trip stages uuids for each trip variant


        Parameters:
         - session
         - vehicleId
         - routeId
         - tripStageSets
         - startTripUnixTime
         - abortTripUnixTime
         - notificationParams

        """
        self.send_createTrip(session, vehicleId, routeId, tripStageSets, startTripUnixTime, abortTripUnixTime, notificationParams)
        return self.recv_createTrip()

    def send_createTrip(self, session, vehicleId, routeId, tripStageSets, startTripUnixTime, abortTripUnixTime, notificationParams):
        self._oprot.writeMessageBegin('createTrip', TMessageType.CALL, self._seqid)
        args = createTrip_args()
        args.session = session
        args.vehicleId = vehicleId
        args.routeId = routeId
        args.tripStageSets = tripStageSets
        args.startTripUnixTime = startTripUnixTime
        args.abortTripUnixTime = abortTripUnixTime
        args.notificationParams = notificationParams
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createTrip(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createTrip_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createTrip failed: unknown result")

    def createTripWithAdditionalFields(self, session, vehicleId, routeId, tripStageSets, startTripUnixTime, abortTripUnixTime, notificationParams, additionalFields):
        """
        creates trip and returns it's info

        @param session - user session, uuid
        @param trip - trip to create
        @param additionalFields - additional fields


        Parameters:
         - session
         - vehicleId
         - routeId
         - tripStageSets
         - startTripUnixTime
         - abortTripUnixTime
         - notificationParams
         - additionalFields

        """
        self.send_createTripWithAdditionalFields(session, vehicleId, routeId, tripStageSets, startTripUnixTime, abortTripUnixTime, notificationParams, additionalFields)
        return self.recv_createTripWithAdditionalFields()

    def send_createTripWithAdditionalFields(self, session, vehicleId, routeId, tripStageSets, startTripUnixTime, abortTripUnixTime, notificationParams, additionalFields):
        self._oprot.writeMessageBegin('createTripWithAdditionalFields', TMessageType.CALL, self._seqid)
        args = createTripWithAdditionalFields_args()
        args.session = session
        args.vehicleId = vehicleId
        args.routeId = routeId
        args.tripStageSets = tripStageSets
        args.startTripUnixTime = startTripUnixTime
        args.abortTripUnixTime = abortTripUnixTime
        args.notificationParams = notificationParams
        args.additionalFields = additionalFields
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createTripWithAdditionalFields(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createTripWithAdditionalFields_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createTripWithAdditionalFields failed: unknown result")

    def editTrip(self, session, trip):
        """
        edits existing trip

        @param session - user session, uuid
        @param trip - trip with modified params


        Parameters:
         - session
         - trip

        """
        self.send_editTrip(session, trip)
        self.recv_editTrip()

    def send_editTrip(self, session, trip):
        self._oprot.writeMessageBegin('editTrip', TMessageType.CALL, self._seqid)
        args = editTrip_args()
        args.session = session
        args.trip = trip
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_editTrip(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = editTrip_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        return

    def deleteTrip(self, session, id):
        """
        deletes existing trip

        @param session - user session, uuid
        @param id - trip id, not empty, uuid


        Parameters:
         - session
         - id

        """
        self.send_deleteTrip(session, id)
        self.recv_deleteTrip()

    def send_deleteTrip(self, session, id):
        self._oprot.writeMessageBegin('deleteTrip', TMessageType.CALL, self._seqid)
        args = deleteTrip_args()
        args.session = session
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_deleteTrip(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = deleteTrip_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        return

    def cancelTrip(self, session, id):
        """
        cancels existing not finished trip

        @param session - user session, uuid
        @param id - trip id, not empty, uuid


        Parameters:
         - session
         - id

        """
        self.send_cancelTrip(session, id)
        self.recv_cancelTrip()

    def send_cancelTrip(self, session, id):
        self._oprot.writeMessageBegin('cancelTrip', TMessageType.CALL, self._seqid)
        args = cancelTrip_args()
        args.session = session
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_cancelTrip(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = cancelTrip_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        return

    def getTripEvents(self, session, tripIds, eventTypes, globalMonotonicIndex):
        """
        @return events for selected trips and event types
        @param session - user session
        @param tripIds - selected trip ids
        @param eventTypes - selected event types, must be trip event types
        @param globalMonotonicIndex - skip events with index less than this value. Ignored if 0.

        Parameters:
         - session
         - tripIds
         - eventTypes
         - globalMonotonicIndex

        """
        self.send_getTripEvents(session, tripIds, eventTypes, globalMonotonicIndex)
        return self.recv_getTripEvents()

    def send_getTripEvents(self, session, tripIds, eventTypes, globalMonotonicIndex):
        self._oprot.writeMessageBegin('getTripEvents', TMessageType.CALL, self._seqid)
        args = getTripEvents_args()
        args.session = session
        args.tripIds = tripIds
        args.eventTypes = eventTypes
        args.globalMonotonicIndex = globalMonotonicIndex
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getTripEvents(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getTripEvents_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.be is not None:
            raise result.be
        if result.iee is not None:
            raise result.iee
        if result.uae is not None:
            raise result.uae
        if result.ade is not None:
            raise result.ade
        if result.nfe is not None:
            raise result.nfe
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getTripEvents failed: unknown result")

    def getClippedTripTracks(self, session, request, columns, viewport):
        """

        Return tracks of vehicles on specified trip sorted ascending by captured_timestamp.

        @param request - trip id and captured_timestamp range
        Note: timestamps has closed border.
        @param columns - selected columns


        Parameters:
         - session
         - request
         - columns
         - viewport

        """
        self.send_getClippedTripTracks(session, request, columns, viewport)
        return self.recv_getClippedTripTracks()

    def send_getClippedTripTracks(self, session, request, columns, viewport):
        self._oprot.writeMessageBegin('getClippedTripTracks', TMessageType.CALL, self._seqid)
        args = getClippedTripTracks_args()
        args.session = session
        args.request = request
        args.columns = columns
        args.viewport = viewport
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getClippedTripTracks(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getClippedTripTracks_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.nfe is not None:
            raise result.nfe
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getClippedTripTracks failed: unknown result")

    def getStoreScheme(self, session, schemeId):
        """
        @return store scheme info

        @param session - user session
        @param schemeId - scheme id, not empty, uuid


        Parameters:
         - session
         - schemeId

        """
        self.send_getStoreScheme(session, schemeId)
        return self.recv_getStoreScheme()

    def send_getStoreScheme(self, session, schemeId):
        self._oprot.writeMessageBegin('getStoreScheme', TMessageType.CALL, self._seqid)
        args = getStoreScheme_args()
        args.session = session
        args.schemeId = schemeId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getStoreScheme(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getStoreScheme_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getStoreScheme failed: unknown result")

    def getAdditionalFieldsScheme(self, session, parentGroupId, extensionForType):
        """
        get scheme for additional fields with group id and extended object type

        @param session - user session
        @param parentGroupId - parent group id, uuid, not empty
        @param extensionForType - extended object type, not empty

        Parameters:
         - session
         - parentGroupId
         - extensionForType

        """
        self.send_getAdditionalFieldsScheme(session, parentGroupId, extensionForType)
        return self.recv_getAdditionalFieldsScheme()

    def send_getAdditionalFieldsScheme(self, session, parentGroupId, extensionForType):
        self._oprot.writeMessageBegin('getAdditionalFieldsScheme', TMessageType.CALL, self._seqid)
        args = getAdditionalFieldsScheme_args()
        args.session = session
        args.parentGroupId = parentGroupId
        args.extensionForType = extensionForType
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getAdditionalFieldsScheme(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getAdditionalFieldsScheme_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.be is not None:
            raise result.be
        if result.iee is not None:
            raise result.iee
        if result.uae is not None:
            raise result.uae
        if result.ade is not None:
            raise result.ade
        if result.nfe is not None:
            raise result.nfe
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getAdditionalFieldsScheme failed: unknown result")

    def createStoreScheme(self, session, parentGroupId, name, fields, description):
        """
        creates store scheme and returns its info

        @param session - user session, uuid
        @param parentGroupId - parent group id, uuid, not empty
        @param name - scheme name, not empty
        @param fields - list of scheme fields, not empty, field id will be ignored
        @param description - scheme description


        Parameters:
         - session
         - parentGroupId
         - name
         - fields
         - description

        """
        self.send_createStoreScheme(session, parentGroupId, name, fields, description)
        return self.recv_createStoreScheme()

    def send_createStoreScheme(self, session, parentGroupId, name, fields, description):
        self._oprot.writeMessageBegin('createStoreScheme', TMessageType.CALL, self._seqid)
        args = createStoreScheme_args()
        args.session = session
        args.parentGroupId = parentGroupId
        args.name = name
        args.fields = fields
        args.description = description
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createStoreScheme(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createStoreScheme_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createStoreScheme failed: unknown result")

    def deleteStoreScheme(self, session, id):
        """
        delete store scheme

        @param session - user session, uuid
        @param id - scheme id, uuid not empty


        Parameters:
         - session
         - id

        """
        self.send_deleteStoreScheme(session, id)
        self.recv_deleteStoreScheme()

    def send_deleteStoreScheme(self, session, id):
        self._oprot.writeMessageBegin('deleteStoreScheme', TMessageType.CALL, self._seqid)
        args = deleteStoreScheme_args()
        args.session = session
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_deleteStoreScheme(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = deleteStoreScheme_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        return

    def editStoreScheme(self, session, scheme):
        """
        edit store scheme

        @param session - user session, uuid
        @param scheme - edited scheme with changes


        Parameters:
         - session
         - scheme

        """
        self.send_editStoreScheme(session, scheme)
        self.recv_editStoreScheme()

    def send_editStoreScheme(self, session, scheme):
        self._oprot.writeMessageBegin('editStoreScheme', TMessageType.CALL, self._seqid)
        args = editStoreScheme_args()
        args.session = session
        args.scheme = scheme
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_editStoreScheme(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = editStoreScheme_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        return

    def getCountries(self, session, filter):
        """
        @return countries available in map service filtered by filter
        @param session - user session
        @param filter - search filter

        Parameters:
         - session
         - filter

        """
        self.send_getCountries(session, filter)
        return self.recv_getCountries()

    def send_getCountries(self, session, filter):
        self._oprot.writeMessageBegin('getCountries', TMessageType.CALL, self._seqid)
        args = getCountries_args()
        args.session = session
        args.filter = filter
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getCountries(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getCountries_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.be is not None:
            raise result.be
        if result.iee is not None:
            raise result.iee
        if result.uae is not None:
            raise result.uae
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getCountries failed: unknown result")

    def getCities(self, session, context, filter):
        """
        @return cities available in map service filtered by filter
        @param session - user session
        @context - context returned by getCountries call
        @param filter - search filter

        Parameters:
         - session
         - context
         - filter

        """
        self.send_getCities(session, context, filter)
        return self.recv_getCities()

    def send_getCities(self, session, context, filter):
        self._oprot.writeMessageBegin('getCities', TMessageType.CALL, self._seqid)
        args = getCities_args()
        args.session = session
        args.context = context
        args.filter = filter
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getCities(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getCities_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.be is not None:
            raise result.be
        if result.iee is not None:
            raise result.iee
        if result.uae is not None:
            raise result.uae
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getCities failed: unknown result")

    def getStreets(self, session, context, filter):
        """
        @return streets available in map service filtered by filter
        @param session - user session
        @context - context returned by getCities call
        @param filter - search filter

        Parameters:
         - session
         - context
         - filter

        """
        self.send_getStreets(session, context, filter)
        return self.recv_getStreets()

    def send_getStreets(self, session, context, filter):
        self._oprot.writeMessageBegin('getStreets', TMessageType.CALL, self._seqid)
        args = getStreets_args()
        args.session = session
        args.context = context
        args.filter = filter
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getStreets(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getStreets_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.be is not None:
            raise result.be
        if result.iee is not None:
            raise result.iee
        if result.uae is not None:
            raise result.uae
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getStreets failed: unknown result")

    def getBuildings(self, session, context, filter):
        """
        @return buildings available in map service filtered by filter
        @param session - user session
        @context - context returned by getStreets call
        @param filter - search filter

        Parameters:
         - session
         - context
         - filter

        """
        self.send_getBuildings(session, context, filter)
        return self.recv_getBuildings()

    def send_getBuildings(self, session, context, filter):
        self._oprot.writeMessageBegin('getBuildings', TMessageType.CALL, self._seqid)
        args = getBuildings_args()
        args.session = session
        args.context = context
        args.filter = filter
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getBuildings(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getBuildings_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.be is not None:
            raise result.be
        if result.iee is not None:
            raise result.iee
        if result.uae is not None:
            raise result.uae
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getBuildings failed: unknown result")

    def getPoint(self, session, context):
        """
        @return coordinates of object found by address search
        @param session - user session
        @context - context returned by getCountries/Cities/Streets/Buildings calls

        Parameters:
         - session
         - context

        """
        self.send_getPoint(session, context)
        return self.recv_getPoint()

    def send_getPoint(self, session, context):
        self._oprot.writeMessageBegin('getPoint', TMessageType.CALL, self._seqid)
        args = getPoint_args()
        args.session = session
        args.context = context
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getPoint(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getPoint_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.be is not None:
            raise result.be
        if result.iee is not None:
            raise result.iee
        if result.uae is not None:
            raise result.uae
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getPoint failed: unknown result")

    def getSensorConfigurations(self, session, monitoringObjectId):
        """
        @return existing sensor configurations of monitoring object

        @param session - user session
        @param monitoringObjectId - monitoring object id, not empty, uuid


        Parameters:
         - session
         - monitoringObjectId

        """
        self.send_getSensorConfigurations(session, monitoringObjectId)
        return self.recv_getSensorConfigurations()

    def send_getSensorConfigurations(self, session, monitoringObjectId):
        self._oprot.writeMessageBegin('getSensorConfigurations', TMessageType.CALL, self._seqid)
        args = getSensorConfigurations_args()
        args.session = session
        args.monitoringObjectId = monitoringObjectId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getSensorConfigurations(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getSensorConfigurations_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getSensorConfigurations failed: unknown result")

    def setSensorConfigurations(self, session, monitoringObjectId, sensorConfigurations):
        """
        Edits monitoring object sensor configurations.
        Fails on invalid expression in one of configuration, duplicate sensor configurations, ...

        @param session - user session, uuid
        @param monitoringObjectId - id of a monitoring object, uuid
        @param sensors - edited sensor configuration list


        Parameters:
         - session
         - monitoringObjectId
         - sensorConfigurations

        """
        self.send_setSensorConfigurations(session, monitoringObjectId, sensorConfigurations)
        self.recv_setSensorConfigurations()

    def send_setSensorConfigurations(self, session, monitoringObjectId, sensorConfigurations):
        self._oprot.writeMessageBegin('setSensorConfigurations', TMessageType.CALL, self._seqid)
        args = setSensorConfigurations_args()
        args.session = session
        args.monitoringObjectId = monitoringObjectId
        args.sensorConfigurations = sensorConfigurations
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_setSensorConfigurations(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = setSensorConfigurations_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        return

    def getTrackSensorConfigurations(self, session, monitoringObjectId):
        """
        Parameters:
         - session
         - monitoringObjectId

        """
        self.send_getTrackSensorConfigurations(session, monitoringObjectId)
        return self.recv_getTrackSensorConfigurations()

    def send_getTrackSensorConfigurations(self, session, monitoringObjectId):
        self._oprot.writeMessageBegin('getTrackSensorConfigurations', TMessageType.CALL, self._seqid)
        args = getTrackSensorConfigurations_args()
        args.session = session
        args.monitoringObjectId = monitoringObjectId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getTrackSensorConfigurations(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getTrackSensorConfigurations_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getTrackSensorConfigurations failed: unknown result")

    def createSensorConfigurationSet(self, session, parentGroupId, name, sensorConfigurations):
        """
        creates sensor configuration set and returns it's

        @param session - user session, uuid
        @param parentGroupId - parent group id, not empty, uuid
        @param name - set name, not empty
        @param list<SensorConfiguration> - list of sensor configurations


        Parameters:
         - session
         - parentGroupId
         - name
         - sensorConfigurations

        """
        self.send_createSensorConfigurationSet(session, parentGroupId, name, sensorConfigurations)
        return self.recv_createSensorConfigurationSet()

    def send_createSensorConfigurationSet(self, session, parentGroupId, name, sensorConfigurations):
        self._oprot.writeMessageBegin('createSensorConfigurationSet', TMessageType.CALL, self._seqid)
        args = createSensorConfigurationSet_args()
        args.session = session
        args.parentGroupId = parentGroupId
        args.name = name
        args.sensorConfigurations = sensorConfigurations
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createSensorConfigurationSet(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createSensorConfigurationSet_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createSensorConfigurationSet failed: unknown result")

    def getSensorConfigurationSet(self, session, id):
        """
        returns sensor configuration set by its id

        @param session - user session
        @param id - set id, not empty, uuid


        Parameters:
         - session
         - id

        """
        self.send_getSensorConfigurationSet(session, id)
        return self.recv_getSensorConfigurationSet()

    def send_getSensorConfigurationSet(self, session, id):
        self._oprot.writeMessageBegin('getSensorConfigurationSet', TMessageType.CALL, self._seqid)
        args = getSensorConfigurationSet_args()
        args.session = session
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getSensorConfigurationSet(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getSensorConfigurationSet_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getSensorConfigurationSet failed: unknown result")

    def getChildSensorConfigurationSet(self, session, parentGroupId, recursive):
        """
        returns list of sensor configuration sets for parent group

        @param session - user session
        @param parentGroupId - parent group id, not empty, uuid
        @param recursive - return all sets from subgroups


        Parameters:
         - session
         - parentGroupId
         - recursive

        """
        self.send_getChildSensorConfigurationSet(session, parentGroupId, recursive)
        return self.recv_getChildSensorConfigurationSet()

    def send_getChildSensorConfigurationSet(self, session, parentGroupId, recursive):
        self._oprot.writeMessageBegin('getChildSensorConfigurationSet', TMessageType.CALL, self._seqid)
        args = getChildSensorConfigurationSet_args()
        args.session = session
        args.parentGroupId = parentGroupId
        args.recursive = recursive
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getChildSensorConfigurationSet(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getChildSensorConfigurationSet_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getChildSensorConfigurationSet failed: unknown result")

    def editSensorConfigurationSet(self, session, sensorConfigurationSet):
        """
        edits existing sensor configuration set

        @param session - user session, uuid
        @param sensorConfigurationSet - set with modified params


        Parameters:
         - session
         - sensorConfigurationSet

        """
        self.send_editSensorConfigurationSet(session, sensorConfigurationSet)
        self.recv_editSensorConfigurationSet()

    def send_editSensorConfigurationSet(self, session, sensorConfigurationSet):
        self._oprot.writeMessageBegin('editSensorConfigurationSet', TMessageType.CALL, self._seqid)
        args = editSensorConfigurationSet_args()
        args.session = session
        args.sensorConfigurationSet = sensorConfigurationSet
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_editSensorConfigurationSet(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = editSensorConfigurationSet_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        return

    def deleteSensorConfigurationSet(self, session, id):
        """
        deletes existing sensor configuration set

        @param session - user session, uuid
        @param id - set id, not empty, uuid


        Parameters:
         - session
         - id

        """
        self.send_deleteSensorConfigurationSet(session, id)
        self.recv_deleteSensorConfigurationSet()

    def send_deleteSensorConfigurationSet(self, session, id):
        self._oprot.writeMessageBegin('deleteSensorConfigurationSet', TMessageType.CALL, self._seqid)
        args = deleteSensorConfigurationSet_args()
        args.session = session
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_deleteSensorConfigurationSet(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = deleteSensorConfigurationSet_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        return

    def getMonitoringObjectChart(self, session, request, columns, lod):
        """
        Parameters:
         - session
         - request
         - columns
         - lod

        """
        self.send_getMonitoringObjectChart(session, request, columns, lod)
        return self.recv_getMonitoringObjectChart()

    def send_getMonitoringObjectChart(self, session, request, columns, lod):
        self._oprot.writeMessageBegin('getMonitoringObjectChart', TMessageType.CALL, self._seqid)
        args = getMonitoringObjectChart_args()
        args.session = session
        args.request = request
        args.columns = columns
        args.lod = lod
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getMonitoringObjectChart(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getMonitoringObjectChart_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getMonitoringObjectChart failed: unknown result")

    def getMonitoringObjectsTracksRects(self, session, requests):
        """
        Parameters:
         - session
         - requests

        """
        self.send_getMonitoringObjectsTracksRects(session, requests)
        return self.recv_getMonitoringObjectsTracksRects()

    def send_getMonitoringObjectsTracksRects(self, session, requests):
        self._oprot.writeMessageBegin('getMonitoringObjectsTracksRects', TMessageType.CALL, self._seqid)
        args = getMonitoringObjectsTracksRects_args()
        args.session = session
        args.requests = requests
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getMonitoringObjectsTracksRects(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getMonitoringObjectsTracksRects_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getMonitoringObjectsTracksRects failed: unknown result")

    def changeVehicleCreationTime(self, session, vehicleId, timestamp):
        """
        change first vehicle's tracker from_timestamp to given value

        @param session - user session, uuid
        @param vehicleId - vehicle id
        @param timestamp - new time


        Parameters:
         - session
         - vehicleId
         - timestamp

        """
        self.send_changeVehicleCreationTime(session, vehicleId, timestamp)
        self.recv_changeVehicleCreationTime()

    def send_changeVehicleCreationTime(self, session, vehicleId, timestamp):
        self._oprot.writeMessageBegin('changeVehicleCreationTime', TMessageType.CALL, self._seqid)
        args = changeVehicleCreationTime_args()
        args.session = session
        args.vehicleId = vehicleId
        args.timestamp = timestamp
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_changeVehicleCreationTime(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = changeVehicleCreationTime_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        return

    def getChildrenReports(self, session, parentGroupId, recursive):
        """
        Parameters:
         - session
         - parentGroupId
         - recursive

        """
        self.send_getChildrenReports(session, parentGroupId, recursive)
        return self.recv_getChildrenReports()

    def send_getChildrenReports(self, session, parentGroupId, recursive):
        self._oprot.writeMessageBegin('getChildrenReports', TMessageType.CALL, self._seqid)
        args = getChildrenReports_args()
        args.session = session
        args.parentGroupId = parentGroupId
        args.recursive = recursive
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getChildrenReports(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getChildrenReports_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getChildrenReports failed: unknown result")

    def sendReport(self, session, email, parameters):
        """
        Parameters:
         - session
         - email
         - parameters

        """
        self.send_sendReport(session, email, parameters)
        self.recv_sendReport()

    def send_sendReport(self, session, email, parameters):
        self._oprot.writeMessageBegin('sendReport', TMessageType.CALL, self._seqid)
        args = sendReport_args()
        args.session = session
        args.email = email
        args.parameters = parameters
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sendReport(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sendReport_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ue is not None:
            raise result.ue
        if result.ade is not None:
            raise result.ade
        if result.one is not None:
            raise result.one
        return

    def buildScreenReport(self, session, parameters):
        """
        Parameters:
         - session
         - parameters

        """
        self.send_buildScreenReport(session, parameters)
        return self.recv_buildScreenReport()

    def send_buildScreenReport(self, session, parameters):
        self._oprot.writeMessageBegin('buildScreenReport', TMessageType.CALL, self._seqid)
        args = buildScreenReport_args()
        args.session = session
        args.parameters = parameters
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_buildScreenReport(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = buildScreenReport_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "buildScreenReport failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["login"] = Processor.process_login
        self._processMap["logout"] = Processor.process_logout
        self._processMap["getUser"] = Processor.process_getUser
        self._processMap["getUserSecurityData"] = Processor.process_getUserSecurityData
        self._processMap["getUsers"] = Processor.process_getUsers
        self._processMap["getCurrentUser"] = Processor.process_getCurrentUser
        self._processMap["getChildrenUsers"] = Processor.process_getChildrenUsers
        self._processMap["createUser"] = Processor.process_createUser
        self._processMap["createUserSecure"] = Processor.process_createUserSecure
        self._processMap["editUser"] = Processor.process_editUser
        self._processMap["deleteUser"] = Processor.process_deleteUser
        self._processMap["changePassword"] = Processor.process_changePassword
        self._processMap["setPassword"] = Processor.process_setPassword
        self._processMap["setPasswordSecure"] = Processor.process_setPasswordSecure
        self._processMap["getRole"] = Processor.process_getRole
        self._processMap["getUserRole"] = Processor.process_getUserRole
        self._processMap["getGroupRoles"] = Processor.process_getGroupRoles
        self._processMap["getGroup"] = Processor.process_getGroup
        self._processMap["getChildrenGroups"] = Processor.process_getChildrenGroups
        self._processMap["getRootGroups"] = Processor.process_getRootGroups
        self._processMap["createGroup"] = Processor.process_createGroup
        self._processMap["createCompany"] = Processor.process_createCompany
        self._processMap["createCompanyWithAdditionalFields"] = Processor.process_createCompanyWithAdditionalFields
        self._processMap["editGroup"] = Processor.process_editGroup
        self._processMap["deleteGroup"] = Processor.process_deleteGroup
        self._processMap["getMonitoringObject"] = Processor.process_getMonitoringObject
        self._processMap["getChildrenMonitoringObjects"] = Processor.process_getChildrenMonitoringObjects
        self._processMap["getMonitoringObjectsPortion"] = Processor.process_getMonitoringObjectsPortion
        self._processMap["getMonitoringObjects"] = Processor.process_getMonitoringObjects
        self._processMap["createMonitoringObject"] = Processor.process_createMonitoringObject
        self._processMap["createMonitoringObjectWithAdditionalFields"] = Processor.process_createMonitoringObjectWithAdditionalFields
        self._processMap["createMonitoringObjectByObjectDescription"] = Processor.process_createMonitoringObjectByObjectDescription
        self._processMap["editMonitoringObject"] = Processor.process_editMonitoringObject
        self._processMap["deleteMonitoringObject"] = Processor.process_deleteMonitoringObject
        self._processMap["getMonitoringObjectEvents"] = Processor.process_getMonitoringObjectEvents
        self._processMap["getMonitoringObjectEventsSince"] = Processor.process_getMonitoringObjectEventsSince
        self._processMap["getMonitoringObjectIcons"] = Processor.process_getMonitoringObjectIcons
        self._processMap["reportRoadAccident"] = Processor.process_reportRoadAccident
        self._processMap["getMonitoringObjectCommands"] = Processor.process_getMonitoringObjectCommands
        self._processMap["executeCommand"] = Processor.process_executeCommand
        self._processMap["getCommandsStatus"] = Processor.process_getCommandsStatus
        self._processMap["startRelayingVehicles"] = Processor.process_startRelayingVehicles
        self._processMap["getRelayingTracks"] = Processor.process_getRelayingTracks
        self._processMap["getRelayingTracksEx"] = Processor.process_getRelayingTracksEx
        self._processMap["getMonitoringObjectsTracks"] = Processor.process_getMonitoringObjectsTracks
        self._processMap["getClippedMonitoringObjectTracks"] = Processor.process_getClippedMonitoringObjectTracks
        self._processMap["getMonitoringObjectTrackGroupedDetails"] = Processor.process_getMonitoringObjectTrackGroupedDetails
        self._processMap["getRecentPositions"] = Processor.process_getRecentPositions
        self._processMap["getRecentPositionsWithAllColumns"] = Processor.process_getRecentPositionsWithAllColumns
        self._processMap["enableVehicle"] = Processor.process_enableVehicle
        self._processMap["setTrackerStatus"] = Processor.process_setTrackerStatus
        self._processMap["getTrackerStatusHistory"] = Processor.process_getTrackerStatusHistory
        self._processMap["getTrackersCertificate"] = Processor.process_getTrackersCertificate
        self._processMap["setTrackerCertificate"] = Processor.process_setTrackerCertificate
        self._processMap["removeTrackersCertificate"] = Processor.process_removeTrackersCertificate
        self._processMap["isVehicleEnabled"] = Processor.process_isVehicleEnabled
        self._processMap["getRecentPositionsWithValidGPS"] = Processor.process_getRecentPositionsWithValidGPS
        self._processMap["reportBrokenTracker"] = Processor.process_reportBrokenTracker
        self._processMap["getGeopointsAddresses"] = Processor.process_getGeopointsAddresses
        self._processMap["getCompanyStatistics"] = Processor.process_getCompanyStatistics
        self._processMap["getRelay"] = Processor.process_getRelay
        self._processMap["getChildRelays"] = Processor.process_getChildRelays
        self._processMap["createRelay"] = Processor.process_createRelay
        self._processMap["editRelay"] = Processor.process_editRelay
        self._processMap["deleteRelay"] = Processor.process_deleteRelay
        self._processMap["getGeofence"] = Processor.process_getGeofence
        self._processMap["getChildGeofences"] = Processor.process_getChildGeofences
        self._processMap["getGeofenceGeometryWKT"] = Processor.process_getGeofenceGeometryWKT
        self._processMap["createGeofence"] = Processor.process_createGeofence
        self._processMap["editGeofence"] = Processor.process_editGeofence
        self._processMap["editGeofenceGeometryWKT"] = Processor.process_editGeofenceGeometryWKT
        self._processMap["deleteGeofence"] = Processor.process_deleteGeofence
        self._processMap["getPlace"] = Processor.process_getPlace
        self._processMap["getChildPlaces"] = Processor.process_getChildPlaces
        self._processMap["createPlace"] = Processor.process_createPlace
        self._processMap["editPlace"] = Processor.process_editPlace
        self._processMap["deletePlace"] = Processor.process_deletePlace
        self._processMap["getRoute"] = Processor.process_getRoute
        self._processMap["getChildRoutes"] = Processor.process_getChildRoutes
        self._processMap["getRouteLines"] = Processor.process_getRouteLines
        self._processMap["createRoute"] = Processor.process_createRoute
        self._processMap["editRoute"] = Processor.process_editRoute
        self._processMap["deleteRoute"] = Processor.process_deleteRoute
        self._processMap["calculateRouteGeometry"] = Processor.process_calculateRouteGeometry
        self._processMap["getEventsRule"] = Processor.process_getEventsRule
        self._processMap["getChildEventsRules"] = Processor.process_getChildEventsRules
        self._processMap["createEventsRule"] = Processor.process_createEventsRule
        self._processMap["editEventsRule"] = Processor.process_editEventsRule
        self._processMap["deleteEventsRule"] = Processor.process_deleteEventsRule
        self._processMap["getTripsInfo"] = Processor.process_getTripsInfo
        self._processMap["getTripsId"] = Processor.process_getTripsId
        self._processMap["getMonitoringObjectsTrips"] = Processor.process_getMonitoringObjectsTrips
        self._processMap["createTrip"] = Processor.process_createTrip
        self._processMap["createTripWithAdditionalFields"] = Processor.process_createTripWithAdditionalFields
        self._processMap["editTrip"] = Processor.process_editTrip
        self._processMap["deleteTrip"] = Processor.process_deleteTrip
        self._processMap["cancelTrip"] = Processor.process_cancelTrip
        self._processMap["getTripEvents"] = Processor.process_getTripEvents
        self._processMap["getClippedTripTracks"] = Processor.process_getClippedTripTracks
        self._processMap["getStoreScheme"] = Processor.process_getStoreScheme
        self._processMap["getAdditionalFieldsScheme"] = Processor.process_getAdditionalFieldsScheme
        self._processMap["createStoreScheme"] = Processor.process_createStoreScheme
        self._processMap["deleteStoreScheme"] = Processor.process_deleteStoreScheme
        self._processMap["editStoreScheme"] = Processor.process_editStoreScheme
        self._processMap["getCountries"] = Processor.process_getCountries
        self._processMap["getCities"] = Processor.process_getCities
        self._processMap["getStreets"] = Processor.process_getStreets
        self._processMap["getBuildings"] = Processor.process_getBuildings
        self._processMap["getPoint"] = Processor.process_getPoint
        self._processMap["getSensorConfigurations"] = Processor.process_getSensorConfigurations
        self._processMap["setSensorConfigurations"] = Processor.process_setSensorConfigurations
        self._processMap["getTrackSensorConfigurations"] = Processor.process_getTrackSensorConfigurations
        self._processMap["createSensorConfigurationSet"] = Processor.process_createSensorConfigurationSet
        self._processMap["getSensorConfigurationSet"] = Processor.process_getSensorConfigurationSet
        self._processMap["getChildSensorConfigurationSet"] = Processor.process_getChildSensorConfigurationSet
        self._processMap["editSensorConfigurationSet"] = Processor.process_editSensorConfigurationSet
        self._processMap["deleteSensorConfigurationSet"] = Processor.process_deleteSensorConfigurationSet
        self._processMap["getMonitoringObjectChart"] = Processor.process_getMonitoringObjectChart
        self._processMap["getMonitoringObjectsTracksRects"] = Processor.process_getMonitoringObjectsTracksRects
        self._processMap["changeVehicleCreationTime"] = Processor.process_changeVehicleCreationTime
        self._processMap["getChildrenReports"] = Processor.process_getChildrenReports
        self._processMap["sendReport"] = Processor.process_sendReport
        self._processMap["buildScreenReport"] = Processor.process_buildScreenReport
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_login(self, seqid, iprot, oprot):
        args = login_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = login_result()
        try:
            result.success = self._handler.login(args.userLoginName, args.password, args.longSession)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except UserLicenseExpired as ule:
            msg_type = TMessageType.REPLY
            result.ule = ule
        except TrialIsNotActivated as tne:
            msg_type = TMessageType.REPLY
            result.tne = tne
        except LoginFailed as lfe:
            msg_type = TMessageType.REPLY
            result.lfe = lfe
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("login", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_logout(self, seqid, iprot, oprot):
        args = logout_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = logout_result()
        try:
            self._handler.logout(args.session)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("logout", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getUser(self, seqid, iprot, oprot):
        args = getUser_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getUser_result()
        try:
            result.success = self._handler.getUser(args.session, args.id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getUser", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getUserSecurityData(self, seqid, iprot, oprot):
        args = getUserSecurityData_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getUserSecurityData_result()
        try:
            result.success = self._handler.getUserSecurityData(args.session, args.id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getUserSecurityData", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getUsers(self, seqid, iprot, oprot):
        args = getUsers_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getUsers_result()
        try:
            result.success = self._handler.getUsers(args.session, args.filter, args.optionalParams)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getUsers", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getCurrentUser(self, seqid, iprot, oprot):
        args = getCurrentUser_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getCurrentUser_result()
        try:
            result.success = self._handler.getCurrentUser(args.session)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getCurrentUser", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getChildrenUsers(self, seqid, iprot, oprot):
        args = getChildrenUsers_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getChildrenUsers_result()
        try:
            result.success = self._handler.getChildrenUsers(args.session, args.parentGroupId, args.recursive)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getChildrenUsers", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_createUser(self, seqid, iprot, oprot):
        args = createUser_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createUser_result()
        try:
            result.success = self._handler.createUser(args.session, args.parentGroupId, args.login, args.password, args.roleId, args.groupLink, args.welcomeName, args.email, args.phone)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except LoginAlreadyExists as le:
            msg_type = TMessageType.REPLY
            result.le = le
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("createUser", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_createUserSecure(self, seqid, iprot, oprot):
        args = createUserSecure_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createUserSecure_result()
        try:
            result.success = self._handler.createUserSecure(args.session, args.parentGroupId, args.login, args.passwordHash, args.passwordSalt, args.roleId, args.groupLink, args.welcomeName, args.email, args.phone)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except LoginAlreadyExists as le:
            msg_type = TMessageType.REPLY
            result.le = le
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("createUserSecure", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_editUser(self, seqid, iprot, oprot):
        args = editUser_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = editUser_result()
        try:
            self._handler.editUser(args.session, args.data)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except LoginAlreadyExists as lae:
            msg_type = TMessageType.REPLY
            result.lae = lae
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("editUser", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_deleteUser(self, seqid, iprot, oprot):
        args = deleteUser_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = deleteUser_result()
        try:
            self._handler.deleteUser(args.session, args.id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ad:
            msg_type = TMessageType.REPLY
            result.ad = ad
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("deleteUser", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_changePassword(self, seqid, iprot, oprot):
        args = changePassword_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = changePassword_result()
        try:
            self._handler.changePassword(args.session, args.oldPassword, args.newPassword)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("changePassword", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_setPassword(self, seqid, iprot, oprot):
        args = setPassword_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = setPassword_result()
        try:
            self._handler.setPassword(args.session, args.userId, args.newPassword)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("setPassword", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_setPasswordSecure(self, seqid, iprot, oprot):
        args = setPasswordSecure_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = setPasswordSecure_result()
        try:
            self._handler.setPasswordSecure(args.session, args.userId, args.newPasswordHash, args.newPasswordSalt)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("setPasswordSecure", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getRole(self, seqid, iprot, oprot):
        args = getRole_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getRole_result()
        try:
            result.success = self._handler.getRole(args.session, args.id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getRole", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getUserRole(self, seqid, iprot, oprot):
        args = getUserRole_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getUserRole_result()
        try:
            result.success = self._handler.getUserRole(args.session, args.userId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getUserRole", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getGroupRoles(self, seqid, iprot, oprot):
        args = getGroupRoles_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getGroupRoles_result()
        try:
            result.success = self._handler.getGroupRoles(args.session, args.parentGroupId, args.recursive)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getGroupRoles", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getGroup(self, seqid, iprot, oprot):
        args = getGroup_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getGroup_result()
        try:
            result.success = self._handler.getGroup(args.session, args.id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ad:
            msg_type = TMessageType.REPLY
            result.ad = ad
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getGroup", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getChildrenGroups(self, seqid, iprot, oprot):
        args = getChildrenGroups_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getChildrenGroups_result()
        try:
            result.success = self._handler.getChildrenGroups(args.session, args.parentGroupId, args.recursive)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ad:
            msg_type = TMessageType.REPLY
            result.ad = ad
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getChildrenGroups", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getRootGroups(self, seqid, iprot, oprot):
        args = getRootGroups_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getRootGroups_result()
        try:
            result.success = self._handler.getRootGroups(args.session)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ad:
            msg_type = TMessageType.REPLY
            result.ad = ad
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getRootGroups", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_createGroup(self, seqid, iprot, oprot):
        args = createGroup_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createGroup_result()
        try:
            result.success = self._handler.createGroup(args.session, args.parentGroupId, args.title)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ad:
            msg_type = TMessageType.REPLY
            result.ad = ad
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("createGroup", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_createCompany(self, seqid, iprot, oprot):
        args = createCompany_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createCompany_result()
        try:
            result.success = self._handler.createCompany(args.session, args.parentGroupId, args.title, args.license)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ad:
            msg_type = TMessageType.REPLY
            result.ad = ad
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("createCompany", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_createCompanyWithAdditionalFields(self, seqid, iprot, oprot):
        args = createCompanyWithAdditionalFields_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createCompanyWithAdditionalFields_result()
        try:
            result.success = self._handler.createCompanyWithAdditionalFields(args.session, args.parentGroupId, args.title, args.license, args.additionalFields)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ad:
            msg_type = TMessageType.REPLY
            result.ad = ad
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("createCompanyWithAdditionalFields", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_editGroup(self, seqid, iprot, oprot):
        args = editGroup_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = editGroup_result()
        try:
            self._handler.editGroup(args.session, args.data)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("editGroup", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_deleteGroup(self, seqid, iprot, oprot):
        args = deleteGroup_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = deleteGroup_result()
        try:
            self._handler.deleteGroup(args.session, args.id, args.cascade)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ad:
            msg_type = TMessageType.REPLY
            result.ad = ad
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("deleteGroup", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getMonitoringObject(self, seqid, iprot, oprot):
        args = getMonitoringObject_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getMonitoringObject_result()
        try:
            result.success = self._handler.getMonitoringObject(args.session, args.id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ad:
            msg_type = TMessageType.REPLY
            result.ad = ad
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getMonitoringObject", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getChildrenMonitoringObjects(self, seqid, iprot, oprot):
        args = getChildrenMonitoringObjects_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getChildrenMonitoringObjects_result()
        try:
            result.success = self._handler.getChildrenMonitoringObjects(args.session, args.parentGroupId, args.recursive)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ad:
            msg_type = TMessageType.REPLY
            result.ad = ad
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getChildrenMonitoringObjects", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getMonitoringObjectsPortion(self, seqid, iprot, oprot):
        args = getMonitoringObjectsPortion_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getMonitoringObjectsPortion_result()
        try:
            result.success = self._handler.getMonitoringObjectsPortion(args.session, args.filter, args.offset, args.limit)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except AccessDenied as ad:
            msg_type = TMessageType.REPLY
            result.ad = ad
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getMonitoringObjectsPortion", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getMonitoringObjects(self, seqid, iprot, oprot):
        args = getMonitoringObjects_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getMonitoringObjects_result()
        try:
            result.success = self._handler.getMonitoringObjects(args.session, args.filter, args.filterType)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except AccessDenied as ad:
            msg_type = TMessageType.REPLY
            result.ad = ad
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getMonitoringObjects", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_createMonitoringObject(self, seqid, iprot, oprot):
        args = createMonitoringObject_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createMonitoringObject_result()
        try:
            result.success = self._handler.createMonitoringObject(args.session, args.parentGroupId, args.tracker, args.name, args.displayColor, args.displayIcon)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ad:
            msg_type = TMessageType.REPLY
            result.ad = ad
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TrackerAlreadyUsed as tau:
            msg_type = TMessageType.REPLY
            result.tau = tau
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("createMonitoringObject", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_createMonitoringObjectWithAdditionalFields(self, seqid, iprot, oprot):
        args = createMonitoringObjectWithAdditionalFields_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createMonitoringObjectWithAdditionalFields_result()
        try:
            result.success = self._handler.createMonitoringObjectWithAdditionalFields(args.session, args.parentGroupId, args.tracker, args.name, args.displayColor, args.displayIcon, args.additionalFields)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ad:
            msg_type = TMessageType.REPLY
            result.ad = ad
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TrackerAlreadyUsed as tau:
            msg_type = TMessageType.REPLY
            result.tau = tau
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("createMonitoringObjectWithAdditionalFields", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_createMonitoringObjectByObjectDescription(self, seqid, iprot, oprot):
        args = createMonitoringObjectByObjectDescription_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createMonitoringObjectByObjectDescription_result()
        try:
            result.success = self._handler.createMonitoringObjectByObjectDescription(args.session, args.data)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ad:
            msg_type = TMessageType.REPLY
            result.ad = ad
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TrackerAlreadyUsed as tau:
            msg_type = TMessageType.REPLY
            result.tau = tau
        except ObjectIdMustBeEmptyOnObjectCreation as imbe:
            msg_type = TMessageType.REPLY
            result.imbe = imbe
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("createMonitoringObjectByObjectDescription", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_editMonitoringObject(self, seqid, iprot, oprot):
        args = editMonitoringObject_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = editMonitoringObject_result()
        try:
            self._handler.editMonitoringObject(args.session, args.data)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TrackerAlreadyUsed as tau:
            msg_type = TMessageType.REPLY
            result.tau = tau
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("editMonitoringObject", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_deleteMonitoringObject(self, seqid, iprot, oprot):
        args = deleteMonitoringObject_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = deleteMonitoringObject_result()
        try:
            self._handler.deleteMonitoringObject(args.session, args.id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ad:
            msg_type = TMessageType.REPLY
            result.ad = ad
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("deleteMonitoringObject", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getMonitoringObjectEvents(self, seqid, iprot, oprot):
        args = getMonitoringObjectEvents_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getMonitoringObjectEvents_result()
        try:
            result.success = self._handler.getMonitoringObjectEvents(args.session, args.monitoringObjectIdList, args.startDate, args.endDate)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ad:
            msg_type = TMessageType.REPLY
            result.ad = ad
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getMonitoringObjectEvents", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getMonitoringObjectEventsSince(self, seqid, iprot, oprot):
        args = getMonitoringObjectEventsSince_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getMonitoringObjectEventsSince_result()
        try:
            result.success = self._handler.getMonitoringObjectEventsSince(args.session, args.monitoringObjectIdList, args.startDate, args.startMonotonicIndex, args.limit)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ad:
            msg_type = TMessageType.REPLY
            result.ad = ad
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getMonitoringObjectEventsSince", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getMonitoringObjectIcons(self, seqid, iprot, oprot):
        args = getMonitoringObjectIcons_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getMonitoringObjectIcons_result()
        try:
            result.success = self._handler.getMonitoringObjectIcons(args.session, args.filter)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ad:
            msg_type = TMessageType.REPLY
            result.ad = ad
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getMonitoringObjectIcons", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_reportRoadAccident(self, seqid, iprot, oprot):
        args = reportRoadAccident_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = reportRoadAccident_result()
        try:
            self._handler.reportRoadAccident(args.session, args.monitoringObjectId, args.eventParams)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ad:
            msg_type = TMessageType.REPLY
            result.ad = ad
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("reportRoadAccident", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getMonitoringObjectCommands(self, seqid, iprot, oprot):
        args = getMonitoringObjectCommands_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getMonitoringObjectCommands_result()
        try:
            result.success = self._handler.getMonitoringObjectCommands(args.session, args.monitoringObjectId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ad:
            msg_type = TMessageType.REPLY
            result.ad = ad
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getMonitoringObjectCommands", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_executeCommand(self, seqid, iprot, oprot):
        args = executeCommand_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = executeCommand_result()
        try:
            result.success = self._handler.executeCommand(args.session, args.commandId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ad:
            msg_type = TMessageType.REPLY
            result.ad = ad
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("executeCommand", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getCommandsStatus(self, seqid, iprot, oprot):
        args = getCommandsStatus_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getCommandsStatus_result()
        try:
            result.success = self._handler.getCommandsStatus(args.session, args.monitoringObjectId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ad:
            msg_type = TMessageType.REPLY
            result.ad = ad
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getCommandsStatus", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_startRelayingVehicles(self, seqid, iprot, oprot):
        args = startRelayingVehicles_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = startRelayingVehicles_result()
        try:
            result.success = self._handler.startRelayingVehicles(args.session, args.requests, args.columns, args.messageLimit)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("startRelayingVehicles", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getRelayingTracks(self, seqid, iprot, oprot):
        args = getRelayingTracks_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getRelayingTracks_result()
        try:
            result.success = self._handler.getRelayingTracks(args.relayingSession)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except thrif.dispatch.common.ttypes.RelaySessionError as rse:
            msg_type = TMessageType.REPLY
            result.rse = rse
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getRelayingTracks", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getRelayingTracksEx(self, seqid, iprot, oprot):
        args = getRelayingTracksEx_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getRelayingTracksEx_result()
        try:
            result.success = self._handler.getRelayingTracksEx(args.request)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except thrif.dispatch.common.ttypes.RelaySessionError as rse:
            msg_type = TMessageType.REPLY
            result.rse = rse
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getRelayingTracksEx", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getMonitoringObjectsTracks(self, seqid, iprot, oprot):
        args = getMonitoringObjectsTracks_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getMonitoringObjectsTracks_result()
        try:
            result.success = self._handler.getMonitoringObjectsTracks(args.session, args.requests, args.columns, args.messageLimit)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getMonitoringObjectsTracks", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getClippedMonitoringObjectTracks(self, seqid, iprot, oprot):
        args = getClippedMonitoringObjectTracks_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getClippedMonitoringObjectTracks_result()
        try:
            result.success = self._handler.getClippedMonitoringObjectTracks(args.session, args.request, args.columns, args.viewport, args.useAdditionalTrackSplitting)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getClippedMonitoringObjectTracks", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getMonitoringObjectTrackGroupedDetails(self, seqid, iprot, oprot):
        args = getMonitoringObjectTrackGroupedDetails_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getMonitoringObjectTrackGroupedDetails_result()
        try:
            result.success = self._handler.getMonitoringObjectTrackGroupedDetails(args.session, args.request)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getMonitoringObjectTrackGroupedDetails", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getRecentPositions(self, seqid, iprot, oprot):
        args = getRecentPositions_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getRecentPositions_result()
        try:
            result.success = self._handler.getRecentPositions(args.session, args.vehicleUuids, args.columns)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getRecentPositions", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getRecentPositionsWithAllColumns(self, seqid, iprot, oprot):
        args = getRecentPositionsWithAllColumns_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getRecentPositionsWithAllColumns_result()
        try:
            result.success = self._handler.getRecentPositionsWithAllColumns(args.session, args.vehicleUuids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getRecentPositionsWithAllColumns", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_enableVehicle(self, seqid, iprot, oprot):
        args = enableVehicle_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = enableVehicle_result()
        try:
            self._handler.enableVehicle(args.session, args.vehicleId, args.enable)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ad:
            msg_type = TMessageType.REPLY
            result.ad = ad
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("enableVehicle", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_setTrackerStatus(self, seqid, iprot, oprot):
        args = setTrackerStatus_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = setTrackerStatus_result()
        try:
            self._handler.setTrackerStatus(args.session, args.monitoringObjectId, args.status)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ad:
            msg_type = TMessageType.REPLY
            result.ad = ad
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("setTrackerStatus", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getTrackerStatusHistory(self, seqid, iprot, oprot):
        args = getTrackerStatusHistory_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getTrackerStatusHistory_result()
        try:
            result.success = self._handler.getTrackerStatusHistory(args.session, args.monitoringObjectId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ad:
            msg_type = TMessageType.REPLY
            result.ad = ad
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getTrackerStatusHistory", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getTrackersCertificate(self, seqid, iprot, oprot):
        args = getTrackersCertificate_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getTrackersCertificate_result()
        try:
            result.success = self._handler.getTrackersCertificate(args.session, args.monitoringObjectIds)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ad:
            msg_type = TMessageType.REPLY
            result.ad = ad
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getTrackersCertificate", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_setTrackerCertificate(self, seqid, iprot, oprot):
        args = setTrackerCertificate_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = setTrackerCertificate_result()
        try:
            self._handler.setTrackerCertificate(args.session, args.certificate)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ad:
            msg_type = TMessageType.REPLY
            result.ad = ad
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("setTrackerCertificate", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_removeTrackersCertificate(self, seqid, iprot, oprot):
        args = removeTrackersCertificate_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = removeTrackersCertificate_result()
        try:
            self._handler.removeTrackersCertificate(args.session, args.monitoringObjectIds)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ad:
            msg_type = TMessageType.REPLY
            result.ad = ad
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("removeTrackersCertificate", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_isVehicleEnabled(self, seqid, iprot, oprot):
        args = isVehicleEnabled_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = isVehicleEnabled_result()
        try:
            result.success = self._handler.isVehicleEnabled(args.session, args.vehicleId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ad:
            msg_type = TMessageType.REPLY
            result.ad = ad
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("isVehicleEnabled", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getRecentPositionsWithValidGPS(self, seqid, iprot, oprot):
        args = getRecentPositionsWithValidGPS_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getRecentPositionsWithValidGPS_result()
        try:
            result.success = self._handler.getRecentPositionsWithValidGPS(args.session, args.vehicleUuids, args.columns)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getRecentPositionsWithValidGPS", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_reportBrokenTracker(self, seqid, iprot, oprot):
        args = reportBrokenTracker_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = reportBrokenTracker_result()
        try:
            self._handler.reportBrokenTracker(args.session, args.request)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as onfe:
            msg_type = TMessageType.REPLY
            result.onfe = onfe
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("reportBrokenTracker", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getGeopointsAddresses(self, seqid, iprot, oprot):
        args = getGeopointsAddresses_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getGeopointsAddresses_result()
        try:
            result.success = self._handler.getGeopointsAddresses(args.session, args.points)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getGeopointsAddresses", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getCompanyStatistics(self, seqid, iprot, oprot):
        args = getCompanyStatistics_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getCompanyStatistics_result()
        try:
            result.success = self._handler.getCompanyStatistics(args.session, args.startDate, args.endDate, args.companyUUIDs)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ad:
            msg_type = TMessageType.REPLY
            result.ad = ad
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getCompanyStatistics", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getRelay(self, seqid, iprot, oprot):
        args = getRelay_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getRelay_result()
        try:
            result.success = self._handler.getRelay(args.session, args.id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getRelay", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getChildRelays(self, seqid, iprot, oprot):
        args = getChildRelays_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getChildRelays_result()
        try:
            result.success = self._handler.getChildRelays(args.session, args.parentGroupId, args.recursive)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getChildRelays", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_createRelay(self, seqid, iprot, oprot):
        args = createRelay_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createRelay_result()
        try:
            result.success = self._handler.createRelay(args.session, args.title, args.parentGroupId, args.protocol, args.enabled, args.monitoringObjectsIds, args.host, args.optionalParams)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("createRelay", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_editRelay(self, seqid, iprot, oprot):
        args = editRelay_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = editRelay_result()
        try:
            self._handler.editRelay(args.session, args.relay)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("editRelay", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_deleteRelay(self, seqid, iprot, oprot):
        args = deleteRelay_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = deleteRelay_result()
        try:
            self._handler.deleteRelay(args.session, args.id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("deleteRelay", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getGeofence(self, seqid, iprot, oprot):
        args = getGeofence_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getGeofence_result()
        try:
            result.success = self._handler.getGeofence(args.session, args.id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getGeofence", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getChildGeofences(self, seqid, iprot, oprot):
        args = getChildGeofences_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getChildGeofences_result()
        try:
            result.success = self._handler.getChildGeofences(args.session, args.parentGroupId, args.recursive)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getChildGeofences", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getGeofenceGeometryWKT(self, seqid, iprot, oprot):
        args = getGeofenceGeometryWKT_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getGeofenceGeometryWKT_result()
        try:
            result.success = self._handler.getGeofenceGeometryWKT(args.session, args.id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getGeofenceGeometryWKT", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_createGeofence(self, seqid, iprot, oprot):
        args = createGeofence_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createGeofence_result()
        try:
            result.success = self._handler.createGeofence(args.session, args.parentGroupId, args.title, args.color, args.geometryWKT)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("createGeofence", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_editGeofence(self, seqid, iprot, oprot):
        args = editGeofence_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = editGeofence_result()
        try:
            self._handler.editGeofence(args.session, args.geofence)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("editGeofence", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_editGeofenceGeometryWKT(self, seqid, iprot, oprot):
        args = editGeofenceGeometryWKT_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = editGeofenceGeometryWKT_result()
        try:
            self._handler.editGeofenceGeometryWKT(args.session, args.id, args.geometryWKT)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("editGeofenceGeometryWKT", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_deleteGeofence(self, seqid, iprot, oprot):
        args = deleteGeofence_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = deleteGeofence_result()
        try:
            self._handler.deleteGeofence(args.session, args.id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("deleteGeofence", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getPlace(self, seqid, iprot, oprot):
        args = getPlace_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getPlace_result()
        try:
            result.success = self._handler.getPlace(args.session, args.id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getPlace", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getChildPlaces(self, seqid, iprot, oprot):
        args = getChildPlaces_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getChildPlaces_result()
        try:
            result.success = self._handler.getChildPlaces(args.session, args.parentGroupId, args.recursive)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getChildPlaces", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_createPlace(self, seqid, iprot, oprot):
        args = createPlace_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createPlace_result()
        try:
            result.success = self._handler.createPlace(args.session, args.parentGroupId, args.title, args.position)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("createPlace", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_editPlace(self, seqid, iprot, oprot):
        args = editPlace_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = editPlace_result()
        try:
            self._handler.editPlace(args.session, args.place)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("editPlace", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_deletePlace(self, seqid, iprot, oprot):
        args = deletePlace_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = deletePlace_result()
        try:
            self._handler.deletePlace(args.session, args.id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("deletePlace", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getRoute(self, seqid, iprot, oprot):
        args = getRoute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getRoute_result()
        try:
            result.success = self._handler.getRoute(args.session, args.routeId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getRoute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getChildRoutes(self, seqid, iprot, oprot):
        args = getChildRoutes_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getChildRoutes_result()
        try:
            result.success = self._handler.getChildRoutes(args.session, args.parentGroupId, args.recursive)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getChildRoutes", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getRouteLines(self, seqid, iprot, oprot):
        args = getRouteLines_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getRouteLines_result()
        try:
            result.success = self._handler.getRouteLines(args.session, args.routeId, args.viewport)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getRouteLines", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_createRoute(self, seqid, iprot, oprot):
        args = createRoute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createRoute_result()
        try:
            result.success = self._handler.createRoute(args.session, args.parentGroupId, args.title, args.color, args.coridorWidth, args.routeControlMethod, args.vehicleRoutingType, args.routeStageSets)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("createRoute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_editRoute(self, seqid, iprot, oprot):
        args = editRoute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = editRoute_result()
        try:
            result.success = self._handler.editRoute(args.session, args.route)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("editRoute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_deleteRoute(self, seqid, iprot, oprot):
        args = deleteRoute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = deleteRoute_result()
        try:
            self._handler.deleteRoute(args.session, args.id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as be:
            msg_type = TMessageType.REPLY
            result.be = be
        except InternalServerError as iee:
            msg_type = TMessageType.REPLY
            result.iee = iee
        except Unauthorized as uae:
            msg_type = TMessageType.REPLY
            result.uae = uae
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as nfe:
            msg_type = TMessageType.REPLY
            result.nfe = nfe
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("deleteRoute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_calculateRouteGeometry(self, seqid, iprot, oprot):
        args = calculateRouteGeometry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = calculateRouteGeometry_result()
        try:
            result.success = self._handler.calculateRouteGeometry(args.session, args.stages, args.routingType, args.viewport)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("calculateRouteGeometry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getEventsRule(self, seqid, iprot, oprot):
        args = getEventsRule_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getEventsRule_result()
        try:
            result.success = self._handler.getEventsRule(args.session, args.id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as be:
            msg_type = TMessageType.REPLY
            result.be = be
        except InternalServerError as iee:
            msg_type = TMessageType.REPLY
            result.iee = iee
        except Unauthorized as uae:
            msg_type = TMessageType.REPLY
            result.uae = uae
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as nfe:
            msg_type = TMessageType.REPLY
            result.nfe = nfe
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getEventsRule", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getChildEventsRules(self, seqid, iprot, oprot):
        args = getChildEventsRules_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getChildEventsRules_result()
        try:
            result.success = self._handler.getChildEventsRules(args.session, args.parentGroupId, args.recursive)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as be:
            msg_type = TMessageType.REPLY
            result.be = be
        except InternalServerError as iee:
            msg_type = TMessageType.REPLY
            result.iee = iee
        except Unauthorized as uae:
            msg_type = TMessageType.REPLY
            result.uae = uae
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as nfe:
            msg_type = TMessageType.REPLY
            result.nfe = nfe
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getChildEventsRules", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_createEventsRule(self, seqid, iprot, oprot):
        args = createEventsRule_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createEventsRule_result()
        try:
            result.success = self._handler.createEventsRule(args.session, args.parentGroupId, args.title, args.monitoringObjectIds, args.eventsConditions, args.eventsConditionsAreDisjunctive, args.generatedEventType, args.actionsCondition, args.actions)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as be:
            msg_type = TMessageType.REPLY
            result.be = be
        except InternalServerError as iee:
            msg_type = TMessageType.REPLY
            result.iee = iee
        except Unauthorized as uae:
            msg_type = TMessageType.REPLY
            result.uae = uae
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("createEventsRule", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_editEventsRule(self, seqid, iprot, oprot):
        args = editEventsRule_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = editEventsRule_result()
        try:
            self._handler.editEventsRule(args.session, args.modifiedRule)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as be:
            msg_type = TMessageType.REPLY
            result.be = be
        except InternalServerError as iee:
            msg_type = TMessageType.REPLY
            result.iee = iee
        except Unauthorized as uae:
            msg_type = TMessageType.REPLY
            result.uae = uae
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as nfe:
            msg_type = TMessageType.REPLY
            result.nfe = nfe
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("editEventsRule", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_deleteEventsRule(self, seqid, iprot, oprot):
        args = deleteEventsRule_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = deleteEventsRule_result()
        try:
            self._handler.deleteEventsRule(args.session, args.id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as be:
            msg_type = TMessageType.REPLY
            result.be = be
        except InternalServerError as iee:
            msg_type = TMessageType.REPLY
            result.iee = iee
        except Unauthorized as uae:
            msg_type = TMessageType.REPLY
            result.uae = uae
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as nfe:
            msg_type = TMessageType.REPLY
            result.nfe = nfe
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("deleteEventsRule", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getTripsInfo(self, seqid, iprot, oprot):
        args = getTripsInfo_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getTripsInfo_result()
        try:
            result.success = self._handler.getTripsInfo(args.session, args.tripsId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getTripsInfo", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getTripsId(self, seqid, iprot, oprot):
        args = getTripsId_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getTripsId_result()
        try:
            result.success = self._handler.getTripsId(args.session, args.parentGroupId, args.allowableStatuses, args.recursive)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getTripsId", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getMonitoringObjectsTrips(self, seqid, iprot, oprot):
        args = getMonitoringObjectsTrips_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getMonitoringObjectsTrips_result()
        try:
            result.success = self._handler.getMonitoringObjectsTrips(args.session, args.monitoringObjectsId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getMonitoringObjectsTrips", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_createTrip(self, seqid, iprot, oprot):
        args = createTrip_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createTrip_result()
        try:
            result.success = self._handler.createTrip(args.session, args.vehicleId, args.routeId, args.tripStageSets, args.startTripUnixTime, args.abortTripUnixTime, args.notificationParams)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("createTrip", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_createTripWithAdditionalFields(self, seqid, iprot, oprot):
        args = createTripWithAdditionalFields_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createTripWithAdditionalFields_result()
        try:
            result.success = self._handler.createTripWithAdditionalFields(args.session, args.vehicleId, args.routeId, args.tripStageSets, args.startTripUnixTime, args.abortTripUnixTime, args.notificationParams, args.additionalFields)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("createTripWithAdditionalFields", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_editTrip(self, seqid, iprot, oprot):
        args = editTrip_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = editTrip_result()
        try:
            self._handler.editTrip(args.session, args.trip)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("editTrip", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_deleteTrip(self, seqid, iprot, oprot):
        args = deleteTrip_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = deleteTrip_result()
        try:
            self._handler.deleteTrip(args.session, args.id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("deleteTrip", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_cancelTrip(self, seqid, iprot, oprot):
        args = cancelTrip_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = cancelTrip_result()
        try:
            self._handler.cancelTrip(args.session, args.id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("cancelTrip", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getTripEvents(self, seqid, iprot, oprot):
        args = getTripEvents_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getTripEvents_result()
        try:
            result.success = self._handler.getTripEvents(args.session, args.tripIds, args.eventTypes, args.globalMonotonicIndex)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as be:
            msg_type = TMessageType.REPLY
            result.be = be
        except InternalServerError as iee:
            msg_type = TMessageType.REPLY
            result.iee = iee
        except Unauthorized as uae:
            msg_type = TMessageType.REPLY
            result.uae = uae
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as nfe:
            msg_type = TMessageType.REPLY
            result.nfe = nfe
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getTripEvents", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getClippedTripTracks(self, seqid, iprot, oprot):
        args = getClippedTripTracks_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getClippedTripTracks_result()
        try:
            result.success = self._handler.getClippedTripTracks(args.session, args.request, args.columns, args.viewport)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as nfe:
            msg_type = TMessageType.REPLY
            result.nfe = nfe
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getClippedTripTracks", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getStoreScheme(self, seqid, iprot, oprot):
        args = getStoreScheme_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getStoreScheme_result()
        try:
            result.success = self._handler.getStoreScheme(args.session, args.schemeId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getStoreScheme", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getAdditionalFieldsScheme(self, seqid, iprot, oprot):
        args = getAdditionalFieldsScheme_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getAdditionalFieldsScheme_result()
        try:
            result.success = self._handler.getAdditionalFieldsScheme(args.session, args.parentGroupId, args.extensionForType)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as be:
            msg_type = TMessageType.REPLY
            result.be = be
        except InternalServerError as iee:
            msg_type = TMessageType.REPLY
            result.iee = iee
        except Unauthorized as uae:
            msg_type = TMessageType.REPLY
            result.uae = uae
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as nfe:
            msg_type = TMessageType.REPLY
            result.nfe = nfe
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getAdditionalFieldsScheme", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_createStoreScheme(self, seqid, iprot, oprot):
        args = createStoreScheme_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createStoreScheme_result()
        try:
            result.success = self._handler.createStoreScheme(args.session, args.parentGroupId, args.name, args.fields, args.description)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("createStoreScheme", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_deleteStoreScheme(self, seqid, iprot, oprot):
        args = deleteStoreScheme_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = deleteStoreScheme_result()
        try:
            self._handler.deleteStoreScheme(args.session, args.id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("deleteStoreScheme", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_editStoreScheme(self, seqid, iprot, oprot):
        args = editStoreScheme_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = editStoreScheme_result()
        try:
            self._handler.editStoreScheme(args.session, args.scheme)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("editStoreScheme", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getCountries(self, seqid, iprot, oprot):
        args = getCountries_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getCountries_result()
        try:
            result.success = self._handler.getCountries(args.session, args.filter)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as be:
            msg_type = TMessageType.REPLY
            result.be = be
        except InternalServerError as iee:
            msg_type = TMessageType.REPLY
            result.iee = iee
        except Unauthorized as uae:
            msg_type = TMessageType.REPLY
            result.uae = uae
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getCountries", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getCities(self, seqid, iprot, oprot):
        args = getCities_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getCities_result()
        try:
            result.success = self._handler.getCities(args.session, args.context, args.filter)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as be:
            msg_type = TMessageType.REPLY
            result.be = be
        except InternalServerError as iee:
            msg_type = TMessageType.REPLY
            result.iee = iee
        except Unauthorized as uae:
            msg_type = TMessageType.REPLY
            result.uae = uae
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getCities", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getStreets(self, seqid, iprot, oprot):
        args = getStreets_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getStreets_result()
        try:
            result.success = self._handler.getStreets(args.session, args.context, args.filter)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as be:
            msg_type = TMessageType.REPLY
            result.be = be
        except InternalServerError as iee:
            msg_type = TMessageType.REPLY
            result.iee = iee
        except Unauthorized as uae:
            msg_type = TMessageType.REPLY
            result.uae = uae
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getStreets", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getBuildings(self, seqid, iprot, oprot):
        args = getBuildings_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getBuildings_result()
        try:
            result.success = self._handler.getBuildings(args.session, args.context, args.filter)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as be:
            msg_type = TMessageType.REPLY
            result.be = be
        except InternalServerError as iee:
            msg_type = TMessageType.REPLY
            result.iee = iee
        except Unauthorized as uae:
            msg_type = TMessageType.REPLY
            result.uae = uae
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getBuildings", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getPoint(self, seqid, iprot, oprot):
        args = getPoint_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getPoint_result()
        try:
            result.success = self._handler.getPoint(args.session, args.context)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as be:
            msg_type = TMessageType.REPLY
            result.be = be
        except InternalServerError as iee:
            msg_type = TMessageType.REPLY
            result.iee = iee
        except Unauthorized as uae:
            msg_type = TMessageType.REPLY
            result.uae = uae
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getPoint", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getSensorConfigurations(self, seqid, iprot, oprot):
        args = getSensorConfigurations_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getSensorConfigurations_result()
        try:
            result.success = self._handler.getSensorConfigurations(args.session, args.monitoringObjectId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getSensorConfigurations", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_setSensorConfigurations(self, seqid, iprot, oprot):
        args = setSensorConfigurations_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = setSensorConfigurations_result()
        try:
            self._handler.setSensorConfigurations(args.session, args.monitoringObjectId, args.sensorConfigurations)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("setSensorConfigurations", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getTrackSensorConfigurations(self, seqid, iprot, oprot):
        args = getTrackSensorConfigurations_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getTrackSensorConfigurations_result()
        try:
            result.success = self._handler.getTrackSensorConfigurations(args.session, args.monitoringObjectId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getTrackSensorConfigurations", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_createSensorConfigurationSet(self, seqid, iprot, oprot):
        args = createSensorConfigurationSet_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createSensorConfigurationSet_result()
        try:
            result.success = self._handler.createSensorConfigurationSet(args.session, args.parentGroupId, args.name, args.sensorConfigurations)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("createSensorConfigurationSet", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getSensorConfigurationSet(self, seqid, iprot, oprot):
        args = getSensorConfigurationSet_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getSensorConfigurationSet_result()
        try:
            result.success = self._handler.getSensorConfigurationSet(args.session, args.id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getSensorConfigurationSet", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getChildSensorConfigurationSet(self, seqid, iprot, oprot):
        args = getChildSensorConfigurationSet_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getChildSensorConfigurationSet_result()
        try:
            result.success = self._handler.getChildSensorConfigurationSet(args.session, args.parentGroupId, args.recursive)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getChildSensorConfigurationSet", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_editSensorConfigurationSet(self, seqid, iprot, oprot):
        args = editSensorConfigurationSet_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = editSensorConfigurationSet_result()
        try:
            self._handler.editSensorConfigurationSet(args.session, args.sensorConfigurationSet)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("editSensorConfigurationSet", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_deleteSensorConfigurationSet(self, seqid, iprot, oprot):
        args = deleteSensorConfigurationSet_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = deleteSensorConfigurationSet_result()
        try:
            self._handler.deleteSensorConfigurationSet(args.session, args.id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("deleteSensorConfigurationSet", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getMonitoringObjectChart(self, seqid, iprot, oprot):
        args = getMonitoringObjectChart_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getMonitoringObjectChart_result()
        try:
            result.success = self._handler.getMonitoringObjectChart(args.session, args.request, args.columns, args.lod)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getMonitoringObjectChart", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getMonitoringObjectsTracksRects(self, seqid, iprot, oprot):
        args = getMonitoringObjectsTracksRects_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getMonitoringObjectsTracksRects_result()
        try:
            result.success = self._handler.getMonitoringObjectsTracksRects(args.session, args.requests)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getMonitoringObjectsTracksRects", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_changeVehicleCreationTime(self, seqid, iprot, oprot):
        args = changeVehicleCreationTime_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = changeVehicleCreationTime_result()
        try:
            self._handler.changeVehicleCreationTime(args.session, args.vehicleId, args.timestamp)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("changeVehicleCreationTime", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getChildrenReports(self, seqid, iprot, oprot):
        args = getChildrenReports_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getChildrenReports_result()
        try:
            result.success = self._handler.getChildrenReports(args.session, args.parentGroupId, args.recursive)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getChildrenReports", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sendReport(self, seqid, iprot, oprot):
        args = sendReport_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sendReport_result()
        try:
            self._handler.sendReport(args.session, args.email, args.parameters)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except Unauthorized as ue:
            msg_type = TMessageType.REPLY
            result.ue = ue
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except ObjectNotFound as one:
            msg_type = TMessageType.REPLY
            result.one = one
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sendReport", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_buildScreenReport(self, seqid, iprot, oprot):
        args = buildScreenReport_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = buildScreenReport_result()
        try:
            result.success = self._handler.buildScreenReport(args.session, args.parameters)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("buildScreenReport", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class login_args(object):
    """
    Attributes:
     - userLoginName
     - password
     - longSession

    """


    def __init__(self, userLoginName=None, password=None, longSession=None,):
        self.userLoginName = userLoginName
        self.password = password
        self.longSession = longSession

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userLoginName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.longSession = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('login_args')
        if self.userLoginName is not None:
            oprot.writeFieldBegin('userLoginName', TType.STRING, 1)
            oprot.writeString(self.userLoginName.encode('utf-8') if sys.version_info[0] == 2 else self.userLoginName)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 2)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.longSession is not None:
            oprot.writeFieldBegin('longSession', TType.BOOL, 3)
            oprot.writeBool(self.longSession)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(login_args)
login_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'userLoginName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'password', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'longSession', None, None, ),  # 3
)


class login_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ade
     - ule
     - tne
     - lfe

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ade=None, ule=None, tne=None, lfe=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ade = ade
        self.ule = ule
        self.tne = tne
        self.lfe = lfe

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Session()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ule = UserLicenseExpired.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.tne = TrialIsNotActivated.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.lfe = LoginFailed.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('login_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 4)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.ule is not None:
            oprot.writeFieldBegin('ule', TType.STRUCT, 5)
            self.ule.write(oprot)
            oprot.writeFieldEnd()
        if self.tne is not None:
            oprot.writeFieldBegin('tne', TType.STRUCT, 6)
            self.tne.write(oprot)
            oprot.writeFieldEnd()
        if self.lfe is not None:
            oprot.writeFieldBegin('lfe', TType.STRUCT, 7)
            self.lfe.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(login_result)
login_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Session, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 4
    (5, TType.STRUCT, 'ule', [UserLicenseExpired, None], None, ),  # 5
    (6, TType.STRUCT, 'tne', [TrialIsNotActivated, None], None, ),  # 6
    (7, TType.STRUCT, 'lfe', [LoginFailed, None], None, ),  # 7
)


class logout_args(object):
    """
    Attributes:
     - session

    """


    def __init__(self, session=None,):
        self.session = session

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('logout_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(logout_args)
logout_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
)


class logout_result(object):
    """
    Attributes:
     - bre
     - bse
     - ise

    """


    def __init__(self, bre=None, bse=None, ise=None,):
        self.bre = bre
        self.bse = bse
        self.ise = ise

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('logout_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(logout_result)
logout_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
)


class getUser_args(object):
    """
    Attributes:
     - session
     - id

    """


    def __init__(self, session=None, id=None,):
        self.session = session
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getUser_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getUser_args)
getUser_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
)


class getUser_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = User()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getUser_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getUser_result)
getUser_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [User, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getUserSecurityData_args(object):
    """
    Attributes:
     - session
     - id

    """


    def __init__(self, session=None, id=None,):
        self.session = session
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.id = []
                    (_etype311, _size308) = iprot.readListBegin()
                    for _i312 in range(_size308):
                        _elem313 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.id.append(_elem313)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getUserSecurityData_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.id))
            for iter314 in self.id:
                oprot.writeString(iter314.encode('utf-8') if sys.version_info[0] == 2 else iter314)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getUserSecurityData_args)
getUserSecurityData_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.LIST, 'id', (TType.STRING, 'UTF8', False), None, ),  # 2
)


class getUserSecurityData_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype318, _size315) = iprot.readListBegin()
                    for _i319 in range(_size315):
                        _elem320 = UserSecurityData()
                        _elem320.read(iprot)
                        self.success.append(_elem320)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getUserSecurityData_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter321 in self.success:
                iter321.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getUserSecurityData_result)
getUserSecurityData_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [UserSecurityData, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getUsers_args(object):
    """
    Attributes:
     - session
     - filter
     - optionalParams

    """


    def __init__(self, session=None, filter=None, optionalParams=None,):
        self.session = session
        self.filter = filter
        self.optionalParams = optionalParams

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.filter = UserFilter()
                    self.filter.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.optionalParams = UserFilterOptionalParams()
                    self.optionalParams.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getUsers_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.filter is not None:
            oprot.writeFieldBegin('filter', TType.STRUCT, 2)
            self.filter.write(oprot)
            oprot.writeFieldEnd()
        if self.optionalParams is not None:
            oprot.writeFieldBegin('optionalParams', TType.STRUCT, 3)
            self.optionalParams.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getUsers_args)
getUsers_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRUCT, 'filter', [UserFilter, None], None, ),  # 2
    (3, TType.STRUCT, 'optionalParams', [UserFilterOptionalParams, None], None, ),  # 3
)


class getUsers_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype325, _size322) = iprot.readListBegin()
                    for _i326 in range(_size322):
                        _elem327 = User()
                        _elem327.read(iprot)
                        self.success.append(_elem327)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getUsers_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter328 in self.success:
                iter328.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getUsers_result)
getUsers_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [User, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getCurrentUser_args(object):
    """
    Attributes:
     - session

    """


    def __init__(self, session=None,):
        self.session = session

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getCurrentUser_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getCurrentUser_args)
getCurrentUser_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
)


class getCurrentUser_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = User()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getCurrentUser_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getCurrentUser_result)
getCurrentUser_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [User, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
)


class getChildrenUsers_args(object):
    """
    Attributes:
     - session
     - parentGroupId
     - recursive

    """


    def __init__(self, session=None, parentGroupId=None, recursive=None,):
        self.session = session
        self.parentGroupId = parentGroupId
        self.recursive = recursive

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.recursive = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getChildrenUsers_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 2)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.recursive is not None:
            oprot.writeFieldBegin('recursive', TType.BOOL, 3)
            oprot.writeBool(self.recursive)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getChildrenUsers_args)
getChildrenUsers_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'recursive', None, None, ),  # 3
)


class getChildrenUsers_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype332, _size329) = iprot.readListBegin()
                    for _i333 in range(_size329):
                        _elem334 = User()
                        _elem334.read(iprot)
                        self.success.append(_elem334)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getChildrenUsers_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter335 in self.success:
                iter335.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getChildrenUsers_result)
getChildrenUsers_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [User, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class createUser_args(object):
    """
    Attributes:
     - session
     - parentGroupId
     - login
     - password
     - roleId
     - groupLink
     - welcomeName
     - email
     - phone

    """


    def __init__(self, session=None, parentGroupId=None, login=None, password=None, roleId=None, groupLink=None, welcomeName=None, email=None, phone=None,):
        self.session = session
        self.parentGroupId = parentGroupId
        self.login = login
        self.password = password
        self.roleId = roleId
        self.groupLink = groupLink
        self.welcomeName = welcomeName
        self.email = email
        self.phone = phone

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.login = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.roleId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.groupLink = []
                    (_etype339, _size336) = iprot.readListBegin()
                    for _i340 in range(_size336):
                        _elem341 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.groupLink.append(_elem341)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.welcomeName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.phone = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createUser_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 2)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.login is not None:
            oprot.writeFieldBegin('login', TType.STRING, 3)
            oprot.writeString(self.login.encode('utf-8') if sys.version_info[0] == 2 else self.login)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 4)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.roleId is not None:
            oprot.writeFieldBegin('roleId', TType.STRING, 5)
            oprot.writeString(self.roleId.encode('utf-8') if sys.version_info[0] == 2 else self.roleId)
            oprot.writeFieldEnd()
        if self.groupLink is not None:
            oprot.writeFieldBegin('groupLink', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.groupLink))
            for iter342 in self.groupLink:
                oprot.writeString(iter342.encode('utf-8') if sys.version_info[0] == 2 else iter342)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.welcomeName is not None:
            oprot.writeFieldBegin('welcomeName', TType.STRING, 7)
            oprot.writeString(self.welcomeName.encode('utf-8') if sys.version_info[0] == 2 else self.welcomeName)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 8)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.phone is not None:
            oprot.writeFieldBegin('phone', TType.STRING, 9)
            oprot.writeString(self.phone.encode('utf-8') if sys.version_info[0] == 2 else self.phone)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createUser_args)
createUser_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'login', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'password', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'roleId', 'UTF8', None, ),  # 5
    (6, TType.LIST, 'groupLink', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.STRING, 'welcomeName', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'email', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'phone', 'UTF8', None, ),  # 9
)


class createUser_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one
     - le

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None, le=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one
        self.le = le

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = User()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.le = LoginAlreadyExists.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createUser_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        if self.le is not None:
            oprot.writeFieldBegin('le', TType.STRUCT, 7)
            self.le.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createUser_result)
createUser_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [User, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
    (7, TType.STRUCT, 'le', [LoginAlreadyExists, None], None, ),  # 7
)


class createUserSecure_args(object):
    """
    Attributes:
     - session
     - parentGroupId
     - login
     - passwordHash
     - passwordSalt
     - roleId
     - groupLink
     - welcomeName
     - email
     - phone

    """


    def __init__(self, session=None, parentGroupId=None, login=None, passwordHash=None, passwordSalt=None, roleId=None, groupLink=None, welcomeName=None, email=None, phone=None,):
        self.session = session
        self.parentGroupId = parentGroupId
        self.login = login
        self.passwordHash = passwordHash
        self.passwordSalt = passwordSalt
        self.roleId = roleId
        self.groupLink = groupLink
        self.welcomeName = welcomeName
        self.email = email
        self.phone = phone

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.login = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.passwordHash = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.passwordSalt = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.roleId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.groupLink = []
                    (_etype346, _size343) = iprot.readListBegin()
                    for _i347 in range(_size343):
                        _elem348 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.groupLink.append(_elem348)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.welcomeName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.phone = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createUserSecure_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 2)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.login is not None:
            oprot.writeFieldBegin('login', TType.STRING, 3)
            oprot.writeString(self.login.encode('utf-8') if sys.version_info[0] == 2 else self.login)
            oprot.writeFieldEnd()
        if self.passwordHash is not None:
            oprot.writeFieldBegin('passwordHash', TType.STRING, 4)
            oprot.writeString(self.passwordHash.encode('utf-8') if sys.version_info[0] == 2 else self.passwordHash)
            oprot.writeFieldEnd()
        if self.passwordSalt is not None:
            oprot.writeFieldBegin('passwordSalt', TType.STRING, 5)
            oprot.writeString(self.passwordSalt.encode('utf-8') if sys.version_info[0] == 2 else self.passwordSalt)
            oprot.writeFieldEnd()
        if self.roleId is not None:
            oprot.writeFieldBegin('roleId', TType.STRING, 6)
            oprot.writeString(self.roleId.encode('utf-8') if sys.version_info[0] == 2 else self.roleId)
            oprot.writeFieldEnd()
        if self.groupLink is not None:
            oprot.writeFieldBegin('groupLink', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.groupLink))
            for iter349 in self.groupLink:
                oprot.writeString(iter349.encode('utf-8') if sys.version_info[0] == 2 else iter349)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.welcomeName is not None:
            oprot.writeFieldBegin('welcomeName', TType.STRING, 8)
            oprot.writeString(self.welcomeName.encode('utf-8') if sys.version_info[0] == 2 else self.welcomeName)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 9)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.phone is not None:
            oprot.writeFieldBegin('phone', TType.STRING, 10)
            oprot.writeString(self.phone.encode('utf-8') if sys.version_info[0] == 2 else self.phone)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createUserSecure_args)
createUserSecure_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'login', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'passwordHash', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'passwordSalt', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'roleId', 'UTF8', None, ),  # 6
    (7, TType.LIST, 'groupLink', (TType.STRING, 'UTF8', False), None, ),  # 7
    (8, TType.STRING, 'welcomeName', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'email', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'phone', 'UTF8', None, ),  # 10
)


class createUserSecure_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one
     - le

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None, le=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one
        self.le = le

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = User()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.le = LoginAlreadyExists.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createUserSecure_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        if self.le is not None:
            oprot.writeFieldBegin('le', TType.STRUCT, 7)
            self.le.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createUserSecure_result)
createUserSecure_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [User, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
    (7, TType.STRUCT, 'le', [LoginAlreadyExists, None], None, ),  # 7
)


class editUser_args(object):
    """
    Attributes:
     - session
     - data

    """


    def __init__(self, session=None, data=None,):
        self.session = session
        self.data = data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.data = User()
                    self.data.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('editUser_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.STRUCT, 2)
            self.data.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(editUser_args)
editUser_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRUCT, 'data', [User, None], None, ),  # 2
)


class editUser_result(object):
    """
    Attributes:
     - bre
     - bse
     - ise
     - ue
     - ade
     - one
     - lae

    """


    def __init__(self, bre=None, bse=None, ise=None, ue=None, ade=None, one=None, lae=None,):
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one
        self.lae = lae

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.lae = LoginAlreadyExists.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('editUser_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        if self.lae is not None:
            oprot.writeFieldBegin('lae', TType.STRUCT, 7)
            self.lae.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(editUser_result)
editUser_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
    (7, TType.STRUCT, 'lae', [LoginAlreadyExists, None], None, ),  # 7
)


class deleteUser_args(object):
    """
    Attributes:
     - session
     - id

    """


    def __init__(self, session=None, id=None,):
        self.session = session
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('deleteUser_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(deleteUser_args)
deleteUser_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
)


class deleteUser_result(object):
    """
    Attributes:
     - bre
     - bse
     - ise
     - ue
     - ad
     - one

    """


    def __init__(self, bre=None, bse=None, ise=None, ue=None, ad=None, one=None,):
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ad = ad
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ad = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('deleteUser_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ad is not None:
            oprot.writeFieldBegin('ad', TType.STRUCT, 5)
            self.ad.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(deleteUser_result)
deleteUser_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ad', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class changePassword_args(object):
    """
    Attributes:
     - session
     - oldPassword
     - newPassword

    """


    def __init__(self, session=None, oldPassword=None, newPassword=None,):
        self.session = session
        self.oldPassword = oldPassword
        self.newPassword = newPassword

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.oldPassword = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.newPassword = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('changePassword_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.oldPassword is not None:
            oprot.writeFieldBegin('oldPassword', TType.STRING, 2)
            oprot.writeString(self.oldPassword.encode('utf-8') if sys.version_info[0] == 2 else self.oldPassword)
            oprot.writeFieldEnd()
        if self.newPassword is not None:
            oprot.writeFieldBegin('newPassword', TType.STRING, 3)
            oprot.writeString(self.newPassword.encode('utf-8') if sys.version_info[0] == 2 else self.newPassword)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(changePassword_args)
changePassword_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'oldPassword', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'newPassword', 'UTF8', None, ),  # 3
)


class changePassword_result(object):
    """
    Attributes:
     - bre
     - bse
     - ise
     - ue
     - one

    """


    def __init__(self, bre=None, bse=None, ise=None, ue=None, one=None,):
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('changePassword_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 5)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(changePassword_result)
changePassword_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 5
)


class setPassword_args(object):
    """
    Attributes:
     - session
     - userId
     - newPassword

    """


    def __init__(self, session=None, userId=None, newPassword=None,):
        self.session = session
        self.userId = userId
        self.newPassword = newPassword

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.newPassword = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('setPassword_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 2)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.newPassword is not None:
            oprot.writeFieldBegin('newPassword', TType.STRING, 3)
            oprot.writeString(self.newPassword.encode('utf-8') if sys.version_info[0] == 2 else self.newPassword)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(setPassword_args)
setPassword_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'userId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'newPassword', 'UTF8', None, ),  # 3
)


class setPassword_result(object):
    """
    Attributes:
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('setPassword_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(setPassword_result)
setPassword_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class setPasswordSecure_args(object):
    """
    Attributes:
     - session
     - userId
     - newPasswordHash
     - newPasswordSalt

    """


    def __init__(self, session=None, userId=None, newPasswordHash=None, newPasswordSalt=None,):
        self.session = session
        self.userId = userId
        self.newPasswordHash = newPasswordHash
        self.newPasswordSalt = newPasswordSalt

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.newPasswordHash = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.newPasswordSalt = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('setPasswordSecure_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 2)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.newPasswordHash is not None:
            oprot.writeFieldBegin('newPasswordHash', TType.STRING, 3)
            oprot.writeString(self.newPasswordHash.encode('utf-8') if sys.version_info[0] == 2 else self.newPasswordHash)
            oprot.writeFieldEnd()
        if self.newPasswordSalt is not None:
            oprot.writeFieldBegin('newPasswordSalt', TType.STRING, 4)
            oprot.writeString(self.newPasswordSalt.encode('utf-8') if sys.version_info[0] == 2 else self.newPasswordSalt)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(setPasswordSecure_args)
setPasswordSecure_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'userId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'newPasswordHash', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'newPasswordSalt', 'UTF8', None, ),  # 4
)


class setPasswordSecure_result(object):
    """
    Attributes:
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('setPasswordSecure_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(setPasswordSecure_result)
setPasswordSecure_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getRole_args(object):
    """
    Attributes:
     - session
     - id

    """


    def __init__(self, session=None, id=None,):
        self.session = session
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getRole_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getRole_args)
getRole_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
)


class getRole_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Role()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getRole_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getRole_result)
getRole_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Role, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getUserRole_args(object):
    """
    Attributes:
     - session
     - userId

    """


    def __init__(self, session=None, userId=None,):
        self.session = session
        self.userId = userId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getUserRole_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 2)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getUserRole_args)
getUserRole_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'userId', 'UTF8', None, ),  # 2
)


class getUserRole_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Role()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getUserRole_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getUserRole_result)
getUserRole_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Role, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getGroupRoles_args(object):
    """
    Attributes:
     - session
     - parentGroupId
     - recursive

    """


    def __init__(self, session=None, parentGroupId=None, recursive=None,):
        self.session = session
        self.parentGroupId = parentGroupId
        self.recursive = recursive

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.recursive = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getGroupRoles_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 2)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.recursive is not None:
            oprot.writeFieldBegin('recursive', TType.BOOL, 3)
            oprot.writeBool(self.recursive)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getGroupRoles_args)
getGroupRoles_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'recursive', None, None, ),  # 3
)


class getGroupRoles_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype353, _size350) = iprot.readListBegin()
                    for _i354 in range(_size350):
                        _elem355 = Role()
                        _elem355.read(iprot)
                        self.success.append(_elem355)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getGroupRoles_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter356 in self.success:
                iter356.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getGroupRoles_result)
getGroupRoles_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [Role, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getGroup_args(object):
    """
    Attributes:
     - session
     - id

    """


    def __init__(self, session=None, id=None,):
        self.session = session
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getGroup_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getGroup_args)
getGroup_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
)


class getGroup_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ad
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ad=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ad = ad
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Group()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ad = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getGroup_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ad is not None:
            oprot.writeFieldBegin('ad', TType.STRUCT, 5)
            self.ad.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getGroup_result)
getGroup_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Group, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ad', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getChildrenGroups_args(object):
    """
    Attributes:
     - session
     - parentGroupId
     - recursive

    """


    def __init__(self, session=None, parentGroupId=None, recursive=None,):
        self.session = session
        self.parentGroupId = parentGroupId
        self.recursive = recursive

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.recursive = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getChildrenGroups_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 2)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.recursive is not None:
            oprot.writeFieldBegin('recursive', TType.BOOL, 3)
            oprot.writeBool(self.recursive)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getChildrenGroups_args)
getChildrenGroups_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'recursive', None, None, ),  # 3
)


class getChildrenGroups_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ad
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ad=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ad = ad
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype360, _size357) = iprot.readListBegin()
                    for _i361 in range(_size357):
                        _elem362 = Group()
                        _elem362.read(iprot)
                        self.success.append(_elem362)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ad = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getChildrenGroups_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter363 in self.success:
                iter363.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ad is not None:
            oprot.writeFieldBegin('ad', TType.STRUCT, 5)
            self.ad.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getChildrenGroups_result)
getChildrenGroups_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [Group, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ad', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getRootGroups_args(object):
    """
    Attributes:
     - session

    """


    def __init__(self, session=None,):
        self.session = session

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getRootGroups_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getRootGroups_args)
getRootGroups_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
)


class getRootGroups_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ad

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ad=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ad = ad

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype367, _size364) = iprot.readListBegin()
                    for _i368 in range(_size364):
                        _elem369 = Group()
                        _elem369.read(iprot)
                        self.success.append(_elem369)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ad = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getRootGroups_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter370 in self.success:
                iter370.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ad is not None:
            oprot.writeFieldBegin('ad', TType.STRUCT, 5)
            self.ad.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getRootGroups_result)
getRootGroups_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [Group, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ad', [AccessDenied, None], None, ),  # 5
)


class createGroup_args(object):
    """
    Attributes:
     - session
     - parentGroupId
     - title

    """


    def __init__(self, session=None, parentGroupId=None, title=None,):
        self.session = session
        self.parentGroupId = parentGroupId
        self.title = title

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createGroup_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 2)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 3)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createGroup_args)
createGroup_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'title', 'UTF8', None, ),  # 3
)


class createGroup_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ad
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ad=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ad = ad
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Group()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ad = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createGroup_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ad is not None:
            oprot.writeFieldBegin('ad', TType.STRUCT, 5)
            self.ad.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createGroup_result)
createGroup_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Group, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ad', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class createCompany_args(object):
    """
    Attributes:
     - session
     - parentGroupId
     - title
     - license

    """


    def __init__(self, session=None, parentGroupId=None, title=None, license=None,):
        self.session = session
        self.parentGroupId = parentGroupId
        self.title = title
        self.license = license

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.license = License()
                    self.license.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createCompany_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 2)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 3)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.license is not None:
            oprot.writeFieldBegin('license', TType.STRUCT, 4)
            self.license.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createCompany_args)
createCompany_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'title', 'UTF8', None, ),  # 3
    (4, TType.STRUCT, 'license', [License, None], None, ),  # 4
)


class createCompany_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ad
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ad=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ad = ad
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Group()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ad = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createCompany_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ad is not None:
            oprot.writeFieldBegin('ad', TType.STRUCT, 5)
            self.ad.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createCompany_result)
createCompany_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Group, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ad', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class createCompanyWithAdditionalFields_args(object):
    """
    Attributes:
     - session
     - parentGroupId
     - title
     - license
     - additionalFields

    """


    def __init__(self, session=None, parentGroupId=None, title=None, license=None, additionalFields=None,):
        self.session = session
        self.parentGroupId = parentGroupId
        self.title = title
        self.license = license
        self.additionalFields = additionalFields

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.license = License()
                    self.license.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.additionalFields = AdditionalFields()
                    self.additionalFields.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createCompanyWithAdditionalFields_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 2)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 3)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.license is not None:
            oprot.writeFieldBegin('license', TType.STRUCT, 4)
            self.license.write(oprot)
            oprot.writeFieldEnd()
        if self.additionalFields is not None:
            oprot.writeFieldBegin('additionalFields', TType.STRUCT, 5)
            self.additionalFields.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createCompanyWithAdditionalFields_args)
createCompanyWithAdditionalFields_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'title', 'UTF8', None, ),  # 3
    (4, TType.STRUCT, 'license', [License, None], None, ),  # 4
    (5, TType.STRUCT, 'additionalFields', [AdditionalFields, None], None, ),  # 5
)


class createCompanyWithAdditionalFields_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ad
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ad=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ad = ad
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Group()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ad = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createCompanyWithAdditionalFields_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ad is not None:
            oprot.writeFieldBegin('ad', TType.STRUCT, 5)
            self.ad.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createCompanyWithAdditionalFields_result)
createCompanyWithAdditionalFields_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Group, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ad', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class editGroup_args(object):
    """
    Attributes:
     - session
     - data

    """


    def __init__(self, session=None, data=None,):
        self.session = session
        self.data = data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.data = Group()
                    self.data.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('editGroup_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.STRUCT, 2)
            self.data.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(editGroup_args)
editGroup_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRUCT, 'data', [Group, None], None, ),  # 2
)


class editGroup_result(object):
    """
    Attributes:
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('editGroup_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(editGroup_result)
editGroup_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class deleteGroup_args(object):
    """
    Attributes:
     - session
     - id
     - cascade

    """


    def __init__(self, session=None, id=None, cascade=None,):
        self.session = session
        self.id = id
        self.cascade = cascade

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.cascade = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('deleteGroup_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.cascade is not None:
            oprot.writeFieldBegin('cascade', TType.BOOL, 3)
            oprot.writeBool(self.cascade)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(deleteGroup_args)
deleteGroup_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'cascade', None, None, ),  # 3
)


class deleteGroup_result(object):
    """
    Attributes:
     - bre
     - bse
     - ise
     - ue
     - ad
     - one

    """


    def __init__(self, bre=None, bse=None, ise=None, ue=None, ad=None, one=None,):
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ad = ad
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ad = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('deleteGroup_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ad is not None:
            oprot.writeFieldBegin('ad', TType.STRUCT, 5)
            self.ad.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(deleteGroup_result)
deleteGroup_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ad', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getMonitoringObject_args(object):
    """
    Attributes:
     - session
     - id

    """


    def __init__(self, session=None, id=None,):
        self.session = session
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getMonitoringObject_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getMonitoringObject_args)
getMonitoringObject_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
)


class getMonitoringObject_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ad
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ad=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ad = ad
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = MonitoringObject()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ad = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getMonitoringObject_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ad is not None:
            oprot.writeFieldBegin('ad', TType.STRUCT, 5)
            self.ad.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getMonitoringObject_result)
getMonitoringObject_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [MonitoringObject, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ad', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getChildrenMonitoringObjects_args(object):
    """
    Attributes:
     - session
     - parentGroupId
     - recursive

    """


    def __init__(self, session=None, parentGroupId=None, recursive=None,):
        self.session = session
        self.parentGroupId = parentGroupId
        self.recursive = recursive

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.recursive = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getChildrenMonitoringObjects_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 2)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.recursive is not None:
            oprot.writeFieldBegin('recursive', TType.BOOL, 3)
            oprot.writeBool(self.recursive)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getChildrenMonitoringObjects_args)
getChildrenMonitoringObjects_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'recursive', None, None, ),  # 3
)


class getChildrenMonitoringObjects_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ad
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ad=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ad = ad
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype374, _size371) = iprot.readListBegin()
                    for _i375 in range(_size371):
                        _elem376 = MonitoringObject()
                        _elem376.read(iprot)
                        self.success.append(_elem376)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ad = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getChildrenMonitoringObjects_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter377 in self.success:
                iter377.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ad is not None:
            oprot.writeFieldBegin('ad', TType.STRUCT, 5)
            self.ad.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getChildrenMonitoringObjects_result)
getChildrenMonitoringObjects_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [MonitoringObject, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ad', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getMonitoringObjectsPortion_args(object):
    """
    Attributes:
     - session
     - filter
     - offset
     - limit

    """


    def __init__(self, session=None, filter=None, offset=None, limit=None,):
        self.session = session
        self.filter = filter
        self.offset = offset
        self.limit = limit

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.filter = MonitoringObjectFilter()
                    self.filter.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.offset = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.limit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getMonitoringObjectsPortion_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.filter is not None:
            oprot.writeFieldBegin('filter', TType.STRUCT, 2)
            self.filter.write(oprot)
            oprot.writeFieldEnd()
        if self.offset is not None:
            oprot.writeFieldBegin('offset', TType.I32, 3)
            oprot.writeI32(self.offset)
            oprot.writeFieldEnd()
        if self.limit is not None:
            oprot.writeFieldBegin('limit', TType.I32, 4)
            oprot.writeI32(self.limit)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getMonitoringObjectsPortion_args)
getMonitoringObjectsPortion_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRUCT, 'filter', [MonitoringObjectFilter, None], None, ),  # 2
    (3, TType.I32, 'offset', None, None, ),  # 3
    (4, TType.I32, 'limit', None, None, ),  # 4
)


class getMonitoringObjectsPortion_result(object):
    """
    Attributes:
     - success
     - bre
     - ise
     - ad
     - one

    """


    def __init__(self, success=None, bre=None, ise=None, ad=None, one=None,):
        self.success = success
        self.bre = bre
        self.ise = ise
        self.ad = ad
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype381, _size378) = iprot.readListBegin()
                    for _i382 in range(_size378):
                        _elem383 = MonitoringObject()
                        _elem383.read(iprot)
                        self.success.append(_elem383)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ad = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getMonitoringObjectsPortion_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter384 in self.success:
                iter384.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 2)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ad is not None:
            oprot.writeFieldBegin('ad', TType.STRUCT, 3)
            self.ad.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 4)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getMonitoringObjectsPortion_result)
getMonitoringObjectsPortion_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [MonitoringObject, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 2
    (3, TType.STRUCT, 'ad', [AccessDenied, None], None, ),  # 3
    (4, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 4
)


class getMonitoringObjects_args(object):
    """
    Attributes:
     - session
     - filter
     - filterType

    """


    def __init__(self, session=None, filter=None, filterType=None,):
        self.session = session
        self.filter = filter
        self.filterType = filterType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.filter = MonitoringObjectFilter()
                    self.filter.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.filterType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getMonitoringObjects_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.filter is not None:
            oprot.writeFieldBegin('filter', TType.STRUCT, 2)
            self.filter.write(oprot)
            oprot.writeFieldEnd()
        if self.filterType is not None:
            oprot.writeFieldBegin('filterType', TType.I32, 3)
            oprot.writeI32(self.filterType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getMonitoringObjects_args)
getMonitoringObjects_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRUCT, 'filter', [MonitoringObjectFilter, None], None, ),  # 2
    (3, TType.I32, 'filterType', None, None, ),  # 3
)


class getMonitoringObjects_result(object):
    """
    Attributes:
     - success
     - bre
     - ise
     - ad
     - one

    """


    def __init__(self, success=None, bre=None, ise=None, ad=None, one=None,):
        self.success = success
        self.bre = bre
        self.ise = ise
        self.ad = ad
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype388, _size385) = iprot.readListBegin()
                    for _i389 in range(_size385):
                        _elem390 = MonitoringObject()
                        _elem390.read(iprot)
                        self.success.append(_elem390)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ad = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getMonitoringObjects_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter391 in self.success:
                iter391.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 2)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ad is not None:
            oprot.writeFieldBegin('ad', TType.STRUCT, 3)
            self.ad.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 4)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getMonitoringObjects_result)
getMonitoringObjects_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [MonitoringObject, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 2
    (3, TType.STRUCT, 'ad', [AccessDenied, None], None, ),  # 3
    (4, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 4
)


class createMonitoringObject_args(object):
    """
    Attributes:
     - session
     - parentGroupId
     - tracker
     - name
     - displayColor
     - displayIcon

    """


    def __init__(self, session=None, parentGroupId=None, tracker=None, name=None, displayColor=None, displayIcon=None,):
        self.session = session
        self.parentGroupId = parentGroupId
        self.tracker = tracker
        self.name = name
        self.displayColor = displayColor
        self.displayIcon = displayIcon

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.tracker = Tracker()
                    self.tracker.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.displayColor = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.displayIcon = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createMonitoringObject_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 2)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.tracker is not None:
            oprot.writeFieldBegin('tracker', TType.STRUCT, 3)
            self.tracker.write(oprot)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 4)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.displayColor is not None:
            oprot.writeFieldBegin('displayColor', TType.STRING, 5)
            oprot.writeString(self.displayColor.encode('utf-8') if sys.version_info[0] == 2 else self.displayColor)
            oprot.writeFieldEnd()
        if self.displayIcon is not None:
            oprot.writeFieldBegin('displayIcon', TType.STRING, 6)
            oprot.writeString(self.displayIcon.encode('utf-8') if sys.version_info[0] == 2 else self.displayIcon)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createMonitoringObject_args)
createMonitoringObject_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'tracker', [Tracker, None], None, ),  # 3
    (4, TType.STRING, 'name', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'displayColor', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'displayIcon', 'UTF8', None, ),  # 6
)


class createMonitoringObject_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ad
     - one
     - tau

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ad=None, one=None, tau=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ad = ad
        self.one = one
        self.tau = tau

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = MonitoringObject()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ad = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.tau = TrackerAlreadyUsed.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createMonitoringObject_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ad is not None:
            oprot.writeFieldBegin('ad', TType.STRUCT, 5)
            self.ad.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        if self.tau is not None:
            oprot.writeFieldBegin('tau', TType.STRUCT, 7)
            self.tau.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createMonitoringObject_result)
createMonitoringObject_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [MonitoringObject, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ad', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
    (7, TType.STRUCT, 'tau', [TrackerAlreadyUsed, None], None, ),  # 7
)


class createMonitoringObjectWithAdditionalFields_args(object):
    """
    Attributes:
     - session
     - parentGroupId
     - tracker
     - name
     - displayColor
     - displayIcon
     - additionalFields

    """


    def __init__(self, session=None, parentGroupId=None, tracker=None, name=None, displayColor=None, displayIcon=None, additionalFields=None,):
        self.session = session
        self.parentGroupId = parentGroupId
        self.tracker = tracker
        self.name = name
        self.displayColor = displayColor
        self.displayIcon = displayIcon
        self.additionalFields = additionalFields

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.tracker = Tracker()
                    self.tracker.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.displayColor = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.displayIcon = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.additionalFields = AdditionalFields()
                    self.additionalFields.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createMonitoringObjectWithAdditionalFields_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 2)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.tracker is not None:
            oprot.writeFieldBegin('tracker', TType.STRUCT, 3)
            self.tracker.write(oprot)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 4)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.displayColor is not None:
            oprot.writeFieldBegin('displayColor', TType.STRING, 5)
            oprot.writeString(self.displayColor.encode('utf-8') if sys.version_info[0] == 2 else self.displayColor)
            oprot.writeFieldEnd()
        if self.displayIcon is not None:
            oprot.writeFieldBegin('displayIcon', TType.STRING, 6)
            oprot.writeString(self.displayIcon.encode('utf-8') if sys.version_info[0] == 2 else self.displayIcon)
            oprot.writeFieldEnd()
        if self.additionalFields is not None:
            oprot.writeFieldBegin('additionalFields', TType.STRUCT, 7)
            self.additionalFields.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createMonitoringObjectWithAdditionalFields_args)
createMonitoringObjectWithAdditionalFields_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'tracker', [Tracker, None], None, ),  # 3
    (4, TType.STRING, 'name', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'displayColor', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'displayIcon', 'UTF8', None, ),  # 6
    (7, TType.STRUCT, 'additionalFields', [AdditionalFields, None], None, ),  # 7
)


class createMonitoringObjectWithAdditionalFields_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ad
     - one
     - tau

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ad=None, one=None, tau=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ad = ad
        self.one = one
        self.tau = tau

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = MonitoringObject()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ad = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.tau = TrackerAlreadyUsed.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createMonitoringObjectWithAdditionalFields_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ad is not None:
            oprot.writeFieldBegin('ad', TType.STRUCT, 5)
            self.ad.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        if self.tau is not None:
            oprot.writeFieldBegin('tau', TType.STRUCT, 7)
            self.tau.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createMonitoringObjectWithAdditionalFields_result)
createMonitoringObjectWithAdditionalFields_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [MonitoringObject, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ad', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
    (7, TType.STRUCT, 'tau', [TrackerAlreadyUsed, None], None, ),  # 7
)


class createMonitoringObjectByObjectDescription_args(object):
    """
    Attributes:
     - session
     - data

    """


    def __init__(self, session=None, data=None,):
        self.session = session
        self.data = data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.data = MonitoringObject()
                    self.data.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createMonitoringObjectByObjectDescription_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.STRUCT, 2)
            self.data.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createMonitoringObjectByObjectDescription_args)
createMonitoringObjectByObjectDescription_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRUCT, 'data', [MonitoringObject, None], None, ),  # 2
)


class createMonitoringObjectByObjectDescription_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ad
     - one
     - tau
     - imbe

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ad=None, one=None, tau=None, imbe=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ad = ad
        self.one = one
        self.tau = tau
        self.imbe = imbe

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = MonitoringObject()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ad = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.tau = TrackerAlreadyUsed.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.imbe = ObjectIdMustBeEmptyOnObjectCreation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createMonitoringObjectByObjectDescription_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ad is not None:
            oprot.writeFieldBegin('ad', TType.STRUCT, 5)
            self.ad.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        if self.tau is not None:
            oprot.writeFieldBegin('tau', TType.STRUCT, 7)
            self.tau.write(oprot)
            oprot.writeFieldEnd()
        if self.imbe is not None:
            oprot.writeFieldBegin('imbe', TType.STRUCT, 8)
            self.imbe.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createMonitoringObjectByObjectDescription_result)
createMonitoringObjectByObjectDescription_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [MonitoringObject, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ad', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
    (7, TType.STRUCT, 'tau', [TrackerAlreadyUsed, None], None, ),  # 7
    (8, TType.STRUCT, 'imbe', [ObjectIdMustBeEmptyOnObjectCreation, None], None, ),  # 8
)


class editMonitoringObject_args(object):
    """
    Attributes:
     - session
     - data

    """


    def __init__(self, session=None, data=None,):
        self.session = session
        self.data = data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.data = MonitoringObject()
                    self.data.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('editMonitoringObject_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.STRUCT, 2)
            self.data.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(editMonitoringObject_args)
editMonitoringObject_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRUCT, 'data', [MonitoringObject, None], None, ),  # 2
)


class editMonitoringObject_result(object):
    """
    Attributes:
     - bre
     - bse
     - ise
     - ue
     - ade
     - one
     - tau

    """


    def __init__(self, bre=None, bse=None, ise=None, ue=None, ade=None, one=None, tau=None,):
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one
        self.tau = tau

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.tau = TrackerAlreadyUsed.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('editMonitoringObject_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        if self.tau is not None:
            oprot.writeFieldBegin('tau', TType.STRUCT, 7)
            self.tau.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(editMonitoringObject_result)
editMonitoringObject_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
    (7, TType.STRUCT, 'tau', [TrackerAlreadyUsed, None], None, ),  # 7
)


class deleteMonitoringObject_args(object):
    """
    Attributes:
     - session
     - id

    """


    def __init__(self, session=None, id=None,):
        self.session = session
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('deleteMonitoringObject_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(deleteMonitoringObject_args)
deleteMonitoringObject_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
)


class deleteMonitoringObject_result(object):
    """
    Attributes:
     - bre
     - bse
     - ise
     - ue
     - ad
     - one

    """


    def __init__(self, bre=None, bse=None, ise=None, ue=None, ad=None, one=None,):
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ad = ad
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ad = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('deleteMonitoringObject_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ad is not None:
            oprot.writeFieldBegin('ad', TType.STRUCT, 5)
            self.ad.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(deleteMonitoringObject_result)
deleteMonitoringObject_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ad', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getMonitoringObjectEvents_args(object):
    """
    Attributes:
     - session
     - monitoringObjectIdList
     - startDate
     - endDate

    """


    def __init__(self, session=None, monitoringObjectIdList=None, startDate=None, endDate=None,):
        self.session = session
        self.monitoringObjectIdList = monitoringObjectIdList
        self.startDate = startDate
        self.endDate = endDate

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.monitoringObjectIdList = []
                    (_etype395, _size392) = iprot.readListBegin()
                    for _i396 in range(_size392):
                        _elem397 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.monitoringObjectIdList.append(_elem397)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.startDate = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.endDate = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getMonitoringObjectEvents_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.monitoringObjectIdList is not None:
            oprot.writeFieldBegin('monitoringObjectIdList', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.monitoringObjectIdList))
            for iter398 in self.monitoringObjectIdList:
                oprot.writeString(iter398.encode('utf-8') if sys.version_info[0] == 2 else iter398)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.startDate is not None:
            oprot.writeFieldBegin('startDate', TType.STRING, 3)
            oprot.writeString(self.startDate.encode('utf-8') if sys.version_info[0] == 2 else self.startDate)
            oprot.writeFieldEnd()
        if self.endDate is not None:
            oprot.writeFieldBegin('endDate', TType.STRING, 4)
            oprot.writeString(self.endDate.encode('utf-8') if sys.version_info[0] == 2 else self.endDate)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getMonitoringObjectEvents_args)
getMonitoringObjectEvents_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.LIST, 'monitoringObjectIdList', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.STRING, 'startDate', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'endDate', 'UTF8', None, ),  # 4
)


class getMonitoringObjectEvents_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ad
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ad=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ad = ad
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype402, _size399) = iprot.readListBegin()
                    for _i403 in range(_size399):
                        _elem404 = MonitoringObjectEvent()
                        _elem404.read(iprot)
                        self.success.append(_elem404)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ad = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getMonitoringObjectEvents_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter405 in self.success:
                iter405.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ad is not None:
            oprot.writeFieldBegin('ad', TType.STRUCT, 5)
            self.ad.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getMonitoringObjectEvents_result)
getMonitoringObjectEvents_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [MonitoringObjectEvent, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ad', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getMonitoringObjectEventsSince_args(object):
    """
    Attributes:
     - session
     - monitoringObjectIdList
     - startDate
     - startMonotonicIndex
     - limit

    """


    def __init__(self, session=None, monitoringObjectIdList=None, startDate=None, startMonotonicIndex=None, limit=None,):
        self.session = session
        self.monitoringObjectIdList = monitoringObjectIdList
        self.startDate = startDate
        self.startMonotonicIndex = startMonotonicIndex
        self.limit = limit

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.monitoringObjectIdList = []
                    (_etype409, _size406) = iprot.readListBegin()
                    for _i410 in range(_size406):
                        _elem411 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.monitoringObjectIdList.append(_elem411)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.startDate = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.startMonotonicIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.limit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getMonitoringObjectEventsSince_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.monitoringObjectIdList is not None:
            oprot.writeFieldBegin('monitoringObjectIdList', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.monitoringObjectIdList))
            for iter412 in self.monitoringObjectIdList:
                oprot.writeString(iter412.encode('utf-8') if sys.version_info[0] == 2 else iter412)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.startDate is not None:
            oprot.writeFieldBegin('startDate', TType.STRING, 3)
            oprot.writeString(self.startDate.encode('utf-8') if sys.version_info[0] == 2 else self.startDate)
            oprot.writeFieldEnd()
        if self.startMonotonicIndex is not None:
            oprot.writeFieldBegin('startMonotonicIndex', TType.I64, 4)
            oprot.writeI64(self.startMonotonicIndex)
            oprot.writeFieldEnd()
        if self.limit is not None:
            oprot.writeFieldBegin('limit', TType.I32, 5)
            oprot.writeI32(self.limit)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getMonitoringObjectEventsSince_args)
getMonitoringObjectEventsSince_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.LIST, 'monitoringObjectIdList', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.STRING, 'startDate', 'UTF8', None, ),  # 3
    (4, TType.I64, 'startMonotonicIndex', None, None, ),  # 4
    (5, TType.I32, 'limit', None, None, ),  # 5
)


class getMonitoringObjectEventsSince_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ad
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ad=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ad = ad
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype416, _size413) = iprot.readListBegin()
                    for _i417 in range(_size413):
                        _elem418 = MonitoringObjectEvent()
                        _elem418.read(iprot)
                        self.success.append(_elem418)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ad = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getMonitoringObjectEventsSince_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter419 in self.success:
                iter419.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ad is not None:
            oprot.writeFieldBegin('ad', TType.STRUCT, 5)
            self.ad.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getMonitoringObjectEventsSince_result)
getMonitoringObjectEventsSince_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [MonitoringObjectEvent, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ad', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getMonitoringObjectIcons_args(object):
    """
    Attributes:
     - session
     - filter

    """


    def __init__(self, session=None, filter=None,):
        self.session = session
        self.filter = filter

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.filter = MonitoringObjectIconFilter()
                    self.filter.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getMonitoringObjectIcons_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.filter is not None:
            oprot.writeFieldBegin('filter', TType.STRUCT, 2)
            self.filter.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getMonitoringObjectIcons_args)
getMonitoringObjectIcons_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRUCT, 'filter', [MonitoringObjectIconFilter, None], None, ),  # 2
)


class getMonitoringObjectIcons_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ad

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ad=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ad = ad

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype423, _size420) = iprot.readListBegin()
                    for _i424 in range(_size420):
                        _elem425 = MonitoringObjectIcon()
                        _elem425.read(iprot)
                        self.success.append(_elem425)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ad = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getMonitoringObjectIcons_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter426 in self.success:
                iter426.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ad is not None:
            oprot.writeFieldBegin('ad', TType.STRUCT, 5)
            self.ad.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getMonitoringObjectIcons_result)
getMonitoringObjectIcons_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [MonitoringObjectIcon, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ad', [AccessDenied, None], None, ),  # 5
)


class reportRoadAccident_args(object):
    """
    Attributes:
     - session
     - monitoringObjectId
     - eventParams

    """


    def __init__(self, session=None, monitoringObjectId=None, eventParams=None,):
        self.session = session
        self.monitoringObjectId = monitoringObjectId
        self.eventParams = eventParams

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.monitoringObjectId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.eventParams = RoadAccidentEventParameters()
                    self.eventParams.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('reportRoadAccident_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.monitoringObjectId is not None:
            oprot.writeFieldBegin('monitoringObjectId', TType.STRING, 2)
            oprot.writeString(self.monitoringObjectId.encode('utf-8') if sys.version_info[0] == 2 else self.monitoringObjectId)
            oprot.writeFieldEnd()
        if self.eventParams is not None:
            oprot.writeFieldBegin('eventParams', TType.STRUCT, 3)
            self.eventParams.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(reportRoadAccident_args)
reportRoadAccident_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'monitoringObjectId', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'eventParams', [RoadAccidentEventParameters, None], None, ),  # 3
)


class reportRoadAccident_result(object):
    """
    Attributes:
     - bre
     - bse
     - ise
     - ue
     - ad
     - one

    """


    def __init__(self, bre=None, bse=None, ise=None, ue=None, ad=None, one=None,):
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ad = ad
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ad = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('reportRoadAccident_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ad is not None:
            oprot.writeFieldBegin('ad', TType.STRUCT, 5)
            self.ad.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(reportRoadAccident_result)
reportRoadAccident_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ad', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getMonitoringObjectCommands_args(object):
    """
    Attributes:
     - session
     - monitoringObjectId

    """


    def __init__(self, session=None, monitoringObjectId=None,):
        self.session = session
        self.monitoringObjectId = monitoringObjectId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.monitoringObjectId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getMonitoringObjectCommands_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.monitoringObjectId is not None:
            oprot.writeFieldBegin('monitoringObjectId', TType.STRING, 2)
            oprot.writeString(self.monitoringObjectId.encode('utf-8') if sys.version_info[0] == 2 else self.monitoringObjectId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getMonitoringObjectCommands_args)
getMonitoringObjectCommands_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'monitoringObjectId', 'UTF8', None, ),  # 2
)


class getMonitoringObjectCommands_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ad
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ad=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ad = ad
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype430, _size427) = iprot.readListBegin()
                    for _i431 in range(_size427):
                        _elem432 = Command()
                        _elem432.read(iprot)
                        self.success.append(_elem432)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ad = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getMonitoringObjectCommands_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter433 in self.success:
                iter433.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ad is not None:
            oprot.writeFieldBegin('ad', TType.STRUCT, 5)
            self.ad.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getMonitoringObjectCommands_result)
getMonitoringObjectCommands_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [Command, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ad', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class executeCommand_args(object):
    """
    Attributes:
     - session
     - commandId

    """


    def __init__(self, session=None, commandId=None,):
        self.session = session
        self.commandId = commandId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.commandId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('executeCommand_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.commandId is not None:
            oprot.writeFieldBegin('commandId', TType.STRING, 2)
            oprot.writeString(self.commandId.encode('utf-8') if sys.version_info[0] == 2 else self.commandId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(executeCommand_args)
executeCommand_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'commandId', 'UTF8', None, ),  # 2
)


class executeCommand_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ad
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ad=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ad = ad
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ad = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('executeCommand_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ad is not None:
            oprot.writeFieldBegin('ad', TType.STRUCT, 5)
            self.ad.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(executeCommand_result)
executeCommand_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ad', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getCommandsStatus_args(object):
    """
    Attributes:
     - session
     - monitoringObjectId

    """


    def __init__(self, session=None, monitoringObjectId=None,):
        self.session = session
        self.monitoringObjectId = monitoringObjectId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.monitoringObjectId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getCommandsStatus_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.monitoringObjectId is not None:
            oprot.writeFieldBegin('monitoringObjectId', TType.STRING, 2)
            oprot.writeString(self.monitoringObjectId.encode('utf-8') if sys.version_info[0] == 2 else self.monitoringObjectId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getCommandsStatus_args)
getCommandsStatus_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'monitoringObjectId', 'UTF8', None, ),  # 2
)


class getCommandsStatus_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ad
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ad=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ad = ad
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype437, _size434) = iprot.readListBegin()
                    for _i438 in range(_size434):
                        _elem439 = CommandStatus()
                        _elem439.read(iprot)
                        self.success.append(_elem439)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ad = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getCommandsStatus_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter440 in self.success:
                iter440.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ad is not None:
            oprot.writeFieldBegin('ad', TType.STRUCT, 5)
            self.ad.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getCommandsStatus_result)
getCommandsStatus_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [CommandStatus, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ad', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class startRelayingVehicles_args(object):
    """
    Attributes:
     - session
     - requests
     - columns
     - messageLimit

    """


    def __init__(self, session=None, requests=None, columns=None, messageLimit=None,):
        self.session = session
        self.requests = requests
        self.columns = columns
        self.messageLimit = messageLimit

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.requests = []
                    (_etype444, _size441) = iprot.readListBegin()
                    for _i445 in range(_size441):
                        _elem446 = thrif.dispatch.common.ttypes.VehicleRelayTrackRequest()
                        _elem446.read(iprot)
                        self.requests.append(_elem446)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.columns = thrif.dispatch.common.ttypes.PositionRequestFields()
                    self.columns.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.messageLimit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('startRelayingVehicles_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.requests is not None:
            oprot.writeFieldBegin('requests', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.requests))
            for iter447 in self.requests:
                iter447.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.columns is not None:
            oprot.writeFieldBegin('columns', TType.STRUCT, 3)
            self.columns.write(oprot)
            oprot.writeFieldEnd()
        if self.messageLimit is not None:
            oprot.writeFieldBegin('messageLimit', TType.I32, 4)
            oprot.writeI32(self.messageLimit)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(startRelayingVehicles_args)
startRelayingVehicles_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.LIST, 'requests', (TType.STRUCT, [thrif.dispatch.common.ttypes.VehicleRelayTrackRequest, None], False), None, ),  # 2
    (3, TType.STRUCT, 'columns', [thrif.dispatch.common.ttypes.PositionRequestFields, None], None, ),  # 3
    (4, TType.I32, 'messageLimit', None, None, ),  # 4
)


class startRelayingVehicles_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrif.dispatch.common.ttypes.RelaySession()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('startRelayingVehicles_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(startRelayingVehicles_result)
startRelayingVehicles_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [thrif.dispatch.common.ttypes.RelaySession, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
)


class getRelayingTracks_args(object):
    """
    Attributes:
     - relayingSession

    """


    def __init__(self, relayingSession=None,):
        self.relayingSession = relayingSession

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.relayingSession = thrif.dispatch.common.ttypes.RelaySession()
                    self.relayingSession.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getRelayingTracks_args')
        if self.relayingSession is not None:
            oprot.writeFieldBegin('relayingSession', TType.STRUCT, 1)
            self.relayingSession.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getRelayingTracks_args)
getRelayingTracks_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'relayingSession', [thrif.dispatch.common.ttypes.RelaySession, None], None, ),  # 1
)


class getRelayingTracks_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - rse

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, rse=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.rse = rse

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype451, _size448) = iprot.readListBegin()
                    for _i452 in range(_size448):
                        _elem453 = thrif.dispatch.common.ttypes.Track()
                        _elem453.read(iprot)
                        self.success.append(_elem453)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.rse = thrif.dispatch.common.ttypes.RelaySessionError.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getRelayingTracks_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter454 in self.success:
                iter454.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.rse is not None:
            oprot.writeFieldBegin('rse', TType.STRUCT, 6)
            self.rse.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getRelayingTracks_result)
getRelayingTracks_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [thrif.dispatch.common.ttypes.Track, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'rse', [thrif.dispatch.common.ttypes.RelaySessionError, None], None, ),  # 6
)


class getRelayingTracksEx_args(object):
    """
    Attributes:
     - request

    """


    def __init__(self, request=None,):
        self.request = request

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.request = thrif.dispatch.common.ttypes.RelayingTracksRequest()
                    self.request.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getRelayingTracksEx_args')
        if self.request is not None:
            oprot.writeFieldBegin('request', TType.STRUCT, 1)
            self.request.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getRelayingTracksEx_args)
getRelayingTracksEx_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'request', [thrif.dispatch.common.ttypes.RelayingTracksRequest, None], None, ),  # 1
)


class getRelayingTracksEx_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - rse

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, rse=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.rse = rse

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype458, _size455) = iprot.readListBegin()
                    for _i459 in range(_size455):
                        _elem460 = thrif.dispatch.common.ttypes.Track()
                        _elem460.read(iprot)
                        self.success.append(_elem460)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.rse = thrif.dispatch.common.ttypes.RelaySessionError.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getRelayingTracksEx_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter461 in self.success:
                iter461.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.rse is not None:
            oprot.writeFieldBegin('rse', TType.STRUCT, 6)
            self.rse.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getRelayingTracksEx_result)
getRelayingTracksEx_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [thrif.dispatch.common.ttypes.Track, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'rse', [thrif.dispatch.common.ttypes.RelaySessionError, None], None, ),  # 6
)


class getMonitoringObjectsTracks_args(object):
    """
    Attributes:
     - session
     - requests
     - columns
     - messageLimit

    """


    def __init__(self, session=None, requests=None, columns=None, messageLimit=None,):
        self.session = session
        self.requests = requests
        self.columns = columns
        self.messageLimit = messageLimit

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.requests = []
                    (_etype465, _size462) = iprot.readListBegin()
                    for _i466 in range(_size462):
                        _elem467 = thrif.dispatch.common.ttypes.VehicleHistoryTrackRequest()
                        _elem467.read(iprot)
                        self.requests.append(_elem467)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.columns = thrif.dispatch.common.ttypes.PositionRequestFields()
                    self.columns.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.messageLimit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getMonitoringObjectsTracks_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.requests is not None:
            oprot.writeFieldBegin('requests', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.requests))
            for iter468 in self.requests:
                iter468.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.columns is not None:
            oprot.writeFieldBegin('columns', TType.STRUCT, 3)
            self.columns.write(oprot)
            oprot.writeFieldEnd()
        if self.messageLimit is not None:
            oprot.writeFieldBegin('messageLimit', TType.I32, 4)
            oprot.writeI32(self.messageLimit)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getMonitoringObjectsTracks_args)
getMonitoringObjectsTracks_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.LIST, 'requests', (TType.STRUCT, [thrif.dispatch.common.ttypes.VehicleHistoryTrackRequest, None], False), None, ),  # 2
    (3, TType.STRUCT, 'columns', [thrif.dispatch.common.ttypes.PositionRequestFields, None], None, ),  # 3
    (4, TType.I32, 'messageLimit', None, None, ),  # 4
)


class getMonitoringObjectsTracks_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype472, _size469) = iprot.readListBegin()
                    for _i473 in range(_size469):
                        _elem474 = thrif.dispatch.common.ttypes.Track()
                        _elem474.read(iprot)
                        self.success.append(_elem474)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getMonitoringObjectsTracks_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter475 in self.success:
                iter475.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getMonitoringObjectsTracks_result)
getMonitoringObjectsTracks_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [thrif.dispatch.common.ttypes.Track, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
)


class getClippedMonitoringObjectTracks_args(object):
    """
    Attributes:
     - session
     - request
     - columns
     - viewport
     - useAdditionalTrackSplitting

    """


    def __init__(self, session=None, request=None, columns=None, viewport=None, useAdditionalTrackSplitting=None,):
        self.session = session
        self.request = request
        self.columns = columns
        self.viewport = viewport
        self.useAdditionalTrackSplitting = useAdditionalTrackSplitting

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.request = thrif.dispatch.common.ttypes.VehicleHistoryTrackRequest()
                    self.request.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.columns = thrif.dispatch.common.ttypes.PositionRequestFields()
                    self.columns.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.viewport = thrif.dispatch.common.ttypes.Viewport()
                    self.viewport.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.useAdditionalTrackSplitting = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getClippedMonitoringObjectTracks_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.request is not None:
            oprot.writeFieldBegin('request', TType.STRUCT, 2)
            self.request.write(oprot)
            oprot.writeFieldEnd()
        if self.columns is not None:
            oprot.writeFieldBegin('columns', TType.STRUCT, 3)
            self.columns.write(oprot)
            oprot.writeFieldEnd()
        if self.viewport is not None:
            oprot.writeFieldBegin('viewport', TType.STRUCT, 4)
            self.viewport.write(oprot)
            oprot.writeFieldEnd()
        if self.useAdditionalTrackSplitting is not None:
            oprot.writeFieldBegin('useAdditionalTrackSplitting', TType.BOOL, 5)
            oprot.writeBool(self.useAdditionalTrackSplitting)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getClippedMonitoringObjectTracks_args)
getClippedMonitoringObjectTracks_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRUCT, 'request', [thrif.dispatch.common.ttypes.VehicleHistoryTrackRequest, None], None, ),  # 2
    (3, TType.STRUCT, 'columns', [thrif.dispatch.common.ttypes.PositionRequestFields, None], None, ),  # 3
    (4, TType.STRUCT, 'viewport', [thrif.dispatch.common.ttypes.Viewport, None], None, ),  # 4
    (5, TType.BOOL, 'useAdditionalTrackSplitting', None, None, ),  # 5
)


class getClippedMonitoringObjectTracks_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype479, _size476) = iprot.readListBegin()
                    for _i480 in range(_size476):
                        _elem481 = thrif.dispatch.common.ttypes.Track()
                        _elem481.read(iprot)
                        self.success.append(_elem481)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getClippedMonitoringObjectTracks_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter482 in self.success:
                iter482.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getClippedMonitoringObjectTracks_result)
getClippedMonitoringObjectTracks_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [thrif.dispatch.common.ttypes.Track, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
)


class getMonitoringObjectTrackGroupedDetails_args(object):
    """
    Attributes:
     - session
     - request

    """


    def __init__(self, session=None, request=None,):
        self.session = session
        self.request = request

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.request = thrif.dispatch.common.ttypes.VehicleHistoryTrackGroupedDetailsRequest()
                    self.request.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getMonitoringObjectTrackGroupedDetails_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.request is not None:
            oprot.writeFieldBegin('request', TType.STRUCT, 2)
            self.request.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getMonitoringObjectTrackGroupedDetails_args)
getMonitoringObjectTrackGroupedDetails_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRUCT, 'request', [thrif.dispatch.common.ttypes.VehicleHistoryTrackGroupedDetailsRequest, None], None, ),  # 2
)


class getMonitoringObjectTrackGroupedDetails_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrif.dispatch.common.ttypes.VehicleHistoryTrackGroupedDetailsResponse()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getMonitoringObjectTrackGroupedDetails_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getMonitoringObjectTrackGroupedDetails_result)
getMonitoringObjectTrackGroupedDetails_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [thrif.dispatch.common.ttypes.VehicleHistoryTrackGroupedDetailsResponse, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
)


class getRecentPositions_args(object):
    """
    Attributes:
     - session
     - vehicleUuids
     - columns

    """


    def __init__(self, session=None, vehicleUuids=None, columns=None,):
        self.session = session
        self.vehicleUuids = vehicleUuids
        self.columns = columns

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.vehicleUuids = []
                    (_etype486, _size483) = iprot.readListBegin()
                    for _i487 in range(_size483):
                        _elem488 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.vehicleUuids.append(_elem488)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.columns = thrif.dispatch.common.ttypes.PositionRequestFields()
                    self.columns.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getRecentPositions_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.vehicleUuids is not None:
            oprot.writeFieldBegin('vehicleUuids', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.vehicleUuids))
            for iter489 in self.vehicleUuids:
                oprot.writeString(iter489.encode('utf-8') if sys.version_info[0] == 2 else iter489)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.columns is not None:
            oprot.writeFieldBegin('columns', TType.STRUCT, 3)
            self.columns.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getRecentPositions_args)
getRecentPositions_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.LIST, 'vehicleUuids', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.STRUCT, 'columns', [thrif.dispatch.common.ttypes.PositionRequestFields, None], None, ),  # 3
)


class getRecentPositions_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype493, _size490) = iprot.readListBegin()
                    for _i494 in range(_size490):
                        _elem495 = thrif.dispatch.common.ttypes.PositionWithVehicle()
                        _elem495.read(iprot)
                        self.success.append(_elem495)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getRecentPositions_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter496 in self.success:
                iter496.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getRecentPositions_result)
getRecentPositions_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [thrif.dispatch.common.ttypes.PositionWithVehicle, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
)


class getRecentPositionsWithAllColumns_args(object):
    """
    Attributes:
     - session
     - vehicleUuids

    """


    def __init__(self, session=None, vehicleUuids=None,):
        self.session = session
        self.vehicleUuids = vehicleUuids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.vehicleUuids = []
                    (_etype500, _size497) = iprot.readListBegin()
                    for _i501 in range(_size497):
                        _elem502 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.vehicleUuids.append(_elem502)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getRecentPositionsWithAllColumns_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.vehicleUuids is not None:
            oprot.writeFieldBegin('vehicleUuids', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.vehicleUuids))
            for iter503 in self.vehicleUuids:
                oprot.writeString(iter503.encode('utf-8') if sys.version_info[0] == 2 else iter503)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getRecentPositionsWithAllColumns_args)
getRecentPositionsWithAllColumns_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.LIST, 'vehicleUuids', (TType.STRING, 'UTF8', False), None, ),  # 2
)


class getRecentPositionsWithAllColumns_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype507, _size504) = iprot.readListBegin()
                    for _i508 in range(_size504):
                        _elem509 = thrif.dispatch.common.ttypes.PositionWithColumns()
                        _elem509.read(iprot)
                        self.success.append(_elem509)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getRecentPositionsWithAllColumns_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter510 in self.success:
                iter510.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getRecentPositionsWithAllColumns_result)
getRecentPositionsWithAllColumns_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [thrif.dispatch.common.ttypes.PositionWithColumns, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
)


class enableVehicle_args(object):
    """
    Attributes:
     - session
     - vehicleId
     - enable

    """


    def __init__(self, session=None, vehicleId=None, enable=None,):
        self.session = session
        self.vehicleId = vehicleId
        self.enable = enable

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.vehicleId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.enable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('enableVehicle_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.vehicleId is not None:
            oprot.writeFieldBegin('vehicleId', TType.STRING, 2)
            oprot.writeString(self.vehicleId.encode('utf-8') if sys.version_info[0] == 2 else self.vehicleId)
            oprot.writeFieldEnd()
        if self.enable is not None:
            oprot.writeFieldBegin('enable', TType.BOOL, 3)
            oprot.writeBool(self.enable)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(enableVehicle_args)
enableVehicle_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'vehicleId', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'enable', None, None, ),  # 3
)


class enableVehicle_result(object):
    """
    Attributes:
     - bre
     - bse
     - ise
     - ue
     - ad
     - one

    """


    def __init__(self, bre=None, bse=None, ise=None, ue=None, ad=None, one=None,):
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ad = ad
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ad = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('enableVehicle_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ad is not None:
            oprot.writeFieldBegin('ad', TType.STRUCT, 5)
            self.ad.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(enableVehicle_result)
enableVehicle_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ad', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class setTrackerStatus_args(object):
    """
    Attributes:
     - session
     - monitoringObjectId
     - status

    """


    def __init__(self, session=None, monitoringObjectId=None, status=None,):
        self.session = session
        self.monitoringObjectId = monitoringObjectId
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.monitoringObjectId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('setTrackerStatus_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.monitoringObjectId is not None:
            oprot.writeFieldBegin('monitoringObjectId', TType.STRING, 2)
            oprot.writeString(self.monitoringObjectId.encode('utf-8') if sys.version_info[0] == 2 else self.monitoringObjectId)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 3)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(setTrackerStatus_args)
setTrackerStatus_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'monitoringObjectId', 'UTF8', None, ),  # 2
    (3, TType.I32, 'status', None, None, ),  # 3
)


class setTrackerStatus_result(object):
    """
    Attributes:
     - bre
     - bse
     - ise
     - ue
     - ad
     - one

    """


    def __init__(self, bre=None, bse=None, ise=None, ue=None, ad=None, one=None,):
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ad = ad
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ad = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('setTrackerStatus_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ad is not None:
            oprot.writeFieldBegin('ad', TType.STRUCT, 5)
            self.ad.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(setTrackerStatus_result)
setTrackerStatus_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ad', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getTrackerStatusHistory_args(object):
    """
    Attributes:
     - session
     - monitoringObjectId

    """


    def __init__(self, session=None, monitoringObjectId=None,):
        self.session = session
        self.monitoringObjectId = monitoringObjectId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.monitoringObjectId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getTrackerStatusHistory_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.monitoringObjectId is not None:
            oprot.writeFieldBegin('monitoringObjectId', TType.STRING, 2)
            oprot.writeString(self.monitoringObjectId.encode('utf-8') if sys.version_info[0] == 2 else self.monitoringObjectId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getTrackerStatusHistory_args)
getTrackerStatusHistory_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'monitoringObjectId', 'UTF8', None, ),  # 2
)


class getTrackerStatusHistory_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ad
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ad=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ad = ad
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype514, _size511) = iprot.readListBegin()
                    for _i515 in range(_size511):
                        _elem516 = TrackerStatusChange()
                        _elem516.read(iprot)
                        self.success.append(_elem516)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ad = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getTrackerStatusHistory_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter517 in self.success:
                iter517.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ad is not None:
            oprot.writeFieldBegin('ad', TType.STRUCT, 5)
            self.ad.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getTrackerStatusHistory_result)
getTrackerStatusHistory_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [TrackerStatusChange, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ad', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getTrackersCertificate_args(object):
    """
    Attributes:
     - session
     - monitoringObjectIds

    """


    def __init__(self, session=None, monitoringObjectIds=None,):
        self.session = session
        self.monitoringObjectIds = monitoringObjectIds

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.monitoringObjectIds = []
                    (_etype521, _size518) = iprot.readListBegin()
                    for _i522 in range(_size518):
                        _elem523 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.monitoringObjectIds.append(_elem523)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getTrackersCertificate_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.monitoringObjectIds is not None:
            oprot.writeFieldBegin('monitoringObjectIds', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.monitoringObjectIds))
            for iter524 in self.monitoringObjectIds:
                oprot.writeString(iter524.encode('utf-8') if sys.version_info[0] == 2 else iter524)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getTrackersCertificate_args)
getTrackersCertificate_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.LIST, 'monitoringObjectIds', (TType.STRING, 'UTF8', False), None, ),  # 2
)


class getTrackersCertificate_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ad
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ad=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ad = ad
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype528, _size525) = iprot.readListBegin()
                    for _i529 in range(_size525):
                        _elem530 = TrackerCertificate()
                        _elem530.read(iprot)
                        self.success.append(_elem530)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ad = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getTrackersCertificate_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter531 in self.success:
                iter531.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ad is not None:
            oprot.writeFieldBegin('ad', TType.STRUCT, 5)
            self.ad.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getTrackersCertificate_result)
getTrackersCertificate_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [TrackerCertificate, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ad', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class setTrackerCertificate_args(object):
    """
    Attributes:
     - session
     - certificate

    """


    def __init__(self, session=None, certificate=None,):
        self.session = session
        self.certificate = certificate

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.certificate = TrackerCertificate()
                    self.certificate.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('setTrackerCertificate_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.certificate is not None:
            oprot.writeFieldBegin('certificate', TType.STRUCT, 3)
            self.certificate.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(setTrackerCertificate_args)
setTrackerCertificate_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    None,  # 2
    (3, TType.STRUCT, 'certificate', [TrackerCertificate, None], None, ),  # 3
)


class setTrackerCertificate_result(object):
    """
    Attributes:
     - bre
     - bse
     - ise
     - ue
     - ad
     - one

    """


    def __init__(self, bre=None, bse=None, ise=None, ue=None, ad=None, one=None,):
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ad = ad
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ad = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('setTrackerCertificate_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ad is not None:
            oprot.writeFieldBegin('ad', TType.STRUCT, 5)
            self.ad.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(setTrackerCertificate_result)
setTrackerCertificate_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ad', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class removeTrackersCertificate_args(object):
    """
    Attributes:
     - session
     - monitoringObjectIds

    """


    def __init__(self, session=None, monitoringObjectIds=None,):
        self.session = session
        self.monitoringObjectIds = monitoringObjectIds

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.monitoringObjectIds = []
                    (_etype535, _size532) = iprot.readListBegin()
                    for _i536 in range(_size532):
                        _elem537 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.monitoringObjectIds.append(_elem537)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('removeTrackersCertificate_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.monitoringObjectIds is not None:
            oprot.writeFieldBegin('monitoringObjectIds', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.monitoringObjectIds))
            for iter538 in self.monitoringObjectIds:
                oprot.writeString(iter538.encode('utf-8') if sys.version_info[0] == 2 else iter538)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(removeTrackersCertificate_args)
removeTrackersCertificate_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.LIST, 'monitoringObjectIds', (TType.STRING, 'UTF8', False), None, ),  # 2
)


class removeTrackersCertificate_result(object):
    """
    Attributes:
     - bre
     - bse
     - ise
     - ue
     - ad
     - one

    """


    def __init__(self, bre=None, bse=None, ise=None, ue=None, ad=None, one=None,):
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ad = ad
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ad = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('removeTrackersCertificate_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ad is not None:
            oprot.writeFieldBegin('ad', TType.STRUCT, 5)
            self.ad.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(removeTrackersCertificate_result)
removeTrackersCertificate_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ad', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class isVehicleEnabled_args(object):
    """
    Attributes:
     - session
     - vehicleId

    """


    def __init__(self, session=None, vehicleId=None,):
        self.session = session
        self.vehicleId = vehicleId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.vehicleId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('isVehicleEnabled_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.vehicleId is not None:
            oprot.writeFieldBegin('vehicleId', TType.STRING, 2)
            oprot.writeString(self.vehicleId.encode('utf-8') if sys.version_info[0] == 2 else self.vehicleId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(isVehicleEnabled_args)
isVehicleEnabled_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'vehicleId', 'UTF8', None, ),  # 2
)


class isVehicleEnabled_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ad
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ad=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ad = ad
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ad = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('isVehicleEnabled_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ad is not None:
            oprot.writeFieldBegin('ad', TType.STRUCT, 5)
            self.ad.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(isVehicleEnabled_result)
isVehicleEnabled_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ad', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getRecentPositionsWithValidGPS_args(object):
    """
    Attributes:
     - session
     - vehicleUuids
     - columns

    """


    def __init__(self, session=None, vehicleUuids=None, columns=None,):
        self.session = session
        self.vehicleUuids = vehicleUuids
        self.columns = columns

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.vehicleUuids = []
                    (_etype542, _size539) = iprot.readListBegin()
                    for _i543 in range(_size539):
                        _elem544 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.vehicleUuids.append(_elem544)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.columns = thrif.dispatch.common.ttypes.PositionRequestFields()
                    self.columns.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getRecentPositionsWithValidGPS_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.vehicleUuids is not None:
            oprot.writeFieldBegin('vehicleUuids', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.vehicleUuids))
            for iter545 in self.vehicleUuids:
                oprot.writeString(iter545.encode('utf-8') if sys.version_info[0] == 2 else iter545)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.columns is not None:
            oprot.writeFieldBegin('columns', TType.STRUCT, 3)
            self.columns.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getRecentPositionsWithValidGPS_args)
getRecentPositionsWithValidGPS_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.LIST, 'vehicleUuids', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.STRUCT, 'columns', [thrif.dispatch.common.ttypes.PositionRequestFields, None], None, ),  # 3
)


class getRecentPositionsWithValidGPS_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype549, _size546) = iprot.readListBegin()
                    for _i550 in range(_size546):
                        _elem551 = thrif.dispatch.common.ttypes.PositionWithVehicle()
                        _elem551.read(iprot)
                        self.success.append(_elem551)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getRecentPositionsWithValidGPS_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter552 in self.success:
                iter552.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getRecentPositionsWithValidGPS_result)
getRecentPositionsWithValidGPS_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [thrif.dispatch.common.ttypes.PositionWithVehicle, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
)


class reportBrokenTracker_args(object):
    """
    Attributes:
     - session
     - request

    """


    def __init__(self, session=None, request=None,):
        self.session = session
        self.request = request

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.request = BrokenTrackerRequest()
                    self.request.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('reportBrokenTracker_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.request is not None:
            oprot.writeFieldBegin('request', TType.STRUCT, 2)
            self.request.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(reportBrokenTracker_args)
reportBrokenTracker_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRUCT, 'request', [BrokenTrackerRequest, None], None, ),  # 2
)


class reportBrokenTracker_result(object):
    """
    Attributes:
     - bre
     - bse
     - ise
     - ue
     - ade
     - onfe

    """


    def __init__(self, bre=None, bse=None, ise=None, ue=None, ade=None, onfe=None,):
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.onfe = onfe

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.onfe = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('reportBrokenTracker_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.onfe is not None:
            oprot.writeFieldBegin('onfe', TType.STRUCT, 6)
            self.onfe.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(reportBrokenTracker_result)
reportBrokenTracker_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'onfe', [ObjectNotFound, None], None, ),  # 6
)


class getGeopointsAddresses_args(object):
    """
    Attributes:
     - session
     - points

    """


    def __init__(self, session=None, points=None,):
        self.session = session
        self.points = points

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.points = []
                    (_etype556, _size553) = iprot.readListBegin()
                    for _i557 in range(_size553):
                        _elem558 = thrif.dispatch.common.ttypes.GeoPoint()
                        _elem558.read(iprot)
                        self.points.append(_elem558)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getGeopointsAddresses_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.points is not None:
            oprot.writeFieldBegin('points', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.points))
            for iter559 in self.points:
                iter559.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getGeopointsAddresses_args)
getGeopointsAddresses_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.LIST, 'points', (TType.STRUCT, [thrif.dispatch.common.ttypes.GeoPoint, None], False), None, ),  # 2
)


class getGeopointsAddresses_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype563, _size560) = iprot.readListBegin()
                    for _i564 in range(_size560):
                        _elem565 = []
                        (_etype569, _size566) = iprot.readListBegin()
                        for _i570 in range(_size566):
                            _elem571 = thrif.dispatch.common.ttypes.Address()
                            _elem571.read(iprot)
                            _elem565.append(_elem571)
                        iprot.readListEnd()
                        self.success.append(_elem565)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getGeopointsAddresses_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.LIST, len(self.success))
            for iter572 in self.success:
                oprot.writeListBegin(TType.STRUCT, len(iter572))
                for iter573 in iter572:
                    iter573.write(oprot)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getGeopointsAddresses_result)
getGeopointsAddresses_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.LIST, (TType.STRUCT, [thrif.dispatch.common.ttypes.Address, None], False), False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
)


class getCompanyStatistics_args(object):
    """
    Attributes:
     - session: user session
     - startDate: дата и время начала периода аггрегации статистики по компании в формате ISO-8601 (inclusive)
     - endDate: дата и время периода конца аггрегации (non-inclusive)
     - companyUUIDs: список UUID компаний

    """


    def __init__(self, session=None, startDate=None, endDate=None, companyUUIDs=None,):
        self.session = session
        self.startDate = startDate
        self.endDate = endDate
        self.companyUUIDs = companyUUIDs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.startDate = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.endDate = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.companyUUIDs = []
                    (_etype577, _size574) = iprot.readListBegin()
                    for _i578 in range(_size574):
                        _elem579 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.companyUUIDs.append(_elem579)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getCompanyStatistics_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.startDate is not None:
            oprot.writeFieldBegin('startDate', TType.STRING, 2)
            oprot.writeString(self.startDate.encode('utf-8') if sys.version_info[0] == 2 else self.startDate)
            oprot.writeFieldEnd()
        if self.endDate is not None:
            oprot.writeFieldBegin('endDate', TType.STRING, 3)
            oprot.writeString(self.endDate.encode('utf-8') if sys.version_info[0] == 2 else self.endDate)
            oprot.writeFieldEnd()
        if self.companyUUIDs is not None:
            oprot.writeFieldBegin('companyUUIDs', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.companyUUIDs))
            for iter580 in self.companyUUIDs:
                oprot.writeString(iter580.encode('utf-8') if sys.version_info[0] == 2 else iter580)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getCompanyStatistics_args)
getCompanyStatistics_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'startDate', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'endDate', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'companyUUIDs', (TType.STRING, 'UTF8', False), None, ),  # 4
)


class getCompanyStatistics_result(object):
    """
    Attributes:
     - success
     - bre: Invalid UUID in @param companyUUIDs, bad date-time causes InternalServerError
     - bse
     - ise: Invalid date format or other error
     - ue: Invalid session
     - ad: User has no permission to view companies (licenses)
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ad=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ad = ad
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype584, _size581) = iprot.readListBegin()
                    for _i585 in range(_size581):
                        _elem586 = CompanyStatistics()
                        _elem586.read(iprot)
                        self.success.append(_elem586)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ad = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getCompanyStatistics_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter587 in self.success:
                iter587.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ad is not None:
            oprot.writeFieldBegin('ad', TType.STRUCT, 5)
            self.ad.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getCompanyStatistics_result)
getCompanyStatistics_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [CompanyStatistics, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ad', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getRelay_args(object):
    """
    Attributes:
     - session
     - id

    """


    def __init__(self, session=None, id=None,):
        self.session = session
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getRelay_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getRelay_args)
getRelay_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
)


class getRelay_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Relay()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getRelay_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getRelay_result)
getRelay_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Relay, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getChildRelays_args(object):
    """
    Attributes:
     - session
     - parentGroupId
     - recursive

    """


    def __init__(self, session=None, parentGroupId=None, recursive=None,):
        self.session = session
        self.parentGroupId = parentGroupId
        self.recursive = recursive

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.recursive = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getChildRelays_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 2)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.recursive is not None:
            oprot.writeFieldBegin('recursive', TType.BOOL, 3)
            oprot.writeBool(self.recursive)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getChildRelays_args)
getChildRelays_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'recursive', None, None, ),  # 3
)


class getChildRelays_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype591, _size588) = iprot.readListBegin()
                    for _i592 in range(_size588):
                        _elem593 = Relay()
                        _elem593.read(iprot)
                        self.success.append(_elem593)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getChildRelays_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter594 in self.success:
                iter594.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getChildRelays_result)
getChildRelays_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [Relay, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class createRelay_args(object):
    """
    Attributes:
     - session
     - title
     - parentGroupId
     - protocol
     - enabled
     - monitoringObjectsIds
     - host
     - optionalParams

    """


    def __init__(self, session=None, title=None, parentGroupId=None, protocol=None, enabled=None, monitoringObjectsIds=None, host=None, optionalParams=None,):
        self.session = session
        self.title = title
        self.parentGroupId = parentGroupId
        self.protocol = protocol
        self.enabled = enabled
        self.monitoringObjectsIds = monitoringObjectsIds
        self.host = host
        self.optionalParams = optionalParams

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.protocol = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.enabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.monitoringObjectsIds = []
                    (_etype598, _size595) = iprot.readListBegin()
                    for _i599 in range(_size595):
                        _elem600 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.monitoringObjectsIds.append(_elem600)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.host = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.optionalParams = RelayOptionalParams()
                    self.optionalParams.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createRelay_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 2)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 3)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.protocol is not None:
            oprot.writeFieldBegin('protocol', TType.STRING, 4)
            oprot.writeString(self.protocol.encode('utf-8') if sys.version_info[0] == 2 else self.protocol)
            oprot.writeFieldEnd()
        if self.enabled is not None:
            oprot.writeFieldBegin('enabled', TType.BOOL, 5)
            oprot.writeBool(self.enabled)
            oprot.writeFieldEnd()
        if self.monitoringObjectsIds is not None:
            oprot.writeFieldBegin('monitoringObjectsIds', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.monitoringObjectsIds))
            for iter601 in self.monitoringObjectsIds:
                oprot.writeString(iter601.encode('utf-8') if sys.version_info[0] == 2 else iter601)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.host is not None:
            oprot.writeFieldBegin('host', TType.STRING, 7)
            oprot.writeString(self.host.encode('utf-8') if sys.version_info[0] == 2 else self.host)
            oprot.writeFieldEnd()
        if self.optionalParams is not None:
            oprot.writeFieldBegin('optionalParams', TType.STRUCT, 8)
            self.optionalParams.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createRelay_args)
createRelay_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'title', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'protocol', 'UTF8', None, ),  # 4
    (5, TType.BOOL, 'enabled', None, None, ),  # 5
    (6, TType.LIST, 'monitoringObjectsIds', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.STRING, 'host', 'UTF8', None, ),  # 7
    (8, TType.STRUCT, 'optionalParams', [RelayOptionalParams, None], None, ),  # 8
)


class createRelay_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Relay()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createRelay_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createRelay_result)
createRelay_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Relay, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class editRelay_args(object):
    """
    Attributes:
     - session
     - relay

    """


    def __init__(self, session=None, relay=None,):
        self.session = session
        self.relay = relay

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.relay = Relay()
                    self.relay.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('editRelay_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.relay is not None:
            oprot.writeFieldBegin('relay', TType.STRUCT, 2)
            self.relay.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(editRelay_args)
editRelay_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRUCT, 'relay', [Relay, None], None, ),  # 2
)


class editRelay_result(object):
    """
    Attributes:
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('editRelay_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(editRelay_result)
editRelay_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class deleteRelay_args(object):
    """
    Attributes:
     - session
     - id

    """


    def __init__(self, session=None, id=None,):
        self.session = session
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('deleteRelay_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(deleteRelay_args)
deleteRelay_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
)


class deleteRelay_result(object):
    """
    Attributes:
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('deleteRelay_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(deleteRelay_result)
deleteRelay_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getGeofence_args(object):
    """
    Attributes:
     - session
     - id

    """


    def __init__(self, session=None, id=None,):
        self.session = session
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getGeofence_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getGeofence_args)
getGeofence_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
)


class getGeofence_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Geofence()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getGeofence_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getGeofence_result)
getGeofence_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Geofence, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getChildGeofences_args(object):
    """
    Attributes:
     - session
     - parentGroupId
     - recursive

    """


    def __init__(self, session=None, parentGroupId=None, recursive=None,):
        self.session = session
        self.parentGroupId = parentGroupId
        self.recursive = recursive

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.recursive = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getChildGeofences_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 2)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.recursive is not None:
            oprot.writeFieldBegin('recursive', TType.BOOL, 3)
            oprot.writeBool(self.recursive)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getChildGeofences_args)
getChildGeofences_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'recursive', None, None, ),  # 3
)


class getChildGeofences_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype605, _size602) = iprot.readListBegin()
                    for _i606 in range(_size602):
                        _elem607 = Geofence()
                        _elem607.read(iprot)
                        self.success.append(_elem607)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getChildGeofences_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter608 in self.success:
                iter608.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getChildGeofences_result)
getChildGeofences_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [Geofence, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getGeofenceGeometryWKT_args(object):
    """
    Attributes:
     - session
     - id

    """


    def __init__(self, session=None, id=None,):
        self.session = session
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getGeofenceGeometryWKT_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getGeofenceGeometryWKT_args)
getGeofenceGeometryWKT_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
)


class getGeofenceGeometryWKT_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getGeofenceGeometryWKT_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getGeofenceGeometryWKT_result)
getGeofenceGeometryWKT_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class createGeofence_args(object):
    """
    Attributes:
     - session
     - parentGroupId
     - title
     - color
     - geometryWKT

    """


    def __init__(self, session=None, parentGroupId=None, title=None, color=None, geometryWKT=None,):
        self.session = session
        self.parentGroupId = parentGroupId
        self.title = title
        self.color = color
        self.geometryWKT = geometryWKT

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.color = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.geometryWKT = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createGeofence_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 2)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 3)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.color is not None:
            oprot.writeFieldBegin('color', TType.STRING, 4)
            oprot.writeString(self.color.encode('utf-8') if sys.version_info[0] == 2 else self.color)
            oprot.writeFieldEnd()
        if self.geometryWKT is not None:
            oprot.writeFieldBegin('geometryWKT', TType.STRING, 5)
            oprot.writeString(self.geometryWKT.encode('utf-8') if sys.version_info[0] == 2 else self.geometryWKT)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createGeofence_args)
createGeofence_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'title', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'color', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'geometryWKT', 'UTF8', None, ),  # 5
)


class createGeofence_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Geofence()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createGeofence_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createGeofence_result)
createGeofence_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Geofence, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class editGeofence_args(object):
    """
    Attributes:
     - session
     - geofence

    """


    def __init__(self, session=None, geofence=None,):
        self.session = session
        self.geofence = geofence

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.geofence = Geofence()
                    self.geofence.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('editGeofence_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.geofence is not None:
            oprot.writeFieldBegin('geofence', TType.STRUCT, 2)
            self.geofence.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(editGeofence_args)
editGeofence_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRUCT, 'geofence', [Geofence, None], None, ),  # 2
)


class editGeofence_result(object):
    """
    Attributes:
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('editGeofence_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(editGeofence_result)
editGeofence_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class editGeofenceGeometryWKT_args(object):
    """
    Attributes:
     - session
     - id
     - geometryWKT

    """


    def __init__(self, session=None, id=None, geometryWKT=None,):
        self.session = session
        self.id = id
        self.geometryWKT = geometryWKT

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.geometryWKT = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('editGeofenceGeometryWKT_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.geometryWKT is not None:
            oprot.writeFieldBegin('geometryWKT', TType.STRING, 3)
            oprot.writeString(self.geometryWKT.encode('utf-8') if sys.version_info[0] == 2 else self.geometryWKT)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(editGeofenceGeometryWKT_args)
editGeofenceGeometryWKT_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'geometryWKT', 'UTF8', None, ),  # 3
)


class editGeofenceGeometryWKT_result(object):
    """
    Attributes:
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('editGeofenceGeometryWKT_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(editGeofenceGeometryWKT_result)
editGeofenceGeometryWKT_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class deleteGeofence_args(object):
    """
    Attributes:
     - session
     - id

    """


    def __init__(self, session=None, id=None,):
        self.session = session
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('deleteGeofence_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(deleteGeofence_args)
deleteGeofence_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
)


class deleteGeofence_result(object):
    """
    Attributes:
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('deleteGeofence_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(deleteGeofence_result)
deleteGeofence_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getPlace_args(object):
    """
    Attributes:
     - session
     - id

    """


    def __init__(self, session=None, id=None,):
        self.session = session
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getPlace_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getPlace_args)
getPlace_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
)


class getPlace_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Place()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getPlace_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getPlace_result)
getPlace_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Place, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getChildPlaces_args(object):
    """
    Attributes:
     - session
     - parentGroupId
     - recursive

    """


    def __init__(self, session=None, parentGroupId=None, recursive=None,):
        self.session = session
        self.parentGroupId = parentGroupId
        self.recursive = recursive

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.recursive = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getChildPlaces_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 2)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.recursive is not None:
            oprot.writeFieldBegin('recursive', TType.BOOL, 3)
            oprot.writeBool(self.recursive)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getChildPlaces_args)
getChildPlaces_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'recursive', None, None, ),  # 3
)


class getChildPlaces_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype612, _size609) = iprot.readListBegin()
                    for _i613 in range(_size609):
                        _elem614 = Place()
                        _elem614.read(iprot)
                        self.success.append(_elem614)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getChildPlaces_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter615 in self.success:
                iter615.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getChildPlaces_result)
getChildPlaces_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [Place, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class createPlace_args(object):
    """
    Attributes:
     - session
     - parentGroupId
     - title
     - position

    """


    def __init__(self, session=None, parentGroupId=None, title=None, position=None,):
        self.session = session
        self.parentGroupId = parentGroupId
        self.title = title
        self.position = position

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.position = thrif.dispatch.common.ttypes.GeoPoint()
                    self.position.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createPlace_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 2)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 3)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.position is not None:
            oprot.writeFieldBegin('position', TType.STRUCT, 4)
            self.position.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createPlace_args)
createPlace_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'title', 'UTF8', None, ),  # 3
    (4, TType.STRUCT, 'position', [thrif.dispatch.common.ttypes.GeoPoint, None], None, ),  # 4
)


class createPlace_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Place()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createPlace_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createPlace_result)
createPlace_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Place, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class editPlace_args(object):
    """
    Attributes:
     - session
     - place

    """


    def __init__(self, session=None, place=None,):
        self.session = session
        self.place = place

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.place = Place()
                    self.place.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('editPlace_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.place is not None:
            oprot.writeFieldBegin('place', TType.STRUCT, 2)
            self.place.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(editPlace_args)
editPlace_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRUCT, 'place', [Place, None], None, ),  # 2
)


class editPlace_result(object):
    """
    Attributes:
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('editPlace_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(editPlace_result)
editPlace_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class deletePlace_args(object):
    """
    Attributes:
     - session
     - id

    """


    def __init__(self, session=None, id=None,):
        self.session = session
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('deletePlace_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(deletePlace_args)
deletePlace_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
)


class deletePlace_result(object):
    """
    Attributes:
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('deletePlace_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(deletePlace_result)
deletePlace_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getRoute_args(object):
    """
    Attributes:
     - session
     - routeId

    """


    def __init__(self, session=None, routeId=None,):
        self.session = session
        self.routeId = routeId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.routeId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getRoute_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.routeId is not None:
            oprot.writeFieldBegin('routeId', TType.STRING, 2)
            oprot.writeString(self.routeId.encode('utf-8') if sys.version_info[0] == 2 else self.routeId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getRoute_args)
getRoute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'routeId', 'UTF8', None, ),  # 2
)


class getRoute_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = RouteInfo()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getRoute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getRoute_result)
getRoute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [RouteInfo, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getChildRoutes_args(object):
    """
    Attributes:
     - session
     - parentGroupId
     - recursive

    """


    def __init__(self, session=None, parentGroupId=None, recursive=None,):
        self.session = session
        self.parentGroupId = parentGroupId
        self.recursive = recursive

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.recursive = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getChildRoutes_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 2)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.recursive is not None:
            oprot.writeFieldBegin('recursive', TType.BOOL, 3)
            oprot.writeBool(self.recursive)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getChildRoutes_args)
getChildRoutes_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'recursive', None, None, ),  # 3
)


class getChildRoutes_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype619, _size616) = iprot.readListBegin()
                    for _i620 in range(_size616):
                        _elem621 = RouteInfo()
                        _elem621.read(iprot)
                        self.success.append(_elem621)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getChildRoutes_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter622 in self.success:
                iter622.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getChildRoutes_result)
getChildRoutes_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [RouteInfo, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getRouteLines_args(object):
    """
    Attributes:
     - session
     - routeId
     - viewport

    """


    def __init__(self, session=None, routeId=None, viewport=None,):
        self.session = session
        self.routeId = routeId
        self.viewport = viewport

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.routeId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.viewport = thrif.dispatch.common.ttypes.Viewport()
                    self.viewport.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getRouteLines_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.routeId is not None:
            oprot.writeFieldBegin('routeId', TType.STRING, 2)
            oprot.writeString(self.routeId.encode('utf-8') if sys.version_info[0] == 2 else self.routeId)
            oprot.writeFieldEnd()
        if self.viewport is not None:
            oprot.writeFieldBegin('viewport', TType.STRUCT, 3)
            self.viewport.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getRouteLines_args)
getRouteLines_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'routeId', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'viewport', [thrif.dispatch.common.ttypes.Viewport, None], None, ),  # 3
)


class getRouteLines_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype626, _size623) = iprot.readListBegin()
                    for _i627 in range(_size623):
                        _elem628 = thrif.dispatch.common.ttypes.ClippedPolyline()
                        _elem628.read(iprot)
                        self.success.append(_elem628)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getRouteLines_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter629 in self.success:
                iter629.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getRouteLines_result)
getRouteLines_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [thrif.dispatch.common.ttypes.ClippedPolyline, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class createRoute_args(object):
    """
    Attributes:
     - session
     - parentGroupId
     - title: not empty
     - color: not empty, free format
     - coridorWidth
     - routeControlMethod
     - vehicleRoutingType
     - routeStageSets

    """


    def __init__(self, session=None, parentGroupId=None, title=None, color=None, coridorWidth=None, routeControlMethod=None, vehicleRoutingType=None, routeStageSets=None,):
        self.session = session
        self.parentGroupId = parentGroupId
        self.title = title
        self.color = color
        self.coridorWidth = coridorWidth
        self.routeControlMethod = routeControlMethod
        self.vehicleRoutingType = vehicleRoutingType
        self.routeStageSets = routeStageSets

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.color = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.coridorWidth = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.routeControlMethod = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.vehicleRoutingType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.routeStageSets = []
                    (_etype633, _size630) = iprot.readListBegin()
                    for _i634 in range(_size630):
                        _elem635 = RouteStageSet()
                        _elem635.read(iprot)
                        self.routeStageSets.append(_elem635)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createRoute_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 2)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 3)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.color is not None:
            oprot.writeFieldBegin('color', TType.STRING, 4)
            oprot.writeString(self.color.encode('utf-8') if sys.version_info[0] == 2 else self.color)
            oprot.writeFieldEnd()
        if self.coridorWidth is not None:
            oprot.writeFieldBegin('coridorWidth', TType.DOUBLE, 5)
            oprot.writeDouble(self.coridorWidth)
            oprot.writeFieldEnd()
        if self.routeControlMethod is not None:
            oprot.writeFieldBegin('routeControlMethod', TType.I32, 6)
            oprot.writeI32(self.routeControlMethod)
            oprot.writeFieldEnd()
        if self.vehicleRoutingType is not None:
            oprot.writeFieldBegin('vehicleRoutingType', TType.I32, 7)
            oprot.writeI32(self.vehicleRoutingType)
            oprot.writeFieldEnd()
        if self.routeStageSets is not None:
            oprot.writeFieldBegin('routeStageSets', TType.LIST, 8)
            oprot.writeListBegin(TType.STRUCT, len(self.routeStageSets))
            for iter636 in self.routeStageSets:
                iter636.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createRoute_args)
createRoute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'title', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'color', 'UTF8', None, ),  # 4
    (5, TType.DOUBLE, 'coridorWidth', None, None, ),  # 5
    (6, TType.I32, 'routeControlMethod', None, None, ),  # 6
    (7, TType.I32, 'vehicleRoutingType', None, None, ),  # 7
    (8, TType.LIST, 'routeStageSets', (TType.STRUCT, [RouteStageSet, None], False), None, ),  # 8
)


class createRoute_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = RouteInfo()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createRoute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createRoute_result)
createRoute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [RouteInfo, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class editRoute_args(object):
    """
    Attributes:
     - session
     - route

    """


    def __init__(self, session=None, route=None,):
        self.session = session
        self.route = route

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.route = Route()
                    self.route.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('editRoute_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.route is not None:
            oprot.writeFieldBegin('route', TType.STRUCT, 2)
            self.route.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(editRoute_args)
editRoute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRUCT, 'route', [Route, None], None, ),  # 2
)


class editRoute_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = RouteInfo()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('editRoute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(editRoute_result)
editRoute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [RouteInfo, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class deleteRoute_args(object):
    """
    Attributes:
     - session
     - id

    """


    def __init__(self, session=None, id=None,):
        self.session = session
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('deleteRoute_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(deleteRoute_args)
deleteRoute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
)


class deleteRoute_result(object):
    """
    Attributes:
     - bre
     - be
     - iee
     - uae
     - ade
     - nfe

    """


    def __init__(self, bre=None, be=None, iee=None, uae=None, ade=None, nfe=None,):
        self.bre = bre
        self.be = be
        self.iee = iee
        self.uae = uae
        self.ade = ade
        self.nfe = nfe

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.be = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.iee = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.uae = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.nfe = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('deleteRoute_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.be is not None:
            oprot.writeFieldBegin('be', TType.STRUCT, 2)
            self.be.write(oprot)
            oprot.writeFieldEnd()
        if self.iee is not None:
            oprot.writeFieldBegin('iee', TType.STRUCT, 3)
            self.iee.write(oprot)
            oprot.writeFieldEnd()
        if self.uae is not None:
            oprot.writeFieldBegin('uae', TType.STRUCT, 4)
            self.uae.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.nfe is not None:
            oprot.writeFieldBegin('nfe', TType.STRUCT, 6)
            self.nfe.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(deleteRoute_result)
deleteRoute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'be', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'iee', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'uae', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'nfe', [ObjectNotFound, None], None, ),  # 6
)


class calculateRouteGeometry_args(object):
    """
    Attributes:
     - session
     - stages
     - routingType
     - viewport

    """


    def __init__(self, session=None, stages=None, routingType=None, viewport=None,):
        self.session = session
        self.stages = stages
        self.routingType = routingType
        self.viewport = viewport

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.stages = []
                    (_etype640, _size637) = iprot.readListBegin()
                    for _i641 in range(_size637):
                        _elem642 = RouteStage()
                        _elem642.read(iprot)
                        self.stages.append(_elem642)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.routingType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.viewport = thrif.dispatch.common.ttypes.Viewport()
                    self.viewport.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('calculateRouteGeometry_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.stages is not None:
            oprot.writeFieldBegin('stages', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.stages))
            for iter643 in self.stages:
                iter643.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.routingType is not None:
            oprot.writeFieldBegin('routingType', TType.I32, 3)
            oprot.writeI32(self.routingType)
            oprot.writeFieldEnd()
        if self.viewport is not None:
            oprot.writeFieldBegin('viewport', TType.STRUCT, 4)
            self.viewport.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(calculateRouteGeometry_args)
calculateRouteGeometry_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.LIST, 'stages', (TType.STRUCT, [RouteStage, None], False), None, ),  # 2
    (3, TType.I32, 'routingType', None, None, ),  # 3
    (4, TType.STRUCT, 'viewport', [thrif.dispatch.common.ttypes.Viewport, None], None, ),  # 4
)


class calculateRouteGeometry_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = RouteGeometry()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('calculateRouteGeometry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(calculateRouteGeometry_result)
calculateRouteGeometry_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [RouteGeometry, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getEventsRule_args(object):
    """
    Attributes:
     - session
     - id

    """


    def __init__(self, session=None, id=None,):
        self.session = session
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getEventsRule_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getEventsRule_args)
getEventsRule_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
)


class getEventsRule_result(object):
    """
    Attributes:
     - success
     - bre
     - be
     - iee
     - uae
     - ade
     - nfe

    """


    def __init__(self, success=None, bre=None, be=None, iee=None, uae=None, ade=None, nfe=None,):
        self.success = success
        self.bre = bre
        self.be = be
        self.iee = iee
        self.uae = uae
        self.ade = ade
        self.nfe = nfe

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = EventsRule()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.be = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.iee = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.uae = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.nfe = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getEventsRule_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.be is not None:
            oprot.writeFieldBegin('be', TType.STRUCT, 2)
            self.be.write(oprot)
            oprot.writeFieldEnd()
        if self.iee is not None:
            oprot.writeFieldBegin('iee', TType.STRUCT, 3)
            self.iee.write(oprot)
            oprot.writeFieldEnd()
        if self.uae is not None:
            oprot.writeFieldBegin('uae', TType.STRUCT, 4)
            self.uae.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.nfe is not None:
            oprot.writeFieldBegin('nfe', TType.STRUCT, 6)
            self.nfe.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getEventsRule_result)
getEventsRule_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [EventsRule, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'be', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'iee', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'uae', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'nfe', [ObjectNotFound, None], None, ),  # 6
)


class getChildEventsRules_args(object):
    """
    Attributes:
     - session
     - parentGroupId
     - recursive

    """


    def __init__(self, session=None, parentGroupId=None, recursive=None,):
        self.session = session
        self.parentGroupId = parentGroupId
        self.recursive = recursive

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.recursive = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getChildEventsRules_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 2)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.recursive is not None:
            oprot.writeFieldBegin('recursive', TType.BOOL, 3)
            oprot.writeBool(self.recursive)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getChildEventsRules_args)
getChildEventsRules_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'recursive', None, None, ),  # 3
)


class getChildEventsRules_result(object):
    """
    Attributes:
     - success
     - bre
     - be
     - iee
     - uae
     - ade
     - nfe

    """


    def __init__(self, success=None, bre=None, be=None, iee=None, uae=None, ade=None, nfe=None,):
        self.success = success
        self.bre = bre
        self.be = be
        self.iee = iee
        self.uae = uae
        self.ade = ade
        self.nfe = nfe

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype647, _size644) = iprot.readListBegin()
                    for _i648 in range(_size644):
                        _elem649 = EventsRule()
                        _elem649.read(iprot)
                        self.success.append(_elem649)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.be = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.iee = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.uae = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.nfe = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getChildEventsRules_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter650 in self.success:
                iter650.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.be is not None:
            oprot.writeFieldBegin('be', TType.STRUCT, 2)
            self.be.write(oprot)
            oprot.writeFieldEnd()
        if self.iee is not None:
            oprot.writeFieldBegin('iee', TType.STRUCT, 3)
            self.iee.write(oprot)
            oprot.writeFieldEnd()
        if self.uae is not None:
            oprot.writeFieldBegin('uae', TType.STRUCT, 4)
            self.uae.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.nfe is not None:
            oprot.writeFieldBegin('nfe', TType.STRUCT, 6)
            self.nfe.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getChildEventsRules_result)
getChildEventsRules_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [EventsRule, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'be', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'iee', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'uae', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'nfe', [ObjectNotFound, None], None, ),  # 6
)


class createEventsRule_args(object):
    """
    Attributes:
     - session
     - parentGroupId
     - title
     - monitoringObjectIds
     - eventsConditions
     - eventsConditionsAreDisjunctive
     - generatedEventType
     - actionsCondition
     - actions

    """


    def __init__(self, session=None, parentGroupId=None, title=None, monitoringObjectIds=None, eventsConditions=None, eventsConditionsAreDisjunctive=None, generatedEventType=None, actionsCondition=None, actions=None,):
        self.session = session
        self.parentGroupId = parentGroupId
        self.title = title
        self.monitoringObjectIds = monitoringObjectIds
        self.eventsConditions = eventsConditions
        self.eventsConditionsAreDisjunctive = eventsConditionsAreDisjunctive
        self.generatedEventType = generatedEventType
        self.actionsCondition = actionsCondition
        self.actions = actions

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.monitoringObjectIds = []
                    (_etype654, _size651) = iprot.readListBegin()
                    for _i655 in range(_size651):
                        _elem656 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.monitoringObjectIds.append(_elem656)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.eventsConditions = []
                    (_etype660, _size657) = iprot.readListBegin()
                    for _i661 in range(_size657):
                        _elem662 = GenerateEventsCondition()
                        _elem662.read(iprot)
                        self.eventsConditions.append(_elem662)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.eventsConditionsAreDisjunctive = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.generatedEventType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.actionsCondition = ApplyActionsCondition()
                    self.actionsCondition.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.actions = EventsRuleActions()
                    self.actions.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createEventsRule_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 2)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 3)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.monitoringObjectIds is not None:
            oprot.writeFieldBegin('monitoringObjectIds', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.monitoringObjectIds))
            for iter663 in self.monitoringObjectIds:
                oprot.writeString(iter663.encode('utf-8') if sys.version_info[0] == 2 else iter663)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.eventsConditions is not None:
            oprot.writeFieldBegin('eventsConditions', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.eventsConditions))
            for iter664 in self.eventsConditions:
                iter664.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.eventsConditionsAreDisjunctive is not None:
            oprot.writeFieldBegin('eventsConditionsAreDisjunctive', TType.BOOL, 6)
            oprot.writeBool(self.eventsConditionsAreDisjunctive)
            oprot.writeFieldEnd()
        if self.generatedEventType is not None:
            oprot.writeFieldBegin('generatedEventType', TType.I32, 7)
            oprot.writeI32(self.generatedEventType)
            oprot.writeFieldEnd()
        if self.actionsCondition is not None:
            oprot.writeFieldBegin('actionsCondition', TType.STRUCT, 8)
            self.actionsCondition.write(oprot)
            oprot.writeFieldEnd()
        if self.actions is not None:
            oprot.writeFieldBegin('actions', TType.STRUCT, 9)
            self.actions.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createEventsRule_args)
createEventsRule_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'title', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'monitoringObjectIds', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.LIST, 'eventsConditions', (TType.STRUCT, [GenerateEventsCondition, None], False), None, ),  # 5
    (6, TType.BOOL, 'eventsConditionsAreDisjunctive', None, None, ),  # 6
    (7, TType.I32, 'generatedEventType', None, None, ),  # 7
    (8, TType.STRUCT, 'actionsCondition', [ApplyActionsCondition, None], None, ),  # 8
    (9, TType.STRUCT, 'actions', [EventsRuleActions, None], None, ),  # 9
)


class createEventsRule_result(object):
    """
    Attributes:
     - success
     - bre
     - be
     - iee
     - uae
     - ade

    """


    def __init__(self, success=None, bre=None, be=None, iee=None, uae=None, ade=None,):
        self.success = success
        self.bre = bre
        self.be = be
        self.iee = iee
        self.uae = uae
        self.ade = ade

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = EventsRule()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.be = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.iee = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.uae = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createEventsRule_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.be is not None:
            oprot.writeFieldBegin('be', TType.STRUCT, 2)
            self.be.write(oprot)
            oprot.writeFieldEnd()
        if self.iee is not None:
            oprot.writeFieldBegin('iee', TType.STRUCT, 3)
            self.iee.write(oprot)
            oprot.writeFieldEnd()
        if self.uae is not None:
            oprot.writeFieldBegin('uae', TType.STRUCT, 4)
            self.uae.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createEventsRule_result)
createEventsRule_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [EventsRule, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'be', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'iee', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'uae', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
)


class editEventsRule_args(object):
    """
    Attributes:
     - session
     - modifiedRule

    """


    def __init__(self, session=None, modifiedRule=None,):
        self.session = session
        self.modifiedRule = modifiedRule

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.modifiedRule = EventsRule()
                    self.modifiedRule.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('editEventsRule_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.modifiedRule is not None:
            oprot.writeFieldBegin('modifiedRule', TType.STRUCT, 2)
            self.modifiedRule.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(editEventsRule_args)
editEventsRule_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRUCT, 'modifiedRule', [EventsRule, None], None, ),  # 2
)


class editEventsRule_result(object):
    """
    Attributes:
     - bre
     - be
     - iee
     - uae
     - ade
     - nfe

    """


    def __init__(self, bre=None, be=None, iee=None, uae=None, ade=None, nfe=None,):
        self.bre = bre
        self.be = be
        self.iee = iee
        self.uae = uae
        self.ade = ade
        self.nfe = nfe

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.be = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.iee = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.uae = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.nfe = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('editEventsRule_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.be is not None:
            oprot.writeFieldBegin('be', TType.STRUCT, 2)
            self.be.write(oprot)
            oprot.writeFieldEnd()
        if self.iee is not None:
            oprot.writeFieldBegin('iee', TType.STRUCT, 3)
            self.iee.write(oprot)
            oprot.writeFieldEnd()
        if self.uae is not None:
            oprot.writeFieldBegin('uae', TType.STRUCT, 4)
            self.uae.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.nfe is not None:
            oprot.writeFieldBegin('nfe', TType.STRUCT, 6)
            self.nfe.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(editEventsRule_result)
editEventsRule_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'be', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'iee', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'uae', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'nfe', [ObjectNotFound, None], None, ),  # 6
)


class deleteEventsRule_args(object):
    """
    Attributes:
     - session
     - id

    """


    def __init__(self, session=None, id=None,):
        self.session = session
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('deleteEventsRule_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(deleteEventsRule_args)
deleteEventsRule_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
)


class deleteEventsRule_result(object):
    """
    Attributes:
     - bre
     - be
     - iee
     - uae
     - ade
     - nfe

    """


    def __init__(self, bre=None, be=None, iee=None, uae=None, ade=None, nfe=None,):
        self.bre = bre
        self.be = be
        self.iee = iee
        self.uae = uae
        self.ade = ade
        self.nfe = nfe

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.be = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.iee = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.uae = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.nfe = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('deleteEventsRule_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.be is not None:
            oprot.writeFieldBegin('be', TType.STRUCT, 2)
            self.be.write(oprot)
            oprot.writeFieldEnd()
        if self.iee is not None:
            oprot.writeFieldBegin('iee', TType.STRUCT, 3)
            self.iee.write(oprot)
            oprot.writeFieldEnd()
        if self.uae is not None:
            oprot.writeFieldBegin('uae', TType.STRUCT, 4)
            self.uae.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.nfe is not None:
            oprot.writeFieldBegin('nfe', TType.STRUCT, 6)
            self.nfe.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(deleteEventsRule_result)
deleteEventsRule_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'be', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'iee', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'uae', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'nfe', [ObjectNotFound, None], None, ),  # 6
)


class getTripsInfo_args(object):
    """
    Attributes:
     - session
     - tripsId

    """


    def __init__(self, session=None, tripsId=None,):
        self.session = session
        self.tripsId = tripsId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.tripsId = []
                    (_etype668, _size665) = iprot.readListBegin()
                    for _i669 in range(_size665):
                        _elem670 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.tripsId.append(_elem670)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getTripsInfo_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.tripsId is not None:
            oprot.writeFieldBegin('tripsId', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.tripsId))
            for iter671 in self.tripsId:
                oprot.writeString(iter671.encode('utf-8') if sys.version_info[0] == 2 else iter671)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getTripsInfo_args)
getTripsInfo_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.LIST, 'tripsId', (TType.STRING, 'UTF8', False), None, ),  # 2
)


class getTripsInfo_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype675, _size672) = iprot.readListBegin()
                    for _i676 in range(_size672):
                        _elem677 = Trip()
                        _elem677.read(iprot)
                        self.success.append(_elem677)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getTripsInfo_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter678 in self.success:
                iter678.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getTripsInfo_result)
getTripsInfo_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [Trip, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getTripsId_args(object):
    """
    Attributes:
     - session
     - parentGroupId
     - allowableStatuses
     - recursive

    """


    def __init__(self, session=None, parentGroupId=None, allowableStatuses=None, recursive=None,):
        self.session = session
        self.parentGroupId = parentGroupId
        self.allowableStatuses = allowableStatuses
        self.recursive = recursive

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.allowableStatuses = []
                    (_etype682, _size679) = iprot.readListBegin()
                    for _i683 in range(_size679):
                        _elem684 = iprot.readI32()
                        self.allowableStatuses.append(_elem684)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.recursive = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getTripsId_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 2)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.allowableStatuses is not None:
            oprot.writeFieldBegin('allowableStatuses', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.allowableStatuses))
            for iter685 in self.allowableStatuses:
                oprot.writeI32(iter685)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.recursive is not None:
            oprot.writeFieldBegin('recursive', TType.BOOL, 4)
            oprot.writeBool(self.recursive)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getTripsId_args)
getTripsId_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'allowableStatuses', (TType.I32, None, False), None, ),  # 3
    (4, TType.BOOL, 'recursive', None, None, ),  # 4
)


class getTripsId_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype689, _size686) = iprot.readListBegin()
                    for _i690 in range(_size686):
                        _elem691 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.success.append(_elem691)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getTripsId_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRING, len(self.success))
            for iter692 in self.success:
                oprot.writeString(iter692.encode('utf-8') if sys.version_info[0] == 2 else iter692)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getTripsId_result)
getTripsId_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING, 'UTF8', False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getMonitoringObjectsTrips_args(object):
    """
    Attributes:
     - session
     - monitoringObjectsId

    """


    def __init__(self, session=None, monitoringObjectsId=None,):
        self.session = session
        self.monitoringObjectsId = monitoringObjectsId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.monitoringObjectsId = []
                    (_etype696, _size693) = iprot.readListBegin()
                    for _i697 in range(_size693):
                        _elem698 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.monitoringObjectsId.append(_elem698)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getMonitoringObjectsTrips_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.monitoringObjectsId is not None:
            oprot.writeFieldBegin('monitoringObjectsId', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.monitoringObjectsId))
            for iter699 in self.monitoringObjectsId:
                oprot.writeString(iter699.encode('utf-8') if sys.version_info[0] == 2 else iter699)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getMonitoringObjectsTrips_args)
getMonitoringObjectsTrips_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.LIST, 'monitoringObjectsId', (TType.STRING, 'UTF8', False), None, ),  # 2
)


class getMonitoringObjectsTrips_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.MAP:
                    self.success = {}
                    (_ktype701, _vtype702, _size700) = iprot.readMapBegin()
                    for _i704 in range(_size700):
                        _key705 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val706 = []
                        (_etype710, _size707) = iprot.readListBegin()
                        for _i711 in range(_size707):
                            _elem712 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _val706.append(_elem712)
                        iprot.readListEnd()
                        self.success[_key705] = _val706
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getMonitoringObjectsTrips_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.MAP, 0)
            oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.success))
            for kiter713, viter714 in self.success.items():
                oprot.writeString(kiter713.encode('utf-8') if sys.version_info[0] == 2 else kiter713)
                oprot.writeListBegin(TType.STRING, len(viter714))
                for iter715 in viter714:
                    oprot.writeString(iter715.encode('utf-8') if sys.version_info[0] == 2 else iter715)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getMonitoringObjectsTrips_result)
getMonitoringObjectsTrips_result.thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING, 'UTF8', TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class createTrip_args(object):
    """
    Attributes:
     - session
     - vehicleId
     - routeId
     - tripStageSets
     - startTripUnixTime
     - abortTripUnixTime
     - notificationParams

    """


    def __init__(self, session=None, vehicleId=None, routeId=None, tripStageSets=None, startTripUnixTime=None, abortTripUnixTime=None, notificationParams=None,):
        self.session = session
        self.vehicleId = vehicleId
        self.routeId = routeId
        self.tripStageSets = tripStageSets
        self.startTripUnixTime = startTripUnixTime
        self.abortTripUnixTime = abortTripUnixTime
        self.notificationParams = notificationParams

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.vehicleId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.routeId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.tripStageSets = []
                    (_etype719, _size716) = iprot.readListBegin()
                    for _i720 in range(_size716):
                        _elem721 = TripStageSet()
                        _elem721.read(iprot)
                        self.tripStageSets.append(_elem721)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.startTripUnixTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.abortTripUnixTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.notificationParams = TripNotification()
                    self.notificationParams.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createTrip_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.vehicleId is not None:
            oprot.writeFieldBegin('vehicleId', TType.STRING, 2)
            oprot.writeString(self.vehicleId.encode('utf-8') if sys.version_info[0] == 2 else self.vehicleId)
            oprot.writeFieldEnd()
        if self.routeId is not None:
            oprot.writeFieldBegin('routeId', TType.STRING, 3)
            oprot.writeString(self.routeId.encode('utf-8') if sys.version_info[0] == 2 else self.routeId)
            oprot.writeFieldEnd()
        if self.tripStageSets is not None:
            oprot.writeFieldBegin('tripStageSets', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.tripStageSets))
            for iter722 in self.tripStageSets:
                iter722.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.startTripUnixTime is not None:
            oprot.writeFieldBegin('startTripUnixTime', TType.I64, 5)
            oprot.writeI64(self.startTripUnixTime)
            oprot.writeFieldEnd()
        if self.abortTripUnixTime is not None:
            oprot.writeFieldBegin('abortTripUnixTime', TType.I64, 6)
            oprot.writeI64(self.abortTripUnixTime)
            oprot.writeFieldEnd()
        if self.notificationParams is not None:
            oprot.writeFieldBegin('notificationParams', TType.STRUCT, 7)
            self.notificationParams.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createTrip_args)
createTrip_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'vehicleId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'routeId', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'tripStageSets', (TType.STRUCT, [TripStageSet, None], False), None, ),  # 4
    (5, TType.I64, 'startTripUnixTime', None, None, ),  # 5
    (6, TType.I64, 'abortTripUnixTime', None, None, ),  # 6
    (7, TType.STRUCT, 'notificationParams', [TripNotification, None], None, ),  # 7
)


class createTrip_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Trip()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createTrip_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createTrip_result)
createTrip_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Trip, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class createTripWithAdditionalFields_args(object):
    """
    Attributes:
     - session
     - vehicleId
     - routeId
     - tripStageSets
     - startTripUnixTime
     - abortTripUnixTime
     - notificationParams
     - additionalFields

    """


    def __init__(self, session=None, vehicleId=None, routeId=None, tripStageSets=None, startTripUnixTime=None, abortTripUnixTime=None, notificationParams=None, additionalFields=None,):
        self.session = session
        self.vehicleId = vehicleId
        self.routeId = routeId
        self.tripStageSets = tripStageSets
        self.startTripUnixTime = startTripUnixTime
        self.abortTripUnixTime = abortTripUnixTime
        self.notificationParams = notificationParams
        self.additionalFields = additionalFields

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.vehicleId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.routeId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.tripStageSets = []
                    (_etype726, _size723) = iprot.readListBegin()
                    for _i727 in range(_size723):
                        _elem728 = TripStageSet()
                        _elem728.read(iprot)
                        self.tripStageSets.append(_elem728)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.startTripUnixTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.abortTripUnixTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.notificationParams = TripNotification()
                    self.notificationParams.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.additionalFields = AdditionalFields()
                    self.additionalFields.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createTripWithAdditionalFields_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.vehicleId is not None:
            oprot.writeFieldBegin('vehicleId', TType.STRING, 2)
            oprot.writeString(self.vehicleId.encode('utf-8') if sys.version_info[0] == 2 else self.vehicleId)
            oprot.writeFieldEnd()
        if self.routeId is not None:
            oprot.writeFieldBegin('routeId', TType.STRING, 3)
            oprot.writeString(self.routeId.encode('utf-8') if sys.version_info[0] == 2 else self.routeId)
            oprot.writeFieldEnd()
        if self.tripStageSets is not None:
            oprot.writeFieldBegin('tripStageSets', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.tripStageSets))
            for iter729 in self.tripStageSets:
                iter729.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.startTripUnixTime is not None:
            oprot.writeFieldBegin('startTripUnixTime', TType.I64, 5)
            oprot.writeI64(self.startTripUnixTime)
            oprot.writeFieldEnd()
        if self.abortTripUnixTime is not None:
            oprot.writeFieldBegin('abortTripUnixTime', TType.I64, 6)
            oprot.writeI64(self.abortTripUnixTime)
            oprot.writeFieldEnd()
        if self.notificationParams is not None:
            oprot.writeFieldBegin('notificationParams', TType.STRUCT, 7)
            self.notificationParams.write(oprot)
            oprot.writeFieldEnd()
        if self.additionalFields is not None:
            oprot.writeFieldBegin('additionalFields', TType.STRUCT, 8)
            self.additionalFields.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createTripWithAdditionalFields_args)
createTripWithAdditionalFields_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'vehicleId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'routeId', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'tripStageSets', (TType.STRUCT, [TripStageSet, None], False), None, ),  # 4
    (5, TType.I64, 'startTripUnixTime', None, None, ),  # 5
    (6, TType.I64, 'abortTripUnixTime', None, None, ),  # 6
    (7, TType.STRUCT, 'notificationParams', [TripNotification, None], None, ),  # 7
    (8, TType.STRUCT, 'additionalFields', [AdditionalFields, None], None, ),  # 8
)


class createTripWithAdditionalFields_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Trip()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createTripWithAdditionalFields_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createTripWithAdditionalFields_result)
createTripWithAdditionalFields_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Trip, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class editTrip_args(object):
    """
    Attributes:
     - session
     - trip

    """


    def __init__(self, session=None, trip=None,):
        self.session = session
        self.trip = trip

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.trip = Trip()
                    self.trip.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('editTrip_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.trip is not None:
            oprot.writeFieldBegin('trip', TType.STRUCT, 2)
            self.trip.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(editTrip_args)
editTrip_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRUCT, 'trip', [Trip, None], None, ),  # 2
)


class editTrip_result(object):
    """
    Attributes:
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('editTrip_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(editTrip_result)
editTrip_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class deleteTrip_args(object):
    """
    Attributes:
     - session
     - id

    """


    def __init__(self, session=None, id=None,):
        self.session = session
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('deleteTrip_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(deleteTrip_args)
deleteTrip_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
)


class deleteTrip_result(object):
    """
    Attributes:
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('deleteTrip_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(deleteTrip_result)
deleteTrip_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class cancelTrip_args(object):
    """
    Attributes:
     - session
     - id

    """


    def __init__(self, session=None, id=None,):
        self.session = session
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('cancelTrip_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(cancelTrip_args)
cancelTrip_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
)


class cancelTrip_result(object):
    """
    Attributes:
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('cancelTrip_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(cancelTrip_result)
cancelTrip_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getTripEvents_args(object):
    """
    Attributes:
     - session
     - tripIds
     - eventTypes
     - globalMonotonicIndex

    """


    def __init__(self, session=None, tripIds=None, eventTypes=None, globalMonotonicIndex=None,):
        self.session = session
        self.tripIds = tripIds
        self.eventTypes = eventTypes
        self.globalMonotonicIndex = globalMonotonicIndex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.tripIds = []
                    (_etype733, _size730) = iprot.readListBegin()
                    for _i734 in range(_size730):
                        _elem735 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.tripIds.append(_elem735)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.eventTypes = []
                    (_etype739, _size736) = iprot.readListBegin()
                    for _i740 in range(_size736):
                        _elem741 = iprot.readI32()
                        self.eventTypes.append(_elem741)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.globalMonotonicIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getTripEvents_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.tripIds is not None:
            oprot.writeFieldBegin('tripIds', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.tripIds))
            for iter742 in self.tripIds:
                oprot.writeString(iter742.encode('utf-8') if sys.version_info[0] == 2 else iter742)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.eventTypes is not None:
            oprot.writeFieldBegin('eventTypes', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.eventTypes))
            for iter743 in self.eventTypes:
                oprot.writeI32(iter743)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.globalMonotonicIndex is not None:
            oprot.writeFieldBegin('globalMonotonicIndex', TType.I64, 4)
            oprot.writeI64(self.globalMonotonicIndex)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getTripEvents_args)
getTripEvents_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.LIST, 'tripIds', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.LIST, 'eventTypes', (TType.I32, None, False), None, ),  # 3
    (4, TType.I64, 'globalMonotonicIndex', None, None, ),  # 4
)


class getTripEvents_result(object):
    """
    Attributes:
     - success
     - bre
     - be
     - iee
     - uae
     - ade
     - nfe

    """


    def __init__(self, success=None, bre=None, be=None, iee=None, uae=None, ade=None, nfe=None,):
        self.success = success
        self.bre = bre
        self.be = be
        self.iee = iee
        self.uae = uae
        self.ade = ade
        self.nfe = nfe

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype747, _size744) = iprot.readListBegin()
                    for _i748 in range(_size744):
                        _elem749 = TripEvent()
                        _elem749.read(iprot)
                        self.success.append(_elem749)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.be = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.iee = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.uae = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.nfe = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getTripEvents_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter750 in self.success:
                iter750.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.be is not None:
            oprot.writeFieldBegin('be', TType.STRUCT, 2)
            self.be.write(oprot)
            oprot.writeFieldEnd()
        if self.iee is not None:
            oprot.writeFieldBegin('iee', TType.STRUCT, 3)
            self.iee.write(oprot)
            oprot.writeFieldEnd()
        if self.uae is not None:
            oprot.writeFieldBegin('uae', TType.STRUCT, 4)
            self.uae.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.nfe is not None:
            oprot.writeFieldBegin('nfe', TType.STRUCT, 6)
            self.nfe.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getTripEvents_result)
getTripEvents_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [TripEvent, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'be', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'iee', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'uae', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'nfe', [ObjectNotFound, None], None, ),  # 6
)


class getClippedTripTracks_args(object):
    """
    Attributes:
     - session
     - request
     - columns
     - viewport

    """


    def __init__(self, session=None, request=None, columns=None, viewport=None,):
        self.session = session
        self.request = request
        self.columns = columns
        self.viewport = viewport

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.request = thrif.dispatch.common.ttypes.TripTrackRequest()
                    self.request.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.columns = thrif.dispatch.common.ttypes.PositionRequestFields()
                    self.columns.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.viewport = thrif.dispatch.common.ttypes.Viewport()
                    self.viewport.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getClippedTripTracks_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.request is not None:
            oprot.writeFieldBegin('request', TType.STRUCT, 2)
            self.request.write(oprot)
            oprot.writeFieldEnd()
        if self.columns is not None:
            oprot.writeFieldBegin('columns', TType.STRUCT, 3)
            self.columns.write(oprot)
            oprot.writeFieldEnd()
        if self.viewport is not None:
            oprot.writeFieldBegin('viewport', TType.STRUCT, 4)
            self.viewport.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getClippedTripTracks_args)
getClippedTripTracks_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRUCT, 'request', [thrif.dispatch.common.ttypes.TripTrackRequest, None], None, ),  # 2
    (3, TType.STRUCT, 'columns', [thrif.dispatch.common.ttypes.PositionRequestFields, None], None, ),  # 3
    (4, TType.STRUCT, 'viewport', [thrif.dispatch.common.ttypes.Viewport, None], None, ),  # 4
)


class getClippedTripTracks_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - nfe

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, nfe=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.nfe = nfe

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype754, _size751) = iprot.readListBegin()
                    for _i755 in range(_size751):
                        _elem756 = thrif.dispatch.common.ttypes.Track()
                        _elem756.read(iprot)
                        self.success.append(_elem756)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.nfe = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getClippedTripTracks_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter757 in self.success:
                iter757.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.nfe is not None:
            oprot.writeFieldBegin('nfe', TType.STRUCT, 6)
            self.nfe.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getClippedTripTracks_result)
getClippedTripTracks_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [thrif.dispatch.common.ttypes.Track, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'nfe', [ObjectNotFound, None], None, ),  # 6
)


class getStoreScheme_args(object):
    """
    Attributes:
     - session
     - schemeId

    """


    def __init__(self, session=None, schemeId=None,):
        self.session = session
        self.schemeId = schemeId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.schemeId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getStoreScheme_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.schemeId is not None:
            oprot.writeFieldBegin('schemeId', TType.STRING, 2)
            oprot.writeString(self.schemeId.encode('utf-8') if sys.version_info[0] == 2 else self.schemeId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getStoreScheme_args)
getStoreScheme_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'schemeId', 'UTF8', None, ),  # 2
)


class getStoreScheme_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = StoreScheme()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getStoreScheme_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getStoreScheme_result)
getStoreScheme_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [StoreScheme, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getAdditionalFieldsScheme_args(object):
    """
    Attributes:
     - session
     - parentGroupId
     - extensionForType

    """


    def __init__(self, session=None, parentGroupId=None, extensionForType=None,):
        self.session = session
        self.parentGroupId = parentGroupId
        self.extensionForType = extensionForType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.extensionForType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getAdditionalFieldsScheme_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 2)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.extensionForType is not None:
            oprot.writeFieldBegin('extensionForType', TType.I32, 3)
            oprot.writeI32(self.extensionForType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getAdditionalFieldsScheme_args)
getAdditionalFieldsScheme_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 2
    (3, TType.I32, 'extensionForType', None, None, ),  # 3
)


class getAdditionalFieldsScheme_result(object):
    """
    Attributes:
     - success
     - bre
     - be
     - iee
     - uae
     - ade
     - nfe

    """


    def __init__(self, success=None, bre=None, be=None, iee=None, uae=None, ade=None, nfe=None,):
        self.success = success
        self.bre = bre
        self.be = be
        self.iee = iee
        self.uae = uae
        self.ade = ade
        self.nfe = nfe

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = StoreScheme()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.be = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.iee = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.uae = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.nfe = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getAdditionalFieldsScheme_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.be is not None:
            oprot.writeFieldBegin('be', TType.STRUCT, 2)
            self.be.write(oprot)
            oprot.writeFieldEnd()
        if self.iee is not None:
            oprot.writeFieldBegin('iee', TType.STRUCT, 3)
            self.iee.write(oprot)
            oprot.writeFieldEnd()
        if self.uae is not None:
            oprot.writeFieldBegin('uae', TType.STRUCT, 4)
            self.uae.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.nfe is not None:
            oprot.writeFieldBegin('nfe', TType.STRUCT, 6)
            self.nfe.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getAdditionalFieldsScheme_result)
getAdditionalFieldsScheme_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [StoreScheme, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'be', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'iee', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'uae', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'nfe', [ObjectNotFound, None], None, ),  # 6
)


class createStoreScheme_args(object):
    """
    Attributes:
     - session
     - parentGroupId
     - name
     - fields
     - description

    """


    def __init__(self, session=None, parentGroupId=None, name=None, fields=None, description=None,):
        self.session = session
        self.parentGroupId = parentGroupId
        self.name = name
        self.fields = fields
        self.description = description

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.fields = []
                    (_etype761, _size758) = iprot.readListBegin()
                    for _i762 in range(_size758):
                        _elem763 = StoreField()
                        _elem763.read(iprot)
                        self.fields.append(_elem763)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createStoreScheme_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 2)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.fields is not None:
            oprot.writeFieldBegin('fields', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.fields))
            for iter764 in self.fields:
                iter764.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 5)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createStoreScheme_args)
createStoreScheme_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'fields', (TType.STRUCT, [StoreField, None], False), None, ),  # 4
    (5, TType.STRING, 'description', 'UTF8', None, ),  # 5
)


class createStoreScheme_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = StoreScheme()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createStoreScheme_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createStoreScheme_result)
createStoreScheme_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [StoreScheme, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class deleteStoreScheme_args(object):
    """
    Attributes:
     - session
     - id

    """


    def __init__(self, session=None, id=None,):
        self.session = session
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('deleteStoreScheme_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(deleteStoreScheme_args)
deleteStoreScheme_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
)


class deleteStoreScheme_result(object):
    """
    Attributes:
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('deleteStoreScheme_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(deleteStoreScheme_result)
deleteStoreScheme_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class editStoreScheme_args(object):
    """
    Attributes:
     - session
     - scheme

    """


    def __init__(self, session=None, scheme=None,):
        self.session = session
        self.scheme = scheme

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.scheme = StoreScheme()
                    self.scheme.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('editStoreScheme_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.scheme is not None:
            oprot.writeFieldBegin('scheme', TType.STRUCT, 2)
            self.scheme.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(editStoreScheme_args)
editStoreScheme_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRUCT, 'scheme', [StoreScheme, None], None, ),  # 2
)


class editStoreScheme_result(object):
    """
    Attributes:
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('editStoreScheme_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(editStoreScheme_result)
editStoreScheme_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getCountries_args(object):
    """
    Attributes:
     - session
     - filter

    """


    def __init__(self, session=None, filter=None,):
        self.session = session
        self.filter = filter

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.filter = AddressFilterInfo()
                    self.filter.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getCountries_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.filter is not None:
            oprot.writeFieldBegin('filter', TType.STRUCT, 2)
            self.filter.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getCountries_args)
getCountries_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRUCT, 'filter', [AddressFilterInfo, None], None, ),  # 2
)


class getCountries_result(object):
    """
    Attributes:
     - success
     - bre
     - be
     - iee
     - uae

    """


    def __init__(self, success=None, bre=None, be=None, iee=None, uae=None,):
        self.success = success
        self.bre = bre
        self.be = be
        self.iee = iee
        self.uae = uae

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype768, _size765) = iprot.readListBegin()
                    for _i769 in range(_size765):
                        _elem770 = AddressInfoIt()
                        _elem770.read(iprot)
                        self.success.append(_elem770)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.be = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.iee = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.uae = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getCountries_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter771 in self.success:
                iter771.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.be is not None:
            oprot.writeFieldBegin('be', TType.STRUCT, 2)
            self.be.write(oprot)
            oprot.writeFieldEnd()
        if self.iee is not None:
            oprot.writeFieldBegin('iee', TType.STRUCT, 3)
            self.iee.write(oprot)
            oprot.writeFieldEnd()
        if self.uae is not None:
            oprot.writeFieldBegin('uae', TType.STRUCT, 4)
            self.uae.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getCountries_result)
getCountries_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [AddressInfoIt, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'be', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'iee', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'uae', [Unauthorized, None], None, ),  # 4
)


class getCities_args(object):
    """
    Attributes:
     - session
     - context
     - filter

    """


    def __init__(self, session=None, context=None, filter=None,):
        self.session = session
        self.context = context
        self.filter = filter

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.context = AddressInfoItContext()
                    self.context.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.filter = AddressFilterInfo()
                    self.filter.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getCities_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.context is not None:
            oprot.writeFieldBegin('context', TType.STRUCT, 2)
            self.context.write(oprot)
            oprot.writeFieldEnd()
        if self.filter is not None:
            oprot.writeFieldBegin('filter', TType.STRUCT, 3)
            self.filter.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getCities_args)
getCities_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRUCT, 'context', [AddressInfoItContext, None], None, ),  # 2
    (3, TType.STRUCT, 'filter', [AddressFilterInfo, None], None, ),  # 3
)


class getCities_result(object):
    """
    Attributes:
     - success
     - bre
     - be
     - iee
     - uae

    """


    def __init__(self, success=None, bre=None, be=None, iee=None, uae=None,):
        self.success = success
        self.bre = bre
        self.be = be
        self.iee = iee
        self.uae = uae

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype775, _size772) = iprot.readListBegin()
                    for _i776 in range(_size772):
                        _elem777 = AddressInfoIt()
                        _elem777.read(iprot)
                        self.success.append(_elem777)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.be = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.iee = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.uae = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getCities_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter778 in self.success:
                iter778.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.be is not None:
            oprot.writeFieldBegin('be', TType.STRUCT, 2)
            self.be.write(oprot)
            oprot.writeFieldEnd()
        if self.iee is not None:
            oprot.writeFieldBegin('iee', TType.STRUCT, 3)
            self.iee.write(oprot)
            oprot.writeFieldEnd()
        if self.uae is not None:
            oprot.writeFieldBegin('uae', TType.STRUCT, 4)
            self.uae.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getCities_result)
getCities_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [AddressInfoIt, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'be', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'iee', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'uae', [Unauthorized, None], None, ),  # 4
)


class getStreets_args(object):
    """
    Attributes:
     - session
     - context
     - filter

    """


    def __init__(self, session=None, context=None, filter=None,):
        self.session = session
        self.context = context
        self.filter = filter

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.context = AddressInfoItContext()
                    self.context.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.filter = AddressFilterInfo()
                    self.filter.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getStreets_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.context is not None:
            oprot.writeFieldBegin('context', TType.STRUCT, 2)
            self.context.write(oprot)
            oprot.writeFieldEnd()
        if self.filter is not None:
            oprot.writeFieldBegin('filter', TType.STRUCT, 3)
            self.filter.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getStreets_args)
getStreets_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRUCT, 'context', [AddressInfoItContext, None], None, ),  # 2
    (3, TType.STRUCT, 'filter', [AddressFilterInfo, None], None, ),  # 3
)


class getStreets_result(object):
    """
    Attributes:
     - success
     - bre
     - be
     - iee
     - uae

    """


    def __init__(self, success=None, bre=None, be=None, iee=None, uae=None,):
        self.success = success
        self.bre = bre
        self.be = be
        self.iee = iee
        self.uae = uae

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype782, _size779) = iprot.readListBegin()
                    for _i783 in range(_size779):
                        _elem784 = AddressInfoIt()
                        _elem784.read(iprot)
                        self.success.append(_elem784)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.be = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.iee = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.uae = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getStreets_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter785 in self.success:
                iter785.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.be is not None:
            oprot.writeFieldBegin('be', TType.STRUCT, 2)
            self.be.write(oprot)
            oprot.writeFieldEnd()
        if self.iee is not None:
            oprot.writeFieldBegin('iee', TType.STRUCT, 3)
            self.iee.write(oprot)
            oprot.writeFieldEnd()
        if self.uae is not None:
            oprot.writeFieldBegin('uae', TType.STRUCT, 4)
            self.uae.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getStreets_result)
getStreets_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [AddressInfoIt, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'be', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'iee', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'uae', [Unauthorized, None], None, ),  # 4
)


class getBuildings_args(object):
    """
    Attributes:
     - session
     - context
     - filter

    """


    def __init__(self, session=None, context=None, filter=None,):
        self.session = session
        self.context = context
        self.filter = filter

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.context = AddressInfoItContext()
                    self.context.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.filter = AddressFilterInfo()
                    self.filter.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getBuildings_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.context is not None:
            oprot.writeFieldBegin('context', TType.STRUCT, 2)
            self.context.write(oprot)
            oprot.writeFieldEnd()
        if self.filter is not None:
            oprot.writeFieldBegin('filter', TType.STRUCT, 3)
            self.filter.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getBuildings_args)
getBuildings_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRUCT, 'context', [AddressInfoItContext, None], None, ),  # 2
    (3, TType.STRUCT, 'filter', [AddressFilterInfo, None], None, ),  # 3
)


class getBuildings_result(object):
    """
    Attributes:
     - success
     - bre
     - be
     - iee
     - uae

    """


    def __init__(self, success=None, bre=None, be=None, iee=None, uae=None,):
        self.success = success
        self.bre = bre
        self.be = be
        self.iee = iee
        self.uae = uae

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype789, _size786) = iprot.readListBegin()
                    for _i790 in range(_size786):
                        _elem791 = AddressInfoIt()
                        _elem791.read(iprot)
                        self.success.append(_elem791)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.be = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.iee = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.uae = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getBuildings_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter792 in self.success:
                iter792.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.be is not None:
            oprot.writeFieldBegin('be', TType.STRUCT, 2)
            self.be.write(oprot)
            oprot.writeFieldEnd()
        if self.iee is not None:
            oprot.writeFieldBegin('iee', TType.STRUCT, 3)
            self.iee.write(oprot)
            oprot.writeFieldEnd()
        if self.uae is not None:
            oprot.writeFieldBegin('uae', TType.STRUCT, 4)
            self.uae.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getBuildings_result)
getBuildings_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [AddressInfoIt, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'be', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'iee', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'uae', [Unauthorized, None], None, ),  # 4
)


class getPoint_args(object):
    """
    Attributes:
     - session
     - context

    """


    def __init__(self, session=None, context=None,):
        self.session = session
        self.context = context

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.context = AddressInfoItContext()
                    self.context.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getPoint_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.context is not None:
            oprot.writeFieldBegin('context', TType.STRUCT, 2)
            self.context.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getPoint_args)
getPoint_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRUCT, 'context', [AddressInfoItContext, None], None, ),  # 2
)


class getPoint_result(object):
    """
    Attributes:
     - success
     - bre
     - be
     - iee
     - uae

    """


    def __init__(self, success=None, bre=None, be=None, iee=None, uae=None,):
        self.success = success
        self.bre = bre
        self.be = be
        self.iee = iee
        self.uae = uae

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrif.dispatch.common.ttypes.GeoPoint()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.be = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.iee = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.uae = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getPoint_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.be is not None:
            oprot.writeFieldBegin('be', TType.STRUCT, 2)
            self.be.write(oprot)
            oprot.writeFieldEnd()
        if self.iee is not None:
            oprot.writeFieldBegin('iee', TType.STRUCT, 3)
            self.iee.write(oprot)
            oprot.writeFieldEnd()
        if self.uae is not None:
            oprot.writeFieldBegin('uae', TType.STRUCT, 4)
            self.uae.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getPoint_result)
getPoint_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [thrif.dispatch.common.ttypes.GeoPoint, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'be', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'iee', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'uae', [Unauthorized, None], None, ),  # 4
)


class getSensorConfigurations_args(object):
    """
    Attributes:
     - session
     - monitoringObjectId

    """


    def __init__(self, session=None, monitoringObjectId=None,):
        self.session = session
        self.monitoringObjectId = monitoringObjectId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.monitoringObjectId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getSensorConfigurations_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.monitoringObjectId is not None:
            oprot.writeFieldBegin('monitoringObjectId', TType.STRING, 2)
            oprot.writeString(self.monitoringObjectId.encode('utf-8') if sys.version_info[0] == 2 else self.monitoringObjectId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getSensorConfigurations_args)
getSensorConfigurations_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'monitoringObjectId', 'UTF8', None, ),  # 2
)


class getSensorConfigurations_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype796, _size793) = iprot.readListBegin()
                    for _i797 in range(_size793):
                        _elem798 = SensorConfiguration()
                        _elem798.read(iprot)
                        self.success.append(_elem798)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getSensorConfigurations_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter799 in self.success:
                iter799.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getSensorConfigurations_result)
getSensorConfigurations_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [SensorConfiguration, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class setSensorConfigurations_args(object):
    """
    Attributes:
     - session
     - monitoringObjectId
     - sensorConfigurations

    """


    def __init__(self, session=None, monitoringObjectId=None, sensorConfigurations=None,):
        self.session = session
        self.monitoringObjectId = monitoringObjectId
        self.sensorConfigurations = sensorConfigurations

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.monitoringObjectId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.sensorConfigurations = []
                    (_etype803, _size800) = iprot.readListBegin()
                    for _i804 in range(_size800):
                        _elem805 = SensorConfiguration()
                        _elem805.read(iprot)
                        self.sensorConfigurations.append(_elem805)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('setSensorConfigurations_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.monitoringObjectId is not None:
            oprot.writeFieldBegin('monitoringObjectId', TType.STRING, 2)
            oprot.writeString(self.monitoringObjectId.encode('utf-8') if sys.version_info[0] == 2 else self.monitoringObjectId)
            oprot.writeFieldEnd()
        if self.sensorConfigurations is not None:
            oprot.writeFieldBegin('sensorConfigurations', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.sensorConfigurations))
            for iter806 in self.sensorConfigurations:
                iter806.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(setSensorConfigurations_args)
setSensorConfigurations_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'monitoringObjectId', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'sensorConfigurations', (TType.STRUCT, [SensorConfiguration, None], False), None, ),  # 3
)


class setSensorConfigurations_result(object):
    """
    Attributes:
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('setSensorConfigurations_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(setSensorConfigurations_result)
setSensorConfigurations_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getTrackSensorConfigurations_args(object):
    """
    Attributes:
     - session
     - monitoringObjectId

    """


    def __init__(self, session=None, monitoringObjectId=None,):
        self.session = session
        self.monitoringObjectId = monitoringObjectId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.monitoringObjectId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getTrackSensorConfigurations_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.monitoringObjectId is not None:
            oprot.writeFieldBegin('monitoringObjectId', TType.STRING, 2)
            oprot.writeString(self.monitoringObjectId.encode('utf-8') if sys.version_info[0] == 2 else self.monitoringObjectId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getTrackSensorConfigurations_args)
getTrackSensorConfigurations_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'monitoringObjectId', 'UTF8', None, ),  # 2
)


class getTrackSensorConfigurations_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype810, _size807) = iprot.readListBegin()
                    for _i811 in range(_size807):
                        _elem812 = TrackSensorConfiguration()
                        _elem812.read(iprot)
                        self.success.append(_elem812)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getTrackSensorConfigurations_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter813 in self.success:
                iter813.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getTrackSensorConfigurations_result)
getTrackSensorConfigurations_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [TrackSensorConfiguration, None], False), None, ),  # 0
)


class createSensorConfigurationSet_args(object):
    """
    Attributes:
     - session
     - parentGroupId
     - name
     - sensorConfigurations

    """


    def __init__(self, session=None, parentGroupId=None, name=None, sensorConfigurations=None,):
        self.session = session
        self.parentGroupId = parentGroupId
        self.name = name
        self.sensorConfigurations = sensorConfigurations

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.sensorConfigurations = []
                    (_etype817, _size814) = iprot.readListBegin()
                    for _i818 in range(_size814):
                        _elem819 = SensorConfiguration()
                        _elem819.read(iprot)
                        self.sensorConfigurations.append(_elem819)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createSensorConfigurationSet_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 2)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.sensorConfigurations is not None:
            oprot.writeFieldBegin('sensorConfigurations', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.sensorConfigurations))
            for iter820 in self.sensorConfigurations:
                iter820.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createSensorConfigurationSet_args)
createSensorConfigurationSet_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'sensorConfigurations', (TType.STRUCT, [SensorConfiguration, None], False), None, ),  # 4
)


class createSensorConfigurationSet_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SensorConfigurationSet()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createSensorConfigurationSet_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 5)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createSensorConfigurationSet_result)
createSensorConfigurationSet_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SensorConfigurationSet, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 5
)


class getSensorConfigurationSet_args(object):
    """
    Attributes:
     - session
     - id

    """


    def __init__(self, session=None, id=None,):
        self.session = session
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getSensorConfigurationSet_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getSensorConfigurationSet_args)
getSensorConfigurationSet_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
)


class getSensorConfigurationSet_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = SensorConfigurationSet()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getSensorConfigurationSet_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 5)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getSensorConfigurationSet_result)
getSensorConfigurationSet_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [SensorConfigurationSet, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 5
)


class getChildSensorConfigurationSet_args(object):
    """
    Attributes:
     - session
     - parentGroupId
     - recursive

    """


    def __init__(self, session=None, parentGroupId=None, recursive=None,):
        self.session = session
        self.parentGroupId = parentGroupId
        self.recursive = recursive

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.recursive = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getChildSensorConfigurationSet_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 2)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.recursive is not None:
            oprot.writeFieldBegin('recursive', TType.BOOL, 3)
            oprot.writeBool(self.recursive)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getChildSensorConfigurationSet_args)
getChildSensorConfigurationSet_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'recursive', None, None, ),  # 3
)


class getChildSensorConfigurationSet_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype824, _size821) = iprot.readListBegin()
                    for _i825 in range(_size821):
                        _elem826 = SensorConfigurationSet()
                        _elem826.read(iprot)
                        self.success.append(_elem826)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getChildSensorConfigurationSet_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter827 in self.success:
                iter827.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getChildSensorConfigurationSet_result)
getChildSensorConfigurationSet_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [SensorConfigurationSet, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class editSensorConfigurationSet_args(object):
    """
    Attributes:
     - session
     - sensorConfigurationSet

    """


    def __init__(self, session=None, sensorConfigurationSet=None,):
        self.session = session
        self.sensorConfigurationSet = sensorConfigurationSet

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sensorConfigurationSet = SensorConfigurationSet()
                    self.sensorConfigurationSet.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('editSensorConfigurationSet_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.sensorConfigurationSet is not None:
            oprot.writeFieldBegin('sensorConfigurationSet', TType.STRUCT, 2)
            self.sensorConfigurationSet.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(editSensorConfigurationSet_args)
editSensorConfigurationSet_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRUCT, 'sensorConfigurationSet', [SensorConfigurationSet, None], None, ),  # 2
)


class editSensorConfigurationSet_result(object):
    """
    Attributes:
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('editSensorConfigurationSet_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(editSensorConfigurationSet_result)
editSensorConfigurationSet_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class deleteSensorConfigurationSet_args(object):
    """
    Attributes:
     - session
     - id

    """


    def __init__(self, session=None, id=None,):
        self.session = session
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('deleteSensorConfigurationSet_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(deleteSensorConfigurationSet_args)
deleteSensorConfigurationSet_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
)


class deleteSensorConfigurationSet_result(object):
    """
    Attributes:
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('deleteSensorConfigurationSet_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(deleteSensorConfigurationSet_result)
deleteSensorConfigurationSet_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getMonitoringObjectChart_args(object):
    """
    Attributes:
     - session
     - request
     - columns
     - lod

    """


    def __init__(self, session=None, request=None, columns=None, lod=None,):
        self.session = session
        self.request = request
        self.columns = columns
        self.lod = lod

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.request = thrif.dispatch.common.ttypes.VehicleHistoryTrackRequest()
                    self.request.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.columns = []
                    (_etype831, _size828) = iprot.readListBegin()
                    for _i832 in range(_size828):
                        _elem833 = thrif.dispatch.common.ttypes.ChartCurveId()
                        _elem833.read(iprot)
                        self.columns.append(_elem833)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.lod = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getMonitoringObjectChart_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.request is not None:
            oprot.writeFieldBegin('request', TType.STRUCT, 2)
            self.request.write(oprot)
            oprot.writeFieldEnd()
        if self.columns is not None:
            oprot.writeFieldBegin('columns', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.columns))
            for iter834 in self.columns:
                iter834.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.lod is not None:
            oprot.writeFieldBegin('lod', TType.I32, 4)
            oprot.writeI32(self.lod)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getMonitoringObjectChart_args)
getMonitoringObjectChart_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRUCT, 'request', [thrif.dispatch.common.ttypes.VehicleHistoryTrackRequest, None], None, ),  # 2
    (3, TType.LIST, 'columns', (TType.STRUCT, [thrif.dispatch.common.ttypes.ChartCurveId, None], False), None, ),  # 3
    (4, TType.I32, 'lod', None, None, ),  # 4
)


class getMonitoringObjectChart_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype838, _size835) = iprot.readListBegin()
                    for _i839 in range(_size835):
                        _elem840 = thrif.dispatch.common.ttypes.ChartCurve()
                        _elem840.read(iprot)
                        self.success.append(_elem840)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getMonitoringObjectChart_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter841 in self.success:
                iter841.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getMonitoringObjectChart_result)
getMonitoringObjectChart_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [thrif.dispatch.common.ttypes.ChartCurve, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
)


class getMonitoringObjectsTracksRects_args(object):
    """
    Attributes:
     - session
     - requests

    """


    def __init__(self, session=None, requests=None,):
        self.session = session
        self.requests = requests

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.requests = []
                    (_etype845, _size842) = iprot.readListBegin()
                    for _i846 in range(_size842):
                        _elem847 = thrif.dispatch.common.ttypes.VehicleHistoryTrackRequest()
                        _elem847.read(iprot)
                        self.requests.append(_elem847)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getMonitoringObjectsTracksRects_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.requests is not None:
            oprot.writeFieldBegin('requests', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.requests))
            for iter848 in self.requests:
                iter848.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getMonitoringObjectsTracksRects_args)
getMonitoringObjectsTracksRects_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.LIST, 'requests', (TType.STRUCT, [thrif.dispatch.common.ttypes.VehicleHistoryTrackRequest, None], False), None, ),  # 2
)


class getMonitoringObjectsTracksRects_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype852, _size849) = iprot.readListBegin()
                    for _i853 in range(_size849):
                        _elem854 = thrif.dispatch.common.ttypes.GeoRect()
                        _elem854.read(iprot)
                        self.success.append(_elem854)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getMonitoringObjectsTracksRects_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter855 in self.success:
                iter855.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getMonitoringObjectsTracksRects_result)
getMonitoringObjectsTracksRects_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [thrif.dispatch.common.ttypes.GeoRect, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
)


class changeVehicleCreationTime_args(object):
    """
    Attributes:
     - session
     - vehicleId
     - timestamp

    """


    def __init__(self, session=None, vehicleId=None, timestamp=None,):
        self.session = session
        self.vehicleId = vehicleId
        self.timestamp = timestamp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.vehicleId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('changeVehicleCreationTime_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.vehicleId is not None:
            oprot.writeFieldBegin('vehicleId', TType.STRING, 2)
            oprot.writeString(self.vehicleId.encode('utf-8') if sys.version_info[0] == 2 else self.vehicleId)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 3)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(changeVehicleCreationTime_args)
changeVehicleCreationTime_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'vehicleId', 'UTF8', None, ),  # 2
    (3, TType.I64, 'timestamp', None, None, ),  # 3
)


class changeVehicleCreationTime_result(object):
    """
    Attributes:
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('changeVehicleCreationTime_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(changeVehicleCreationTime_result)
changeVehicleCreationTime_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class getChildrenReports_args(object):
    """
    Attributes:
     - session
     - parentGroupId
     - recursive

    """


    def __init__(self, session=None, parentGroupId=None, recursive=None,):
        self.session = session
        self.parentGroupId = parentGroupId
        self.recursive = recursive

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.recursive = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getChildrenReports_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 2)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.recursive is not None:
            oprot.writeFieldBegin('recursive', TType.BOOL, 3)
            oprot.writeBool(self.recursive)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getChildrenReports_args)
getChildrenReports_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'recursive', None, None, ),  # 3
)


class getChildrenReports_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ue
     - ade

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ue=None, ade=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype859, _size856) = iprot.readListBegin()
                    for _i860 in range(_size856):
                        _elem861 = ReportInfo()
                        _elem861.read(iprot)
                        self.success.append(_elem861)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getChildrenReports_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter862 in self.success:
                iter862.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getChildrenReports_result)
getChildrenReports_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [ReportInfo, None], False), None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
)


class sendReport_args(object):
    """
    Attributes:
     - session
     - email
     - parameters

    """


    def __init__(self, session=None, email=None, parameters=None,):
        self.session = session
        self.email = email
        self.parameters = parameters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.parameters = ReportRequest()
                    self.parameters.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sendReport_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 2)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.parameters is not None:
            oprot.writeFieldBegin('parameters', TType.STRUCT, 3)
            self.parameters.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sendReport_args)
sendReport_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRING, 'email', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'parameters', [ReportRequest, None], None, ),  # 3
)


class sendReport_result(object):
    """
    Attributes:
     - bre
     - bse
     - ise
     - ue
     - ade
     - one

    """


    def __init__(self, bre=None, bse=None, ise=None, ue=None, ade=None, one=None,):
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ue = ue
        self.ade = ade
        self.one = one

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ue = Unauthorized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.one = ObjectNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sendReport_result')
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ue is not None:
            oprot.writeFieldBegin('ue', TType.STRUCT, 4)
            self.ue.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 5)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.one is not None:
            oprot.writeFieldBegin('one', TType.STRUCT, 6)
            self.one.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sendReport_result)
sendReport_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ue', [Unauthorized, None], None, ),  # 4
    (5, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 5
    (6, TType.STRUCT, 'one', [ObjectNotFound, None], None, ),  # 6
)


class buildScreenReport_args(object):
    """
    Attributes:
     - session
     - parameters

    """


    def __init__(self, session=None, parameters=None,):
        self.session = session
        self.parameters = parameters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.session = Session()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.parameters = ReportRequest()
                    self.parameters.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('buildScreenReport_args')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 1)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.parameters is not None:
            oprot.writeFieldBegin('parameters', TType.STRUCT, 2)
            self.parameters.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(buildScreenReport_args)
buildScreenReport_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'session', [Session, None], None, ),  # 1
    (2, TType.STRUCT, 'parameters', [ReportRequest, None], None, ),  # 2
)


class buildScreenReport_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ScreenReport()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('buildScreenReport_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(buildScreenReport_result)
buildScreenReport_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ScreenReport, None], None, ),  # 0
)
fix_spec(all_structs)
del all_structs
