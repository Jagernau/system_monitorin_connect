#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import thrif.dispatch.common.ttypes
import thrif.dispatch.server.thrif.backend.eventtype.ttypes
import thrif.dispatch.server.thrif.backend.sensortype.ttypes

from thrift.transport import TTransport
all_structs = []


class FilterType(object):
    AND = 0
    OR = 1

    _VALUES_TO_NAMES = {
        0: "AND",
        1: "OR",
    }

    _NAMES_TO_VALUES = {
        "AND": 0,
        "OR": 1,
    }


class ExtensionForStoreType(object):
    Company = 0
    Vehicle = 1
    Driver = 2
    Geofence = 3
    Trip = 4

    _VALUES_TO_NAMES = {
        0: "Company",
        1: "Vehicle",
        2: "Driver",
        3: "Geofence",
        4: "Trip",
    }

    _NAMES_TO_VALUES = {
        "Company": 0,
        "Vehicle": 1,
        "Driver": 2,
        "Geofence": 3,
        "Trip": 4,
    }


class TrackerStatus(object):
    InstallationDone = 0
    CheckDone = 1
    IdentificationDone = 2
    RequiredAutoIndentification = 3
    AutoIdentificationDone = 4

    _VALUES_TO_NAMES = {
        0: "InstallationDone",
        1: "CheckDone",
        2: "IdentificationDone",
        3: "RequiredAutoIndentification",
        4: "AutoIdentificationDone",
    }

    _NAMES_TO_VALUES = {
        "InstallationDone": 0,
        "CheckDone": 1,
        "IdentificationDone": 2,
        "RequiredAutoIndentification": 3,
        "AutoIdentificationDone": 4,
    }


class CommandStatusCode(object):
    InProgress = 0
    Done = 1
    Error = 2
    TimeOut = 3

    _VALUES_TO_NAMES = {
        0: "InProgress",
        1: "Done",
        2: "Error",
        3: "TimeOut",
    }

    _NAMES_TO_VALUES = {
        "InProgress": 0,
        "Done": 1,
        "Error": 2,
        "TimeOut": 3,
    }


class RouteControlMethod(object):
    RouteStage = 1
    RouteStageAndLine = 2

    _VALUES_TO_NAMES = {
        1: "RouteStage",
        2: "RouteStageAndLine",
    }

    _NAMES_TO_VALUES = {
        "RouteStage": 1,
        "RouteStageAndLine": 2,
    }


class VehicleRoutingType(object):
    CarOrMoto = 2
    Taxi = 3
    Bus = 4
    Emergency = 5
    Delivery = 6
    Truck = 7

    _VALUES_TO_NAMES = {
        2: "CarOrMoto",
        3: "Taxi",
        4: "Bus",
        5: "Emergency",
        6: "Delivery",
        7: "Truck",
    }

    _NAMES_TO_VALUES = {
        "CarOrMoto": 2,
        "Taxi": 3,
        "Bus": 4,
        "Emergency": 5,
        "Delivery": 6,
        "Truck": 7,
    }


class RouteStageType(object):
    CorrectionPoint = 1
    WayPoint = 2
    Places = 3
    Geofences = 4

    _VALUES_TO_NAMES = {
        1: "CorrectionPoint",
        2: "WayPoint",
        3: "Places",
        4: "Geofences",
    }

    _NAMES_TO_VALUES = {
        "CorrectionPoint": 1,
        "WayPoint": 2,
        "Places": 3,
        "Geofences": 4,
    }


class SensorConditionType(object):
    greater = 1
    less = 2
    greaterOrEqual = 3
    lessOrEqual = 4
    inside = 5
    outside = 6
    on = 7
    off = 8
    unset = 9

    _VALUES_TO_NAMES = {
        1: "greater",
        2: "less",
        3: "greaterOrEqual",
        4: "lessOrEqual",
        5: "inside",
        6: "outside",
        7: "on",
        8: "off",
        9: "unset",
    }

    _NAMES_TO_VALUES = {
        "greater": 1,
        "less": 2,
        "greaterOrEqual": 3,
        "lessOrEqual": 4,
        "inside": 5,
        "outside": 6,
        "on": 7,
        "off": 8,
        "unset": 9,
    }


class BoundaryCondition(object):
    beginOnly = 0
    endOnly = 1
    both = 2

    _VALUES_TO_NAMES = {
        0: "beginOnly",
        1: "endOnly",
        2: "both",
    }

    _NAMES_TO_VALUES = {
        "beginOnly": 0,
        "endOnly": 1,
        "both": 2,
    }


class TripStatus(object):
    planned = 0
    started = 1
    ended = 4
    aborted = 5
    canceled = 6

    _VALUES_TO_NAMES = {
        0: "planned",
        1: "started",
        4: "ended",
        5: "aborted",
        6: "canceled",
    }

    _NAMES_TO_VALUES = {
        "planned": 0,
        "started": 1,
        "ended": 4,
        "aborted": 5,
        "canceled": 6,
    }


class ReportFormat(object):
    """
    < Moment, when the tracker has broken down, now by default, unix time

    """
    SCREEN = 0
    CSV_FORMATTED = 1
    CSV = 2
    CSV_1C = 3
    PDF = 4
    XLSX = 5
    DOCX = 6

    _VALUES_TO_NAMES = {
        0: "SCREEN",
        1: "CSV_FORMATTED",
        2: "CSV",
        3: "CSV_1C",
        4: "PDF",
        5: "XLSX",
        6: "DOCX",
    }

    _NAMES_TO_VALUES = {
        "SCREEN": 0,
        "CSV_FORMATTED": 1,
        "CSV": 2,
        "CSV_1C": 3,
        "PDF": 4,
        "XLSX": 5,
        "DOCX": 6,
    }


class ReportArgumentType(object):
    VEHICLE = 0
    GROUP = 1
    DRIVER = 2
    ROUTE = 3
    SCHEDULE = 4
    GEOFENCE = 5

    _VALUES_TO_NAMES = {
        0: "VEHICLE",
        1: "GROUP",
        2: "DRIVER",
        3: "ROUTE",
        4: "SCHEDULE",
        5: "GEOFENCE",
    }

    _NAMES_TO_VALUES = {
        "VEHICLE": 0,
        "GROUP": 1,
        "DRIVER": 2,
        "ROUTE": 3,
        "SCHEDULE": 4,
        "GEOFENCE": 5,
    }


class ReportStateFilter(object):
    TRIP_ONLY = 0
    STOP_ONLY = 1
    IGNITION_ON = 2
    IGNITION_OFF = 3
    FUELING_ON = 4
    FUELING_OFF = 5
    POWER_ON = 6
    POWER_OFF = 7

    _VALUES_TO_NAMES = {
        0: "TRIP_ONLY",
        1: "STOP_ONLY",
        2: "IGNITION_ON",
        3: "IGNITION_OFF",
        4: "FUELING_ON",
        5: "FUELING_OFF",
        6: "POWER_ON",
        7: "POWER_OFF",
    }

    _NAMES_TO_VALUES = {
        "TRIP_ONLY": 0,
        "STOP_ONLY": 1,
        "IGNITION_ON": 2,
        "IGNITION_OFF": 3,
        "FUELING_ON": 4,
        "FUELING_OFF": 5,
        "POWER_ON": 6,
        "POWER_OFF": 7,
    }


class ReportFilterType(object):
    STATE_FILTER = 0
    WORKING_TIME_FILTER = 1

    _VALUES_TO_NAMES = {
        0: "STATE_FILTER",
        1: "WORKING_TIME_FILTER",
    }

    _NAMES_TO_VALUES = {
        "STATE_FILTER": 0,
        "WORKING_TIME_FILTER": 1,
    }


class BadRequest(TException):
    """
    Attributes:
     - message

    """


    def __init__(self, message=None,):
        super(BadRequest, self).__setattr__('message', message)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.message, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BadRequest')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InternalServerError(TException):
    """
    Attributes:
     - message

    """


    def __init__(self, message=None,):
        super(InternalServerError, self).__setattr__('message', message)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.message, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InternalServerError')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Busy(TException):
    """
    Attributes:
     - message

    """


    def __init__(self, message=None,):
        super(Busy, self).__setattr__('message', message)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.message, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Busy')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Unauthorized(TException):
    """
    Attributes:
     - message

    """


    def __init__(self, message=None,):
        super(Unauthorized, self).__setattr__('message', message)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.message, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Unauthorized')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AccessDenied(TException):
    """
    Attributes:
     - message

    """


    def __init__(self, message=None,):
        super(AccessDenied, self).__setattr__('message', message)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.message, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AccessDenied')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ObjectNotFound(TException):
    """
    Attributes:
     - message

    """


    def __init__(self, message=None,):
        super(ObjectNotFound, self).__setattr__('message', message)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.message, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ObjectNotFound')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserLicenseExpired(TException):
    """
    Attributes:
     - message

    """


    def __init__(self, message=None,):
        super(UserLicenseExpired, self).__setattr__('message', message)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.message, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UserLicenseExpired')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TrialIsNotActivated(TException):
    """
    Attributes:
     - message

    """


    def __init__(self, message=None,):
        super(TrialIsNotActivated, self).__setattr__('message', message)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.message, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TrialIsNotActivated')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LoginAlreadyExists(TException):
    """
    Attributes:
     - message

    """


    def __init__(self, message=None,):
        super(LoginAlreadyExists, self).__setattr__('message', message)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.message, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LoginAlreadyExists')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LoginFailed(TException):
    """
    Attributes:
     - message

    """


    def __init__(self, message=None,):
        super(LoginFailed, self).__setattr__('message', message)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.message, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LoginFailed')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TrackerAlreadyUsed(TException):
    """
    Attributes:
     - message

    """


    def __init__(self, message=None,):
        super(TrackerAlreadyUsed, self).__setattr__('message', message)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.message, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TrackerAlreadyUsed')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ObjectIdMustBeEmptyOnObjectCreation(TException):
    """
    Attributes:
     - message

    """


    def __init__(self, message=None,):
        super(ObjectIdMustBeEmptyOnObjectCreation, self).__setattr__('message', message)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.message, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ObjectIdMustBeEmptyOnObjectCreation')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StoreField(object):
    """
    Attributes:
     - id
     - title
     - description
     - inherited

    """


    def __init__(self, id=None, title=None, description=None, inherited=None,):
        self.id = id
        self.title = title
        self.description = description
        self.inherited = inherited

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.inherited = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StoreField')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 2)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 3)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.inherited is not None:
            oprot.writeFieldBegin('inherited', TType.BOOL, 4)
            oprot.writeBool(self.inherited)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StoreSchemeId(object):
    """
    Only one should be valid

    Attributes:
     - id
     - extensionFor

    """


    def __init__(self, id=None, extensionFor=None,):
        self.id = id
        self.extensionFor = extensionFor

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.extensionFor = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StoreSchemeId')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.extensionFor is not None:
            oprot.writeFieldBegin('extensionFor', TType.I32, 2)
            oprot.writeI32(self.extensionFor)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StoreScheme(object):
    """
    Attributes:
     - id
     - parentGroupId
     - name
     - description
     - inheritId: readonly uuid, scheme id which was inherited
     - fields: list with scheme fields, list<StoreField>

    """


    def __init__(self, id=None, parentGroupId=None, name=None, description=None, inheritId=None, fields=None,):
        self.id = id
        self.parentGroupId = parentGroupId
        self.name = name
        self.description = description
        self.inheritId = inheritId
        self.fields = fields

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.id = StoreSchemeId()
                    self.id.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.inheritId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.fields = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = StoreField()
                        _elem5.read(iprot)
                        self.fields.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StoreScheme')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRUCT, 1)
            self.id.write(oprot)
            oprot.writeFieldEnd()
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 2)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 4)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.inheritId is not None:
            oprot.writeFieldBegin('inheritId', TType.STRING, 5)
            oprot.writeString(self.inheritId.encode('utf-8') if sys.version_info[0] == 2 else self.inheritId)
            oprot.writeFieldEnd()
        if self.fields is not None:
            oprot.writeFieldBegin('fields', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.fields))
            for iter6 in self.fields:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StoreFieldValue(object):
    """
    Attributes:
     - title
     - value

    """


    def __init__(self, title=None, value=None,):
        self.title = title
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.value = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StoreFieldValue')
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 1)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRING, 2)
            oprot.writeString(self.value.encode('utf-8') if sys.version_info[0] == 2 else self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AdditionalFields(object):
    """
    Attributes:
     - data: list with field values

    """


    def __init__(self, data=None,):
        self.data = data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.data = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = StoreFieldValue()
                        _elem12.read(iprot)
                        self.data.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AdditionalFields')
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.data))
            for iter13 in self.data:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Session(object):
    """
    Attributes:
     - id

    """


    def __init__(self, id=None,):
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Session')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class License(object):
    """
    Attributes:
     - expire
     - monitoringObjectsLimit
     - usersLimit
     - smsLimit
     - enabled

    """


    def __init__(self, expire=None, monitoringObjectsLimit=None, usersLimit=None, smsLimit=None, enabled=None,):
        self.expire = expire
        self.monitoringObjectsLimit = monitoringObjectsLimit
        self.usersLimit = usersLimit
        self.smsLimit = smsLimit
        self.enabled = enabled

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.expire = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.monitoringObjectsLimit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.usersLimit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.smsLimit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.enabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('License')
        if self.expire is not None:
            oprot.writeFieldBegin('expire', TType.I64, 1)
            oprot.writeI64(self.expire)
            oprot.writeFieldEnd()
        if self.monitoringObjectsLimit is not None:
            oprot.writeFieldBegin('monitoringObjectsLimit', TType.I32, 2)
            oprot.writeI32(self.monitoringObjectsLimit)
            oprot.writeFieldEnd()
        if self.usersLimit is not None:
            oprot.writeFieldBegin('usersLimit', TType.I32, 3)
            oprot.writeI32(self.usersLimit)
            oprot.writeFieldEnd()
        if self.smsLimit is not None:
            oprot.writeFieldBegin('smsLimit', TType.I32, 4)
            oprot.writeI32(self.smsLimit)
            oprot.writeFieldEnd()
        if self.enabled is not None:
            oprot.writeFieldBegin('enabled', TType.BOOL, 5)
            oprot.writeBool(self.enabled)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Group(object):
    """
    Attributes:
     - parentGroupId
     - id
     - title
     - license
     - additionalFields

    """


    def __init__(self, parentGroupId=None, id=None, title=None, license=None, additionalFields=None,):
        self.parentGroupId = parentGroupId
        self.id = id
        self.title = title
        self.license = license
        self.additionalFields = additionalFields

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.license = License()
                    self.license.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.additionalFields = AdditionalFields()
                    self.additionalFields.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Group')
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 1)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 3)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.license is not None:
            oprot.writeFieldBegin('license', TType.STRUCT, 4)
            self.license.write(oprot)
            oprot.writeFieldEnd()
        if self.additionalFields is not None:
            oprot.writeFieldBegin('additionalFields', TType.STRUCT, 5)
            self.additionalFields.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Permission(object):
    """
    Attributes:
     - name
     - mask

    """


    def __init__(self, name=None, mask=None,):
        self.name = name
        self.mask = mask

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.mask = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Permission')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.mask is not None:
            oprot.writeFieldBegin('mask', TType.I64, 2)
            oprot.writeI64(self.mask)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Role(object):
    """
    Attributes:
     - parentGroupId
     - id
     - name
     - extensionPermissions

    """


    def __init__(self, parentGroupId=None, id=None, name=None, extensionPermissions=None,):
        self.parentGroupId = parentGroupId
        self.id = id
        self.name = name
        self.extensionPermissions = extensionPermissions

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.extensionPermissions = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = Permission()
                        _elem19.read(iprot)
                        self.extensionPermissions.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Role')
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 1)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.extensionPermissions is not None:
            oprot.writeFieldBegin('extensionPermissions', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.extensionPermissions))
            for iter20 in self.extensionPermissions:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class User(object):
    """
    Attributes:
     - parentGroupId
     - id
     - roleId
     - groupLink
     - login
     - welcomeName
     - email
     - phone
     - enabled

    """


    def __init__(self, parentGroupId=None, id=None, roleId=None, groupLink=None, login=None, welcomeName=None, email=None, phone=None, enabled=None,):
        self.parentGroupId = parentGroupId
        self.id = id
        self.roleId = roleId
        self.groupLink = groupLink
        self.login = login
        self.welcomeName = welcomeName
        self.email = email
        self.phone = phone
        self.enabled = enabled

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.roleId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.groupLink = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.groupLink.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.login = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.welcomeName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.phone = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.enabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('User')
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 1)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.roleId is not None:
            oprot.writeFieldBegin('roleId', TType.STRING, 3)
            oprot.writeString(self.roleId.encode('utf-8') if sys.version_info[0] == 2 else self.roleId)
            oprot.writeFieldEnd()
        if self.groupLink is not None:
            oprot.writeFieldBegin('groupLink', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.groupLink))
            for iter27 in self.groupLink:
                oprot.writeString(iter27.encode('utf-8') if sys.version_info[0] == 2 else iter27)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.login is not None:
            oprot.writeFieldBegin('login', TType.STRING, 5)
            oprot.writeString(self.login.encode('utf-8') if sys.version_info[0] == 2 else self.login)
            oprot.writeFieldEnd()
        if self.welcomeName is not None:
            oprot.writeFieldBegin('welcomeName', TType.STRING, 6)
            oprot.writeString(self.welcomeName.encode('utf-8') if sys.version_info[0] == 2 else self.welcomeName)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 7)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.phone is not None:
            oprot.writeFieldBegin('phone', TType.STRING, 8)
            oprot.writeString(self.phone.encode('utf-8') if sys.version_info[0] == 2 else self.phone)
            oprot.writeFieldEnd()
        if self.enabled is not None:
            oprot.writeFieldBegin('enabled', TType.BOOL, 9)
            oprot.writeBool(self.enabled)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserSecurityData(object):
    """
    Attributes:
     - userId
     - data1
     - data2

    """


    def __init__(self, userId=None, data1=None, data2=None,):
        self.userId = userId
        self.data1 = data1
        self.data2 = data2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.data1 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.data2 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UserSecurityData')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.data1 is not None:
            oprot.writeFieldBegin('data1', TType.STRING, 2)
            oprot.writeString(self.data1.encode('utf-8') if sys.version_info[0] == 2 else self.data1)
            oprot.writeFieldEnd()
        if self.data2 is not None:
            oprot.writeFieldBegin('data2', TType.STRING, 3)
            oprot.writeString(self.data2.encode('utf-8') if sys.version_info[0] == 2 else self.data2)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserFilter(object):
    """
    Attributes:
     - groupId
     - recursive
     - login
     - email
     - phone
     - welcomeName

    """


    def __init__(self, groupId=None, recursive=None, login=None, email=None, phone=None, welcomeName=None,):
        self.groupId = groupId
        self.recursive = recursive
        self.login = login
        self.email = email
        self.phone = phone
        self.welcomeName = welcomeName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.groupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.recursive = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.login = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.phone = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.welcomeName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UserFilter')
        if self.groupId is not None:
            oprot.writeFieldBegin('groupId', TType.STRING, 1)
            oprot.writeString(self.groupId.encode('utf-8') if sys.version_info[0] == 2 else self.groupId)
            oprot.writeFieldEnd()
        if self.recursive is not None:
            oprot.writeFieldBegin('recursive', TType.BOOL, 2)
            oprot.writeBool(self.recursive)
            oprot.writeFieldEnd()
        if self.login is not None:
            oprot.writeFieldBegin('login', TType.STRING, 4)
            oprot.writeString(self.login.encode('utf-8') if sys.version_info[0] == 2 else self.login)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 5)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.phone is not None:
            oprot.writeFieldBegin('phone', TType.STRING, 6)
            oprot.writeString(self.phone.encode('utf-8') if sys.version_info[0] == 2 else self.phone)
            oprot.writeFieldEnd()
        if self.welcomeName is not None:
            oprot.writeFieldBegin('welcomeName', TType.STRING, 7)
            oprot.writeString(self.welcomeName.encode('utf-8') if sys.version_info[0] == 2 else self.welcomeName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserFilterOptionalParams(object):
    """
    Attributes:
     - type
     - offset
     - limit

    """


    def __init__(self, type=None, offset=None, limit=None,):
        self.type = type
        self.offset = offset
        self.limit = limit

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.offset = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.limit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UserFilterOptionalParams')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.offset is not None:
            oprot.writeFieldBegin('offset', TType.I32, 2)
            oprot.writeI32(self.offset)
            oprot.writeFieldEnd()
        if self.limit is not None:
            oprot.writeFieldBegin('limit', TType.I32, 3)
            oprot.writeI32(self.limit)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TrackerStatusChange(object):
    """
    Attributes:
     - timestamp
     - status

    """


    def __init__(self, timestamp=None, status=None,):
        self.timestamp = timestamp
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TrackerStatusChange')
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 1)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Tracker(object):
    """
    Attributes:
     - vendor
     - model
     - identifier
     - phoneNumber

    """


    def __init__(self, vendor=None, model=None, identifier=None, phoneNumber=None,):
        self.vendor = vendor
        self.model = model
        self.identifier = identifier
        self.phoneNumber = phoneNumber

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.vendor = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.model = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.identifier = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.identifier.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.phoneNumber = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Tracker')
        if self.vendor is not None:
            oprot.writeFieldBegin('vendor', TType.STRING, 1)
            oprot.writeString(self.vendor.encode('utf-8') if sys.version_info[0] == 2 else self.vendor)
            oprot.writeFieldEnd()
        if self.model is not None:
            oprot.writeFieldBegin('model', TType.STRING, 2)
            oprot.writeString(self.model.encode('utf-8') if sys.version_info[0] == 2 else self.model)
            oprot.writeFieldEnd()
        if self.identifier is not None:
            oprot.writeFieldBegin('identifier', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.identifier))
            for iter34 in self.identifier:
                oprot.writeString(iter34.encode('utf-8') if sys.version_info[0] == 2 else iter34)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.phoneNumber is not None:
            oprot.writeFieldBegin('phoneNumber', TType.STRING, 4)
            oprot.writeString(self.phoneNumber.encode('utf-8') if sys.version_info[0] == 2 else self.phoneNumber)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TrackerCertificate(object):
    """
    Attributes:
     - monitoringObjectId
     - certificateJson

    """


    def __init__(self, monitoringObjectId=None, certificateJson=None,):
        self.monitoringObjectId = monitoringObjectId
        self.certificateJson = certificateJson

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.monitoringObjectId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.certificateJson = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TrackerCertificate')
        if self.monitoringObjectId is not None:
            oprot.writeFieldBegin('monitoringObjectId', TType.STRING, 1)
            oprot.writeString(self.monitoringObjectId.encode('utf-8') if sys.version_info[0] == 2 else self.monitoringObjectId)
            oprot.writeFieldEnd()
        if self.certificateJson is not None:
            oprot.writeFieldBegin('certificateJson', TType.STRING, 2)
            oprot.writeString(self.certificateJson.encode('utf-8') if sys.version_info[0] == 2 else self.certificateJson)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MonitoringObject(object):
    """
    Attributes:
     - parentGroupId
     - id
     - name
     - tracker
     - displayColor
     - displayIcon
     - additionalFields
     - vin
     - displayIconUuid
     - displayIconFormat
     - mapIconUuid
     - mapIconFormat
     - description

    """


    def __init__(self, parentGroupId=None, id=None, name=None, tracker=None, displayColor=None, displayIcon=None, additionalFields=None, vin=None, displayIconUuid=None, displayIconFormat=None, mapIconUuid=None, mapIconFormat=None, description=None,):
        self.parentGroupId = parentGroupId
        self.id = id
        self.name = name
        self.tracker = tracker
        self.displayColor = displayColor
        self.displayIcon = displayIcon
        self.additionalFields = additionalFields
        self.vin = vin
        self.displayIconUuid = displayIconUuid
        self.displayIconFormat = displayIconFormat
        self.mapIconUuid = mapIconUuid
        self.mapIconFormat = mapIconFormat
        self.description = description

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.tracker = Tracker()
                    self.tracker.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.displayColor = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.displayIcon = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.additionalFields = AdditionalFields()
                    self.additionalFields.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.vin = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.displayIconUuid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.displayIconFormat = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.mapIconUuid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.mapIconFormat = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MonitoringObject')
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 1)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.tracker is not None:
            oprot.writeFieldBegin('tracker', TType.STRUCT, 4)
            self.tracker.write(oprot)
            oprot.writeFieldEnd()
        if self.displayColor is not None:
            oprot.writeFieldBegin('displayColor', TType.STRING, 5)
            oprot.writeString(self.displayColor.encode('utf-8') if sys.version_info[0] == 2 else self.displayColor)
            oprot.writeFieldEnd()
        if self.displayIcon is not None:
            oprot.writeFieldBegin('displayIcon', TType.STRING, 6)
            oprot.writeString(self.displayIcon.encode('utf-8') if sys.version_info[0] == 2 else self.displayIcon)
            oprot.writeFieldEnd()
        if self.additionalFields is not None:
            oprot.writeFieldBegin('additionalFields', TType.STRUCT, 7)
            self.additionalFields.write(oprot)
            oprot.writeFieldEnd()
        if self.vin is not None:
            oprot.writeFieldBegin('vin', TType.STRING, 8)
            oprot.writeString(self.vin.encode('utf-8') if sys.version_info[0] == 2 else self.vin)
            oprot.writeFieldEnd()
        if self.displayIconUuid is not None:
            oprot.writeFieldBegin('displayIconUuid', TType.STRING, 9)
            oprot.writeString(self.displayIconUuid.encode('utf-8') if sys.version_info[0] == 2 else self.displayIconUuid)
            oprot.writeFieldEnd()
        if self.displayIconFormat is not None:
            oprot.writeFieldBegin('displayIconFormat', TType.STRING, 10)
            oprot.writeString(self.displayIconFormat.encode('utf-8') if sys.version_info[0] == 2 else self.displayIconFormat)
            oprot.writeFieldEnd()
        if self.mapIconUuid is not None:
            oprot.writeFieldBegin('mapIconUuid', TType.STRING, 11)
            oprot.writeString(self.mapIconUuid.encode('utf-8') if sys.version_info[0] == 2 else self.mapIconUuid)
            oprot.writeFieldEnd()
        if self.mapIconFormat is not None:
            oprot.writeFieldBegin('mapIconFormat', TType.STRING, 12)
            oprot.writeString(self.mapIconFormat.encode('utf-8') if sys.version_info[0] == 2 else self.mapIconFormat)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 13)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DataRelevanceFilter(object):
    """
    Attributes:
     - period
     - newer

    """


    def __init__(self, period=None, newer=None,):
        self.period = period
        self.newer = newer

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.period = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.newer = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DataRelevanceFilter')
        if self.period is not None:
            oprot.writeFieldBegin('period', TType.STRING, 1)
            oprot.writeString(self.period.encode('utf-8') if sys.version_info[0] == 2 else self.period)
            oprot.writeFieldEnd()
        if self.newer is not None:
            oprot.writeFieldBegin('newer', TType.BOOL, 2)
            oprot.writeBool(self.newer)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MonitoringObjectFilter(object):
    """
    Attributes:
     - groupId
     - recursive
     - name
     - imei
     - additionalFields
     - vin
     - capturedTimestamp
     - receivedTimestamp
     - geofenceId

    """


    def __init__(self, groupId=None, recursive=None, name=None, imei=None, additionalFields=None, vin=None, capturedTimestamp=None, receivedTimestamp=None, geofenceId=None,):
        self.groupId = groupId
        self.recursive = recursive
        self.name = name
        self.imei = imei
        self.additionalFields = additionalFields
        self.vin = vin
        self.capturedTimestamp = capturedTimestamp
        self.receivedTimestamp = receivedTimestamp
        self.geofenceId = geofenceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.groupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.recursive = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.imei = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.additionalFields = AdditionalFields()
                    self.additionalFields.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.vin = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.capturedTimestamp = DataRelevanceFilter()
                    self.capturedTimestamp.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.receivedTimestamp = DataRelevanceFilter()
                    self.receivedTimestamp.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.geofenceId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MonitoringObjectFilter')
        if self.groupId is not None:
            oprot.writeFieldBegin('groupId', TType.STRING, 1)
            oprot.writeString(self.groupId.encode('utf-8') if sys.version_info[0] == 2 else self.groupId)
            oprot.writeFieldEnd()
        if self.recursive is not None:
            oprot.writeFieldBegin('recursive', TType.BOOL, 2)
            oprot.writeBool(self.recursive)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.imei is not None:
            oprot.writeFieldBegin('imei', TType.STRING, 4)
            oprot.writeString(self.imei.encode('utf-8') if sys.version_info[0] == 2 else self.imei)
            oprot.writeFieldEnd()
        if self.additionalFields is not None:
            oprot.writeFieldBegin('additionalFields', TType.STRUCT, 5)
            self.additionalFields.write(oprot)
            oprot.writeFieldEnd()
        if self.vin is not None:
            oprot.writeFieldBegin('vin', TType.STRING, 6)
            oprot.writeString(self.vin.encode('utf-8') if sys.version_info[0] == 2 else self.vin)
            oprot.writeFieldEnd()
        if self.capturedTimestamp is not None:
            oprot.writeFieldBegin('capturedTimestamp', TType.STRUCT, 7)
            self.capturedTimestamp.write(oprot)
            oprot.writeFieldEnd()
        if self.receivedTimestamp is not None:
            oprot.writeFieldBegin('receivedTimestamp', TType.STRUCT, 8)
            self.receivedTimestamp.write(oprot)
            oprot.writeFieldEnd()
        if self.geofenceId is not None:
            oprot.writeFieldBegin('geofenceId', TType.STRING, 9)
            oprot.writeString(self.geofenceId.encode('utf-8') if sys.version_info[0] == 2 else self.geofenceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MonitoringObjectIcon(object):
    """
    Иконка объекта мониторинга (в списке или на карте)

    Attributes:
     - id: UUID иконки
     - icon: Двоичный массив данных изображения
     - format: Строка формата: 'png', 'svg' и так далее

    """


    def __init__(self, id=None, icon=None, format=None,):
        self.id = id
        self.icon = icon
        self.format = format

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.icon = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.format = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MonitoringObjectIcon')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.icon is not None:
            oprot.writeFieldBegin('icon', TType.STRING, 2)
            oprot.writeBinary(self.icon)
            oprot.writeFieldEnd()
        if self.format is not None:
            oprot.writeFieldBegin('format', TType.STRING, 3)
            oprot.writeString(self.format.encode('utf-8') if sys.version_info[0] == 2 else self.format)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MonitoringObjectIconFilter(object):
    """
    Фильтр иконок объектов мониторинга

    Attributes:
     - iconUuids: список UUID иконок

    """


    def __init__(self, iconUuids=None,):
        self.iconUuids = iconUuids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.iconUuids = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in range(_size35):
                        _elem40 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.iconUuids.append(_elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MonitoringObjectIconFilter')
        if self.iconUuids is not None:
            oprot.writeFieldBegin('iconUuids', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.iconUuids))
            for iter41 in self.iconUuids:
                oprot.writeString(iter41.encode('utf-8') if sys.version_info[0] == 2 else iter41)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CompanyStatistics(object):
    """
    Attributes:
     - uuid: UUID компании
     - smsCount: количество sms отправленных за период.
     - vehiclesCount: максимальное количество объектов мониторинга за период.

    """


    def __init__(self, uuid=None, smsCount=None, vehiclesCount=None,):
        self.uuid = uuid
        self.smsCount = smsCount
        self.vehiclesCount = vehiclesCount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.uuid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.smsCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.vehiclesCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CompanyStatistics')
        if self.uuid is not None:
            oprot.writeFieldBegin('uuid', TType.STRING, 1)
            oprot.writeString(self.uuid.encode('utf-8') if sys.version_info[0] == 2 else self.uuid)
            oprot.writeFieldEnd()
        if self.smsCount is not None:
            oprot.writeFieldBegin('smsCount', TType.I32, 2)
            oprot.writeI32(self.smsCount)
            oprot.writeFieldEnd()
        if self.vehiclesCount is not None:
            oprot.writeFieldBegin('vehiclesCount', TType.I32, 3)
            oprot.writeI32(self.vehiclesCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SensorId(object):
    """
    Attributes:
     - type
     - index
     - customId

    """


    def __init__(self, type=None, index=None, customId=None,):
        self.type = type
        self.index = index
        self.customId = customId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.index = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.customId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SensorId')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.index is not None:
            oprot.writeFieldBegin('index', TType.STRING, 2)
            oprot.writeString(self.index.encode('utf-8') if sys.version_info[0] == 2 else self.index)
            oprot.writeFieldEnd()
        if self.customId is not None:
            oprot.writeFieldBegin('customId', TType.STRING, 3)
            oprot.writeString(self.customId.encode('utf-8') if sys.version_info[0] == 2 else self.customId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SensorValue(object):
    """
    Attributes:
     - sensorId
     - value_integer
     - value_double
     - value_boolean
     - value_string

    """


    def __init__(self, sensorId=None, value_integer=None, value_double=None, value_boolean=None, value_string=None,):
        self.sensorId = sensorId
        self.value_integer = value_integer
        self.value_double = value_double
        self.value_boolean = value_boolean
        self.value_string = value_string

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sensorId = SensorId()
                    self.sensorId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.value_integer = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.value_double = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.value_boolean = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.value_string = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SensorValue')
        if self.sensorId is not None:
            oprot.writeFieldBegin('sensorId', TType.STRUCT, 1)
            self.sensorId.write(oprot)
            oprot.writeFieldEnd()
        if self.value_integer is not None:
            oprot.writeFieldBegin('value_integer', TType.I64, 2)
            oprot.writeI64(self.value_integer)
            oprot.writeFieldEnd()
        if self.value_double is not None:
            oprot.writeFieldBegin('value_double', TType.DOUBLE, 3)
            oprot.writeDouble(self.value_double)
            oprot.writeFieldEnd()
        if self.value_boolean is not None:
            oprot.writeFieldBegin('value_boolean', TType.BOOL, 4)
            oprot.writeBool(self.value_boolean)
            oprot.writeFieldEnd()
        if self.value_string is not None:
            oprot.writeFieldBegin('value_string', TType.STRING, 5)
            oprot.writeString(self.value_string.encode('utf-8') if sys.version_info[0] == 2 else self.value_string)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RoadAccidentEventParameters(object):
    """
    Attributes:
     - accidentId
     - vin
     - capturedTimestamp
     - coordinates
     - crashSevere
     - address
     - location

    """


    def __init__(self, accidentId=None, vin=None, capturedTimestamp=None, coordinates=None, crashSevere=None, address=None, location=None,):
        self.accidentId = accidentId
        self.vin = vin
        self.capturedTimestamp = capturedTimestamp
        self.coordinates = coordinates
        self.crashSevere = crashSevere
        self.address = address
        self.location = location

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.accidentId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.vin = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.capturedTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.coordinates = thrif.dispatch.common.ttypes.GeoPoint()
                    self.coordinates.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.crashSevere = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.address = thrif.dispatch.common.ttypes.RoadAccidentAddress()
                    self.address.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.location = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RoadAccidentEventParameters')
        if self.accidentId is not None:
            oprot.writeFieldBegin('accidentId', TType.STRING, 1)
            oprot.writeString(self.accidentId.encode('utf-8') if sys.version_info[0] == 2 else self.accidentId)
            oprot.writeFieldEnd()
        if self.vin is not None:
            oprot.writeFieldBegin('vin', TType.STRING, 2)
            oprot.writeString(self.vin.encode('utf-8') if sys.version_info[0] == 2 else self.vin)
            oprot.writeFieldEnd()
        if self.capturedTimestamp is not None:
            oprot.writeFieldBegin('capturedTimestamp', TType.I64, 3)
            oprot.writeI64(self.capturedTimestamp)
            oprot.writeFieldEnd()
        if self.coordinates is not None:
            oprot.writeFieldBegin('coordinates', TType.STRUCT, 4)
            self.coordinates.write(oprot)
            oprot.writeFieldEnd()
        if self.crashSevere is not None:
            oprot.writeFieldBegin('crashSevere', TType.BOOL, 5)
            oprot.writeBool(self.crashSevere)
            oprot.writeFieldEnd()
        if self.address is not None:
            oprot.writeFieldBegin('address', TType.STRUCT, 6)
            self.address.write(oprot)
            oprot.writeFieldEnd()
        if self.location is not None:
            oprot.writeFieldBegin('location', TType.STRING, 7)
            oprot.writeString(self.location.encode('utf-8') if sys.version_info[0] == 2 else self.location)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EventAdditionalInfo(object):
    """
    Attributes:
     - pairDuration: duration for paired events
     - fenceName: fence name
     - routeName: route name
     - speed: current speed in kilometers per hour
     - speedLimit: speed limit if any, in kilometers per hour
     - maxSpeed: maximal speed on the track between paired events
     - direction: direction in degrees
     - fuelingAmount: amount of fuel pumped in, in liters
     - drainedAmount: amount of fuel drained, in liters
     - accelerarion: acceleration
     - turnAngle: turn angle, in degrees
     - accidentInfo: accident information

    """


    def __init__(self, pairDuration=None, fenceName=None, routeName=None, speed=None, speedLimit=None, maxSpeed=None, direction=None, fuelingAmount=None, drainedAmount=None, accelerarion=None, turnAngle=None, accidentInfo=None,):
        self.pairDuration = pairDuration
        self.fenceName = fenceName
        self.routeName = routeName
        self.speed = speed
        self.speedLimit = speedLimit
        self.maxSpeed = maxSpeed
        self.direction = direction
        self.fuelingAmount = fuelingAmount
        self.drainedAmount = drainedAmount
        self.accelerarion = accelerarion
        self.turnAngle = turnAngle
        self.accidentInfo = accidentInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.pairDuration = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.fenceName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.routeName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.speed = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I16:
                    self.speedLimit = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I16:
                    self.maxSpeed = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I16:
                    self.direction = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I16:
                    self.fuelingAmount = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I16:
                    self.drainedAmount = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I16:
                    self.accelerarion = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I16:
                    self.turnAngle = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRUCT:
                    self.accidentInfo = RoadAccidentEventParameters()
                    self.accidentInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EventAdditionalInfo')
        if self.pairDuration is not None:
            oprot.writeFieldBegin('pairDuration', TType.I32, 1)
            oprot.writeI32(self.pairDuration)
            oprot.writeFieldEnd()
        if self.fenceName is not None:
            oprot.writeFieldBegin('fenceName', TType.STRING, 2)
            oprot.writeString(self.fenceName.encode('utf-8') if sys.version_info[0] == 2 else self.fenceName)
            oprot.writeFieldEnd()
        if self.routeName is not None:
            oprot.writeFieldBegin('routeName', TType.STRING, 3)
            oprot.writeString(self.routeName.encode('utf-8') if sys.version_info[0] == 2 else self.routeName)
            oprot.writeFieldEnd()
        if self.speed is not None:
            oprot.writeFieldBegin('speed', TType.I16, 4)
            oprot.writeI16(self.speed)
            oprot.writeFieldEnd()
        if self.speedLimit is not None:
            oprot.writeFieldBegin('speedLimit', TType.I16, 5)
            oprot.writeI16(self.speedLimit)
            oprot.writeFieldEnd()
        if self.maxSpeed is not None:
            oprot.writeFieldBegin('maxSpeed', TType.I16, 6)
            oprot.writeI16(self.maxSpeed)
            oprot.writeFieldEnd()
        if self.direction is not None:
            oprot.writeFieldBegin('direction', TType.I16, 7)
            oprot.writeI16(self.direction)
            oprot.writeFieldEnd()
        if self.fuelingAmount is not None:
            oprot.writeFieldBegin('fuelingAmount', TType.I16, 8)
            oprot.writeI16(self.fuelingAmount)
            oprot.writeFieldEnd()
        if self.drainedAmount is not None:
            oprot.writeFieldBegin('drainedAmount', TType.I16, 9)
            oprot.writeI16(self.drainedAmount)
            oprot.writeFieldEnd()
        if self.accelerarion is not None:
            oprot.writeFieldBegin('accelerarion', TType.I16, 10)
            oprot.writeI16(self.accelerarion)
            oprot.writeFieldEnd()
        if self.turnAngle is not None:
            oprot.writeFieldBegin('turnAngle', TType.I16, 11)
            oprot.writeI16(self.turnAngle)
            oprot.writeFieldEnd()
        if self.accidentInfo is not None:
            oprot.writeFieldBegin('accidentInfo', TType.STRUCT, 12)
            self.accidentInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MonitoringObjectEvent(object):
    """
    Attributes:
     - monitoringObjectUuid: monitoring object UUID
     - uuid: event UUID
     - capturedTime: event unix time
     - type: event type
     - position: event position
     - globalMonotonicIndex: global monotonic event index
     - eventRuleId: event rule id triggered the event
     - sensorsValues: values of the sensors when event occured
     - sensorsValuesAtRegistration: values of the sensors when delayed event registered
     - geofenceId: UUID of a geofence bound to the event if applicable
     - additionalFields: Optional event additional properties
     - eventRuleName: Event rule name triggered the event

    """


    def __init__(self, monitoringObjectUuid=None, uuid=None, capturedTime=None, type=None, position=None, globalMonotonicIndex=None, eventRuleId=None, sensorsValues=None, sensorsValuesAtRegistration=None, geofenceId=None, additionalFields=None, eventRuleName=None,):
        self.monitoringObjectUuid = monitoringObjectUuid
        self.uuid = uuid
        self.capturedTime = capturedTime
        self.type = type
        self.position = position
        self.globalMonotonicIndex = globalMonotonicIndex
        self.eventRuleId = eventRuleId
        self.sensorsValues = sensorsValues
        self.sensorsValuesAtRegistration = sensorsValuesAtRegistration
        self.geofenceId = geofenceId
        self.additionalFields = additionalFields
        self.eventRuleName = eventRuleName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.monitoringObjectUuid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.uuid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.capturedTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.position = thrif.dispatch.common.ttypes.GeoPoint()
                    self.position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.globalMonotonicIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.eventRuleId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.sensorsValues = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = SensorValue()
                        _elem47.read(iprot)
                        self.sensorsValues.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.sensorsValuesAtRegistration = []
                    (_etype51, _size48) = iprot.readListBegin()
                    for _i52 in range(_size48):
                        _elem53 = SensorValue()
                        _elem53.read(iprot)
                        self.sensorsValuesAtRegistration.append(_elem53)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.geofenceId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.additionalFields = EventAdditionalInfo()
                    self.additionalFields.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.eventRuleName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MonitoringObjectEvent')
        if self.monitoringObjectUuid is not None:
            oprot.writeFieldBegin('monitoringObjectUuid', TType.STRING, 1)
            oprot.writeString(self.monitoringObjectUuid.encode('utf-8') if sys.version_info[0] == 2 else self.monitoringObjectUuid)
            oprot.writeFieldEnd()
        if self.uuid is not None:
            oprot.writeFieldBegin('uuid', TType.STRING, 2)
            oprot.writeString(self.uuid.encode('utf-8') if sys.version_info[0] == 2 else self.uuid)
            oprot.writeFieldEnd()
        if self.capturedTime is not None:
            oprot.writeFieldBegin('capturedTime', TType.I64, 3)
            oprot.writeI64(self.capturedTime)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 4)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.position is not None:
            oprot.writeFieldBegin('position', TType.STRUCT, 5)
            self.position.write(oprot)
            oprot.writeFieldEnd()
        if self.globalMonotonicIndex is not None:
            oprot.writeFieldBegin('globalMonotonicIndex', TType.I64, 6)
            oprot.writeI64(self.globalMonotonicIndex)
            oprot.writeFieldEnd()
        if self.eventRuleId is not None:
            oprot.writeFieldBegin('eventRuleId', TType.STRING, 7)
            oprot.writeString(self.eventRuleId.encode('utf-8') if sys.version_info[0] == 2 else self.eventRuleId)
            oprot.writeFieldEnd()
        if self.sensorsValues is not None:
            oprot.writeFieldBegin('sensorsValues', TType.LIST, 8)
            oprot.writeListBegin(TType.STRUCT, len(self.sensorsValues))
            for iter54 in self.sensorsValues:
                iter54.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.sensorsValuesAtRegistration is not None:
            oprot.writeFieldBegin('sensorsValuesAtRegistration', TType.LIST, 9)
            oprot.writeListBegin(TType.STRUCT, len(self.sensorsValuesAtRegistration))
            for iter55 in self.sensorsValuesAtRegistration:
                iter55.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.geofenceId is not None:
            oprot.writeFieldBegin('geofenceId', TType.STRING, 10)
            oprot.writeString(self.geofenceId.encode('utf-8') if sys.version_info[0] == 2 else self.geofenceId)
            oprot.writeFieldEnd()
        if self.additionalFields is not None:
            oprot.writeFieldBegin('additionalFields', TType.STRUCT, 11)
            self.additionalFields.write(oprot)
            oprot.writeFieldEnd()
        if self.eventRuleName is not None:
            oprot.writeFieldBegin('eventRuleName', TType.STRING, 12)
            oprot.writeString(self.eventRuleName.encode('utf-8') if sys.version_info[0] == 2 else self.eventRuleName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TripEvent(object):
    """
    Attributes:
     - event
     - uuid
     - globalMonotonicIndex
     - tripStageSeqNo
     - speed
     - direction

    """


    def __init__(self, event=None, uuid=None, globalMonotonicIndex=None, tripStageSeqNo=None, speed=None, direction=None,):
        self.event = event
        self.uuid = uuid
        self.globalMonotonicIndex = globalMonotonicIndex
        self.tripStageSeqNo = tripStageSeqNo
        self.speed = speed
        self.direction = direction

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.event = MonitoringObjectEvent()
                    self.event.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.uuid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.globalMonotonicIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.tripStageSeqNo = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.speed = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.direction = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TripEvent')
        if self.event is not None:
            oprot.writeFieldBegin('event', TType.STRUCT, 1)
            self.event.write(oprot)
            oprot.writeFieldEnd()
        if self.uuid is not None:
            oprot.writeFieldBegin('uuid', TType.STRING, 2)
            oprot.writeString(self.uuid.encode('utf-8') if sys.version_info[0] == 2 else self.uuid)
            oprot.writeFieldEnd()
        if self.globalMonotonicIndex is not None:
            oprot.writeFieldBegin('globalMonotonicIndex', TType.I64, 3)
            oprot.writeI64(self.globalMonotonicIndex)
            oprot.writeFieldEnd()
        if self.tripStageSeqNo is not None:
            oprot.writeFieldBegin('tripStageSeqNo', TType.I32, 4)
            oprot.writeI32(self.tripStageSeqNo)
            oprot.writeFieldEnd()
        if self.speed is not None:
            oprot.writeFieldBegin('speed', TType.DOUBLE, 5)
            oprot.writeDouble(self.speed)
            oprot.writeFieldEnd()
        if self.direction is not None:
            oprot.writeFieldBegin('direction', TType.DOUBLE, 6)
            oprot.writeDouble(self.direction)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Command(object):
    """
    Attributes:
     - parentMonitoringObjectId: parent monitoring object UUID, not empty
     - id: command UUID, not empty
     - name: command name, not empty
     - commandDescription: command description

    """


    def __init__(self, parentMonitoringObjectId=None, id=None, name=None, commandDescription=None,):
        self.parentMonitoringObjectId = parentMonitoringObjectId
        self.id = id
        self.name = name
        self.commandDescription = commandDescription

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.parentMonitoringObjectId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.commandDescription = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Command')
        if self.parentMonitoringObjectId is not None:
            oprot.writeFieldBegin('parentMonitoringObjectId', TType.STRING, 1)
            oprot.writeString(self.parentMonitoringObjectId.encode('utf-8') if sys.version_info[0] == 2 else self.parentMonitoringObjectId)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.commandDescription is not None:
            oprot.writeFieldBegin('commandDescription', TType.STRING, 4)
            oprot.writeString(self.commandDescription.encode('utf-8') if sys.version_info[0] == 2 else self.commandDescription)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CommandStatus(object):
    """
    Attributes:
     - launchId: command launch id, not empty
     - commandId: command Uuid, not empty
     - status: command status, not empty
     - startTime: command execute start time, not empty, unix time
     - commandStatusDescription: command status description

    """


    def __init__(self, launchId=None, commandId=None, status=None, startTime=None, commandStatusDescription=None,):
        self.launchId = launchId
        self.commandId = commandId
        self.status = status
        self.startTime = startTime
        self.commandStatusDescription = commandStatusDescription

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.launchId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.commandId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.startTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.commandStatusDescription = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CommandStatus')
        if self.launchId is not None:
            oprot.writeFieldBegin('launchId', TType.I64, 1)
            oprot.writeI64(self.launchId)
            oprot.writeFieldEnd()
        if self.commandId is not None:
            oprot.writeFieldBegin('commandId', TType.STRING, 2)
            oprot.writeString(self.commandId.encode('utf-8') if sys.version_info[0] == 2 else self.commandId)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 3)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.I64, 4)
            oprot.writeI64(self.startTime)
            oprot.writeFieldEnd()
        if self.commandStatusDescription is not None:
            oprot.writeFieldBegin('commandStatusDescription', TType.STRING, 5)
            oprot.writeString(self.commandStatusDescription.encode('utf-8') if sys.version_info[0] == 2 else self.commandStatusDescription)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RelayOptionalParams(object):
    """
    Attributes:
     - egtsUseOID
     - egtsProtocolVersion
     - wialonPassword
     - port
     - yandexClid
     - egtsLogin
     - egtsPassword
     - egtsDispatcherId
     - yandexRouteSourceType
     - yandexRouteSourceAdditionalField

    """


    def __init__(self, egtsUseOID=None, egtsProtocolVersion=None, wialonPassword=None, port=None, yandexClid=None, egtsLogin=None, egtsPassword=None, egtsDispatcherId=None, yandexRouteSourceType=None, yandexRouteSourceAdditionalField=None,):
        self.egtsUseOID = egtsUseOID
        self.egtsProtocolVersion = egtsProtocolVersion
        self.wialonPassword = wialonPassword
        self.port = port
        self.yandexClid = yandexClid
        self.egtsLogin = egtsLogin
        self.egtsPassword = egtsPassword
        self.egtsDispatcherId = egtsDispatcherId
        self.yandexRouteSourceType = yandexRouteSourceType
        self.yandexRouteSourceAdditionalField = yandexRouteSourceAdditionalField

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.egtsUseOID = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.egtsProtocolVersion = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.wialonPassword = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.yandexClid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.egtsLogin = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.egtsPassword = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.egtsDispatcherId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.yandexRouteSourceType = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.yandexRouteSourceAdditionalField = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RelayOptionalParams')
        if self.egtsUseOID is not None:
            oprot.writeFieldBegin('egtsUseOID', TType.BOOL, 1)
            oprot.writeBool(self.egtsUseOID)
            oprot.writeFieldEnd()
        if self.egtsProtocolVersion is not None:
            oprot.writeFieldBegin('egtsProtocolVersion', TType.STRING, 2)
            oprot.writeString(self.egtsProtocolVersion.encode('utf-8') if sys.version_info[0] == 2 else self.egtsProtocolVersion)
            oprot.writeFieldEnd()
        if self.wialonPassword is not None:
            oprot.writeFieldBegin('wialonPassword', TType.STRING, 3)
            oprot.writeString(self.wialonPassword.encode('utf-8') if sys.version_info[0] == 2 else self.wialonPassword)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 4)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        if self.yandexClid is not None:
            oprot.writeFieldBegin('yandexClid', TType.STRING, 5)
            oprot.writeString(self.yandexClid.encode('utf-8') if sys.version_info[0] == 2 else self.yandexClid)
            oprot.writeFieldEnd()
        if self.egtsLogin is not None:
            oprot.writeFieldBegin('egtsLogin', TType.STRING, 6)
            oprot.writeString(self.egtsLogin.encode('utf-8') if sys.version_info[0] == 2 else self.egtsLogin)
            oprot.writeFieldEnd()
        if self.egtsPassword is not None:
            oprot.writeFieldBegin('egtsPassword', TType.STRING, 7)
            oprot.writeString(self.egtsPassword.encode('utf-8') if sys.version_info[0] == 2 else self.egtsPassword)
            oprot.writeFieldEnd()
        if self.egtsDispatcherId is not None:
            oprot.writeFieldBegin('egtsDispatcherId', TType.I32, 8)
            oprot.writeI32(self.egtsDispatcherId)
            oprot.writeFieldEnd()
        if self.yandexRouteSourceType is not None:
            oprot.writeFieldBegin('yandexRouteSourceType', TType.STRING, 9)
            oprot.writeString(self.yandexRouteSourceType.encode('utf-8') if sys.version_info[0] == 2 else self.yandexRouteSourceType)
            oprot.writeFieldEnd()
        if self.yandexRouteSourceAdditionalField is not None:
            oprot.writeFieldBegin('yandexRouteSourceAdditionalField', TType.STRING, 10)
            oprot.writeString(self.yandexRouteSourceAdditionalField.encode('utf-8') if sys.version_info[0] == 2 else self.yandexRouteSourceAdditionalField)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Relay(object):
    """
    Attributes:
     - id
     - parentGroupId
     - title
     - protocol
     - enabled
     - monitoringObjectsIds
     - host
     - optionalParams

    """


    def __init__(self, id=None, parentGroupId=None, title=None, protocol=None, enabled=None, monitoringObjectsIds=None, host=None, optionalParams=None,):
        self.id = id
        self.parentGroupId = parentGroupId
        self.title = title
        self.protocol = protocol
        self.enabled = enabled
        self.monitoringObjectsIds = monitoringObjectsIds
        self.host = host
        self.optionalParams = optionalParams

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.protocol = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.enabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.monitoringObjectsIds = []
                    (_etype59, _size56) = iprot.readListBegin()
                    for _i60 in range(_size56):
                        _elem61 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.monitoringObjectsIds.append(_elem61)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.host = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.optionalParams = RelayOptionalParams()
                    self.optionalParams.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Relay')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 2)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 3)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.protocol is not None:
            oprot.writeFieldBegin('protocol', TType.STRING, 4)
            oprot.writeString(self.protocol.encode('utf-8') if sys.version_info[0] == 2 else self.protocol)
            oprot.writeFieldEnd()
        if self.enabled is not None:
            oprot.writeFieldBegin('enabled', TType.BOOL, 5)
            oprot.writeBool(self.enabled)
            oprot.writeFieldEnd()
        if self.monitoringObjectsIds is not None:
            oprot.writeFieldBegin('monitoringObjectsIds', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.monitoringObjectsIds))
            for iter62 in self.monitoringObjectsIds:
                oprot.writeString(iter62.encode('utf-8') if sys.version_info[0] == 2 else iter62)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.host is not None:
            oprot.writeFieldBegin('host', TType.STRING, 7)
            oprot.writeString(self.host.encode('utf-8') if sys.version_info[0] == 2 else self.host)
            oprot.writeFieldEnd()
        if self.optionalParams is not None:
            oprot.writeFieldBegin('optionalParams', TType.STRUCT, 8)
            self.optionalParams.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Geofence(object):
    """
    Attributes:
     - id: uuid, not empty
     - parentGroupId: uuid, not empty
     - title: not empty
     - color

    """


    def __init__(self, id=None, parentGroupId=None, title=None, color=None,):
        self.id = id
        self.parentGroupId = parentGroupId
        self.title = title
        self.color = color

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.color = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Geofence')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 2)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 3)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.color is not None:
            oprot.writeFieldBegin('color', TType.STRING, 4)
            oprot.writeString(self.color.encode('utf-8') if sys.version_info[0] == 2 else self.color)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Place(object):
    """
    Attributes:
     - id: uuid, not empty
     - parentGroupId: uuid, not empty
     - title: not empty
     - position

    """


    def __init__(self, id=None, parentGroupId=None, title=None, position=None,):
        self.id = id
        self.parentGroupId = parentGroupId
        self.title = title
        self.position = position

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.position = thrif.dispatch.common.ttypes.GeoPoint()
                    self.position.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Place')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 2)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 3)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.position is not None:
            oprot.writeFieldBegin('position', TType.STRUCT, 4)
            self.position.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SegmentPlan(object):
    """
    Attributes:
     - seconds
     - meters

    """


    def __init__(self, seconds=None, meters=None,):
        self.seconds = seconds
        self.meters = meters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.seconds = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.meters = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SegmentPlan')
        if self.seconds is not None:
            oprot.writeFieldBegin('seconds', TType.I32, 1)
            oprot.writeI32(self.seconds)
            oprot.writeFieldEnd()
        if self.meters is not None:
            oprot.writeFieldBegin('meters', TType.I32, 2)
            oprot.writeI32(self.meters)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RouteStage(object):
    """
    Attributes:
     - id
     - type
     - point: stage coordinates for all types except Places
     - places: uuids of place for Places type of RouteStage
     - geofences: uuids of geofences for Geofences type of RouteStage

    """


    def __init__(self, id=None, type=None, point=None, places=None, geofences=None,):
        self.id = id
        self.type = type
        self.point = point
        self.places = places
        self.geofences = geofences

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.point = thrif.dispatch.common.ttypes.GeoPoint()
                    self.point.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.places = []
                    (_etype66, _size63) = iprot.readListBegin()
                    for _i67 in range(_size63):
                        _elem68 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.places.append(_elem68)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.geofences = []
                    (_etype72, _size69) = iprot.readListBegin()
                    for _i73 in range(_size69):
                        _elem74 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.geofences.append(_elem74)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RouteStage')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 2)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.point is not None:
            oprot.writeFieldBegin('point', TType.STRUCT, 3)
            self.point.write(oprot)
            oprot.writeFieldEnd()
        if self.places is not None:
            oprot.writeFieldBegin('places', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.places))
            for iter75 in self.places:
                oprot.writeString(iter75.encode('utf-8') if sys.version_info[0] == 2 else iter75)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.geofences is not None:
            oprot.writeFieldBegin('geofences', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.geofences))
            for iter76 in self.geofences:
                oprot.writeString(iter76.encode('utf-8') if sys.version_info[0] == 2 else iter76)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RouteStageSet(object):
    """
    Attributes:
     - routeStages

    """


    def __init__(self, routeStages=None,):
        self.routeStages = routeStages

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.routeStages = []
                    (_etype80, _size77) = iprot.readListBegin()
                    for _i81 in range(_size77):
                        _elem82 = RouteStage()
                        _elem82.read(iprot)
                        self.routeStages.append(_elem82)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RouteStageSet')
        if self.routeStages is not None:
            oprot.writeFieldBegin('routeStages', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.routeStages))
            for iter83 in self.routeStages:
                iter83.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Route(object):
    """
    Attributes:
     - id: uuid, not empty
     - parentGroupId: uuid, not empty
     - title: not empty
     - color: free format, not empty
     - corridorWidth: not empty, free format
     - routeControlMethod
     - vehicleRoutingType
     - routeStageSets

    """


    def __init__(self, id=None, parentGroupId=None, title=None, color=None, corridorWidth=None, routeControlMethod=None, vehicleRoutingType=None, routeStageSets=None,):
        self.id = id
        self.parentGroupId = parentGroupId
        self.title = title
        self.color = color
        self.corridorWidth = corridorWidth
        self.routeControlMethod = routeControlMethod
        self.vehicleRoutingType = vehicleRoutingType
        self.routeStageSets = routeStageSets

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.color = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.corridorWidth = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.routeControlMethod = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.vehicleRoutingType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.routeStageSets = []
                    (_etype87, _size84) = iprot.readListBegin()
                    for _i88 in range(_size84):
                        _elem89 = RouteStageSet()
                        _elem89.read(iprot)
                        self.routeStageSets.append(_elem89)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Route')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 2)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 3)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.color is not None:
            oprot.writeFieldBegin('color', TType.STRING, 4)
            oprot.writeString(self.color.encode('utf-8') if sys.version_info[0] == 2 else self.color)
            oprot.writeFieldEnd()
        if self.corridorWidth is not None:
            oprot.writeFieldBegin('corridorWidth', TType.DOUBLE, 6)
            oprot.writeDouble(self.corridorWidth)
            oprot.writeFieldEnd()
        if self.routeControlMethod is not None:
            oprot.writeFieldBegin('routeControlMethod', TType.I32, 7)
            oprot.writeI32(self.routeControlMethod)
            oprot.writeFieldEnd()
        if self.vehicleRoutingType is not None:
            oprot.writeFieldBegin('vehicleRoutingType', TType.I32, 8)
            oprot.writeI32(self.vehicleRoutingType)
            oprot.writeFieldEnd()
        if self.routeStageSets is not None:
            oprot.writeFieldBegin('routeStageSets', TType.LIST, 9)
            oprot.writeListBegin(TType.STRUCT, len(self.routeStageSets))
            for iter90 in self.routeStageSets:
                iter90.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SegmentPlanSet(object):
    """
    Attributes:
     - plan

    """


    def __init__(self, plan=None,):
        self.plan = plan

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.plan = []
                    (_etype94, _size91) = iprot.readListBegin()
                    for _i95 in range(_size91):
                        _elem96 = SegmentPlan()
                        _elem96.read(iprot)
                        self.plan.append(_elem96)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SegmentPlanSet')
        if self.plan is not None:
            oprot.writeFieldBegin('plan', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.plan))
            for iter97 in self.plan:
                iter97.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RouteInfo(object):
    """
    Attributes:
     - route
     - segmentsPlanSets

    """


    def __init__(self, route=None, segmentsPlanSets=None,):
        self.route = route
        self.segmentsPlanSets = segmentsPlanSets

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.route = Route()
                    self.route.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.segmentsPlanSets = []
                    (_etype101, _size98) = iprot.readListBegin()
                    for _i102 in range(_size98):
                        _elem103 = SegmentPlanSet()
                        _elem103.read(iprot)
                        self.segmentsPlanSets.append(_elem103)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RouteInfo')
        if self.route is not None:
            oprot.writeFieldBegin('route', TType.STRUCT, 1)
            self.route.write(oprot)
            oprot.writeFieldEnd()
        if self.segmentsPlanSets is not None:
            oprot.writeFieldBegin('segmentsPlanSets', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.segmentsPlanSets))
            for iter104 in self.segmentsPlanSets:
                iter104.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RouteGeometry(object):
    """
    Attributes:
     - segmentsPlan
     - routeLine

    """


    def __init__(self, segmentsPlan=None, routeLine=None,):
        self.segmentsPlan = segmentsPlan
        self.routeLine = routeLine

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.segmentsPlan = []
                    (_etype108, _size105) = iprot.readListBegin()
                    for _i109 in range(_size105):
                        _elem110 = SegmentPlan()
                        _elem110.read(iprot)
                        self.segmentsPlan.append(_elem110)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.routeLine = thrif.dispatch.common.ttypes.ClippedPolyline()
                    self.routeLine.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RouteGeometry')
        if self.segmentsPlan is not None:
            oprot.writeFieldBegin('segmentsPlan', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.segmentsPlan))
            for iter111 in self.segmentsPlan:
                iter111.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.routeLine is not None:
            oprot.writeFieldBegin('routeLine', TType.STRUCT, 2)
            self.routeLine.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Timepoint(object):
    """
    Attributes:
     - value
     - timezone

    """


    def __init__(self, value=None, timezone=None,):
        self.value = value
        self.timezone = timezone

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.value = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.timezone = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Timepoint')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.I64, 1)
            oprot.writeI64(self.value)
            oprot.writeFieldEnd()
        if self.timezone is not None:
            oprot.writeFieldBegin('timezone', TType.STRING, 2)
            oprot.writeString(self.timezone.encode('utf-8') if sys.version_info[0] == 2 else self.timezone)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GeofenceCondition(object):
    """
    Attributes:
     - geofenceIds
     - speedlimit
     - timepoint

    """


    def __init__(self, geofenceIds=None, speedlimit=None, timepoint=None,):
        self.geofenceIds = geofenceIds
        self.speedlimit = speedlimit
        self.timepoint = timepoint

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.geofenceIds = []
                    (_etype115, _size112) = iprot.readListBegin()
                    for _i116 in range(_size112):
                        _elem117 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.geofenceIds.append(_elem117)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.speedlimit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.timepoint = Timepoint()
                    self.timepoint.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GeofenceCondition')
        if self.geofenceIds is not None:
            oprot.writeFieldBegin('geofenceIds', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.geofenceIds))
            for iter118 in self.geofenceIds:
                oprot.writeString(iter118.encode('utf-8') if sys.version_info[0] == 2 else iter118)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.speedlimit is not None:
            oprot.writeFieldBegin('speedlimit', TType.I32, 2)
            oprot.writeI32(self.speedlimit)
            oprot.writeFieldEnd()
        if self.timepoint is not None:
            oprot.writeFieldBegin('timepoint', TType.STRUCT, 3)
            self.timepoint.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SensorCondition(object):
    """
    Attributes:
     - sensorId
     - conditionType
     - value
     - toValue
     - ignoreNull

    """


    def __init__(self, sensorId=None, conditionType=None, value=None, toValue=None, ignoreNull=None,):
        self.sensorId = sensorId
        self.conditionType = conditionType
        self.value = value
        self.toValue = toValue
        self.ignoreNull = ignoreNull

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sensorId = SensorId()
                    self.sensorId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.conditionType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.value = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.toValue = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.ignoreNull = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SensorCondition')
        if self.sensorId is not None:
            oprot.writeFieldBegin('sensorId', TType.STRUCT, 1)
            self.sensorId.write(oprot)
            oprot.writeFieldEnd()
        if self.conditionType is not None:
            oprot.writeFieldBegin('conditionType', TType.I32, 2)
            oprot.writeI32(self.conditionType)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.DOUBLE, 3)
            oprot.writeDouble(self.value)
            oprot.writeFieldEnd()
        if self.toValue is not None:
            oprot.writeFieldBegin('toValue', TType.DOUBLE, 4)
            oprot.writeDouble(self.toValue)
            oprot.writeFieldEnd()
        if self.ignoreNull is not None:
            oprot.writeFieldBegin('ignoreNull', TType.BOOL, 5)
            oprot.writeBool(self.ignoreNull)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GenerateEventsCondition(object):
    """
    Condition to make rule's events generated.
    Fields existance depends on (correlates with) generated event type. Can have no fields at all.

    Attributes:
     - geofenceCondition
     - sensorCondition
     - distanceCondition
     - connectTimeoutCondition
     - durationCondition
     - generateAfterTimestamp
     - durationOnlyByTrack

    """


    def __init__(self, geofenceCondition=None, sensorCondition=None, distanceCondition=None, connectTimeoutCondition=None, durationCondition=None, generateAfterTimestamp=None, durationOnlyByTrack=None,):
        self.geofenceCondition = geofenceCondition
        self.sensorCondition = sensorCondition
        self.distanceCondition = distanceCondition
        self.connectTimeoutCondition = connectTimeoutCondition
        self.durationCondition = durationCondition
        self.generateAfterTimestamp = generateAfterTimestamp
        self.durationOnlyByTrack = durationOnlyByTrack

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.geofenceCondition = GeofenceCondition()
                    self.geofenceCondition.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sensorCondition = SensorCondition()
                    self.sensorCondition.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.distanceCondition = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.connectTimeoutCondition = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.durationCondition = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.generateAfterTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.durationOnlyByTrack = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GenerateEventsCondition')
        if self.geofenceCondition is not None:
            oprot.writeFieldBegin('geofenceCondition', TType.STRUCT, 1)
            self.geofenceCondition.write(oprot)
            oprot.writeFieldEnd()
        if self.sensorCondition is not None:
            oprot.writeFieldBegin('sensorCondition', TType.STRUCT, 2)
            self.sensorCondition.write(oprot)
            oprot.writeFieldEnd()
        if self.distanceCondition is not None:
            oprot.writeFieldBegin('distanceCondition', TType.DOUBLE, 3)
            oprot.writeDouble(self.distanceCondition)
            oprot.writeFieldEnd()
        if self.connectTimeoutCondition is not None:
            oprot.writeFieldBegin('connectTimeoutCondition', TType.I64, 4)
            oprot.writeI64(self.connectTimeoutCondition)
            oprot.writeFieldEnd()
        if self.durationCondition is not None:
            oprot.writeFieldBegin('durationCondition', TType.I64, 5)
            oprot.writeI64(self.durationCondition)
            oprot.writeFieldEnd()
        if self.generateAfterTimestamp is not None:
            oprot.writeFieldBegin('generateAfterTimestamp', TType.I64, 6)
            oprot.writeI64(self.generateAfterTimestamp)
            oprot.writeFieldEnd()
        if self.durationOnlyByTrack is not None:
            oprot.writeFieldBegin('durationOnlyByTrack', TType.BOOL, 7)
            oprot.writeBool(self.durationOnlyByTrack)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ScheduleInterval(object):
    """
    Attributes:
     - enabled
     - left
     - right

    """


    def __init__(self, enabled=None, left=None, right=None,):
        self.enabled = enabled
        self.left = left
        self.right = right

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.enabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.left = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.right = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ScheduleInterval')
        if self.enabled is not None:
            oprot.writeFieldBegin('enabled', TType.BOOL, 1)
            oprot.writeBool(self.enabled)
            oprot.writeFieldEnd()
        if self.left is not None:
            oprot.writeFieldBegin('left', TType.I32, 2)
            oprot.writeI32(self.left)
            oprot.writeFieldEnd()
        if self.right is not None:
            oprot.writeFieldBegin('right', TType.I32, 3)
            oprot.writeI32(self.right)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ScheduleCondition(object):
    """
    Attributes:
     - weekDaysMask
     - scheduleIntervals
     - timezone

    """


    def __init__(self, weekDaysMask=None, scheduleIntervals=None, timezone=None,):
        self.weekDaysMask = weekDaysMask
        self.scheduleIntervals = scheduleIntervals
        self.timezone = timezone

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.weekDaysMask = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.scheduleIntervals = []
                    (_etype122, _size119) = iprot.readListBegin()
                    for _i123 in range(_size119):
                        _elem124 = ScheduleInterval()
                        _elem124.read(iprot)
                        self.scheduleIntervals.append(_elem124)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.timezone = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ScheduleCondition')
        if self.weekDaysMask is not None:
            oprot.writeFieldBegin('weekDaysMask', TType.BYTE, 1)
            oprot.writeByte(self.weekDaysMask)
            oprot.writeFieldEnd()
        if self.scheduleIntervals is not None:
            oprot.writeFieldBegin('scheduleIntervals', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.scheduleIntervals))
            for iter125 in self.scheduleIntervals:
                iter125.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.timezone is not None:
            oprot.writeFieldBegin('timezone', TType.STRING, 3)
            oprot.writeString(self.timezone.encode('utf-8') if sys.version_info[0] == 2 else self.timezone)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ApplyActionsCondition(object):
    """
    Condition to make rule's actions applied (when events condition is satisfied).
    At least one field must present; field(s) existance depends on (correlates with) event type.

    Attributes:
     - enabled
     - autoDisableAfter
     - boundaryCondition
     - scheduleCondition

    """


    def __init__(self, enabled=None, autoDisableAfter=None, boundaryCondition=None, scheduleCondition=None,):
        self.enabled = enabled
        self.autoDisableAfter = autoDisableAfter
        self.boundaryCondition = boundaryCondition
        self.scheduleCondition = scheduleCondition

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.enabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.autoDisableAfter = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.boundaryCondition = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.scheduleCondition = ScheduleCondition()
                    self.scheduleCondition.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ApplyActionsCondition')
        if self.enabled is not None:
            oprot.writeFieldBegin('enabled', TType.BOOL, 1)
            oprot.writeBool(self.enabled)
            oprot.writeFieldEnd()
        if self.autoDisableAfter is not None:
            oprot.writeFieldBegin('autoDisableAfter', TType.I32, 2)
            oprot.writeI32(self.autoDisableAfter)
            oprot.writeFieldEnd()
        if self.boundaryCondition is not None:
            oprot.writeFieldBegin('boundaryCondition', TType.I32, 3)
            oprot.writeI32(self.boundaryCondition)
            oprot.writeFieldEnd()
        if self.scheduleCondition is not None:
            oprot.writeFieldBegin('scheduleCondition', TType.STRUCT, 4)
            self.scheduleCondition.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Notification(object):
    """
    Description of the notification

    Attributes:
     - userReactionRequired
     - showOnScreen
     - locale
     - emailAddresses
     - smsPhoneNumbers
     - screenTemplate
     - emailBodyTemplate
     - smsBodyTemplate

    """


    def __init__(self, userReactionRequired=None, showOnScreen=None, locale=None, emailAddresses=None, smsPhoneNumbers=None, screenTemplate=None, emailBodyTemplate=None, smsBodyTemplate=None,):
        self.userReactionRequired = userReactionRequired
        self.showOnScreen = showOnScreen
        self.locale = locale
        self.emailAddresses = emailAddresses
        self.smsPhoneNumbers = smsPhoneNumbers
        self.screenTemplate = screenTemplate
        self.emailBodyTemplate = emailBodyTemplate
        self.smsBodyTemplate = smsBodyTemplate

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.userReactionRequired = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.showOnScreen = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.locale = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.emailAddresses = []
                    (_etype129, _size126) = iprot.readListBegin()
                    for _i130 in range(_size126):
                        _elem131 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.emailAddresses.append(_elem131)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.smsPhoneNumbers = []
                    (_etype135, _size132) = iprot.readListBegin()
                    for _i136 in range(_size132):
                        _elem137 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.smsPhoneNumbers.append(_elem137)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.screenTemplate = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.emailBodyTemplate = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.smsBodyTemplate = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Notification')
        if self.userReactionRequired is not None:
            oprot.writeFieldBegin('userReactionRequired', TType.BOOL, 1)
            oprot.writeBool(self.userReactionRequired)
            oprot.writeFieldEnd()
        if self.showOnScreen is not None:
            oprot.writeFieldBegin('showOnScreen', TType.BOOL, 2)
            oprot.writeBool(self.showOnScreen)
            oprot.writeFieldEnd()
        if self.locale is not None:
            oprot.writeFieldBegin('locale', TType.STRING, 3)
            oprot.writeString(self.locale.encode('utf-8') if sys.version_info[0] == 2 else self.locale)
            oprot.writeFieldEnd()
        if self.emailAddresses is not None:
            oprot.writeFieldBegin('emailAddresses', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.emailAddresses))
            for iter138 in self.emailAddresses:
                oprot.writeString(iter138.encode('utf-8') if sys.version_info[0] == 2 else iter138)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.smsPhoneNumbers is not None:
            oprot.writeFieldBegin('smsPhoneNumbers', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.smsPhoneNumbers))
            for iter139 in self.smsPhoneNumbers:
                oprot.writeString(iter139.encode('utf-8') if sys.version_info[0] == 2 else iter139)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.screenTemplate is not None:
            oprot.writeFieldBegin('screenTemplate', TType.STRING, 6)
            oprot.writeString(self.screenTemplate.encode('utf-8') if sys.version_info[0] == 2 else self.screenTemplate)
            oprot.writeFieldEnd()
        if self.emailBodyTemplate is not None:
            oprot.writeFieldBegin('emailBodyTemplate', TType.STRING, 7)
            oprot.writeString(self.emailBodyTemplate.encode('utf-8') if sys.version_info[0] == 2 else self.emailBodyTemplate)
            oprot.writeFieldEnd()
        if self.smsBodyTemplate is not None:
            oprot.writeFieldBegin('smsBodyTemplate', TType.STRING, 8)
            oprot.writeString(self.smsBodyTemplate.encode('utf-8') if sys.version_info[0] == 2 else self.smsBodyTemplate)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TrackerCommand(object):
    """
    Command to send to tracker

    Attributes:
     - name
     - roleId

    """


    def __init__(self, name=None, roleId=None,):
        self.name = name
        self.roleId = roleId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.roleId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TrackerCommand')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.roleId is not None:
            oprot.writeFieldBegin('roleId', TType.STRING, 2)
            oprot.writeString(self.roleId.encode('utf-8') if sys.version_info[0] == 2 else self.roleId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EventsRuleActions(object):
    """
    Actions to execute when all conditions satisfied

    Attributes:
     - notification
     - newGroupId
     - commandsToSend

    """


    def __init__(self, notification=None, newGroupId=None, commandsToSend=None,):
        self.notification = notification
        self.newGroupId = newGroupId
        self.commandsToSend = commandsToSend

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.notification = Notification()
                    self.notification.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.newGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.commandsToSend = []
                    (_etype143, _size140) = iprot.readListBegin()
                    for _i144 in range(_size140):
                        _elem145 = TrackerCommand()
                        _elem145.read(iprot)
                        self.commandsToSend.append(_elem145)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EventsRuleActions')
        if self.notification is not None:
            oprot.writeFieldBegin('notification', TType.STRUCT, 1)
            self.notification.write(oprot)
            oprot.writeFieldEnd()
        if self.newGroupId is not None:
            oprot.writeFieldBegin('newGroupId', TType.STRING, 2)
            oprot.writeString(self.newGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.newGroupId)
            oprot.writeFieldEnd()
        if self.commandsToSend is not None:
            oprot.writeFieldBegin('commandsToSend', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.commandsToSend))
            for iter146 in self.commandsToSend:
                iter146.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EventsRule(object):
    """
    Rule to generate events

    Attributes:
     - parentGroupId
     - id
     - title
     - monitoringObjectIds
     - eventsConditions
     - eventsConditionsAreDisjunctive
     - generatedEventType
     - actionsCondition
     - actions

    """


    def __init__(self, parentGroupId=None, id=None, title=None, monitoringObjectIds=None, eventsConditions=None, eventsConditionsAreDisjunctive=None, generatedEventType=None, actionsCondition=None, actions=None,):
        self.parentGroupId = parentGroupId
        self.id = id
        self.title = title
        self.monitoringObjectIds = monitoringObjectIds
        self.eventsConditions = eventsConditions
        self.eventsConditionsAreDisjunctive = eventsConditionsAreDisjunctive
        self.generatedEventType = generatedEventType
        self.actionsCondition = actionsCondition
        self.actions = actions

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.monitoringObjectIds = []
                    (_etype150, _size147) = iprot.readListBegin()
                    for _i151 in range(_size147):
                        _elem152 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.monitoringObjectIds.append(_elem152)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.eventsConditions = []
                    (_etype156, _size153) = iprot.readListBegin()
                    for _i157 in range(_size153):
                        _elem158 = GenerateEventsCondition()
                        _elem158.read(iprot)
                        self.eventsConditions.append(_elem158)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.eventsConditionsAreDisjunctive = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.generatedEventType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.actionsCondition = ApplyActionsCondition()
                    self.actionsCondition.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.actions = EventsRuleActions()
                    self.actions.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EventsRule')
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 1)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 3)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.monitoringObjectIds is not None:
            oprot.writeFieldBegin('monitoringObjectIds', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.monitoringObjectIds))
            for iter159 in self.monitoringObjectIds:
                oprot.writeString(iter159.encode('utf-8') if sys.version_info[0] == 2 else iter159)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.eventsConditions is not None:
            oprot.writeFieldBegin('eventsConditions', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.eventsConditions))
            for iter160 in self.eventsConditions:
                iter160.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.eventsConditionsAreDisjunctive is not None:
            oprot.writeFieldBegin('eventsConditionsAreDisjunctive', TType.BOOL, 6)
            oprot.writeBool(self.eventsConditionsAreDisjunctive)
            oprot.writeFieldEnd()
        if self.generatedEventType is not None:
            oprot.writeFieldBegin('generatedEventType', TType.I32, 7)
            oprot.writeI32(self.generatedEventType)
            oprot.writeFieldEnd()
        if self.actionsCondition is not None:
            oprot.writeFieldBegin('actionsCondition', TType.STRUCT, 8)
            self.actionsCondition.write(oprot)
            oprot.writeFieldEnd()
        if self.actions is not None:
            oprot.writeFieldBegin('actions', TType.STRUCT, 9)
            self.actions.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TripGeofenceNotification(object):
    """
    Structure specifies the geofence, the addresses and
    event types filter for sending notifications
    if the event occurred in the geofence

    Attributes:
     - geofence
     - emailAddresses
     - smsPhoneNumbers
     - filter

    """


    def __init__(self, geofence=None, emailAddresses=None, smsPhoneNumbers=None, filter=None,):
        self.geofence = geofence
        self.emailAddresses = emailAddresses
        self.smsPhoneNumbers = smsPhoneNumbers
        self.filter = filter

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.geofence = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.emailAddresses = []
                    (_etype164, _size161) = iprot.readListBegin()
                    for _i165 in range(_size161):
                        _elem166 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.emailAddresses.append(_elem166)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.smsPhoneNumbers = []
                    (_etype170, _size167) = iprot.readListBegin()
                    for _i171 in range(_size167):
                        _elem172 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.smsPhoneNumbers.append(_elem172)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.filter = []
                    (_etype176, _size173) = iprot.readListBegin()
                    for _i177 in range(_size173):
                        _elem178 = iprot.readI32()
                        self.filter.append(_elem178)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TripGeofenceNotification')
        if self.geofence is not None:
            oprot.writeFieldBegin('geofence', TType.STRING, 1)
            oprot.writeString(self.geofence.encode('utf-8') if sys.version_info[0] == 2 else self.geofence)
            oprot.writeFieldEnd()
        if self.emailAddresses is not None:
            oprot.writeFieldBegin('emailAddresses', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.emailAddresses))
            for iter179 in self.emailAddresses:
                oprot.writeString(iter179.encode('utf-8') if sys.version_info[0] == 2 else iter179)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.smsPhoneNumbers is not None:
            oprot.writeFieldBegin('smsPhoneNumbers', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.smsPhoneNumbers))
            for iter180 in self.smsPhoneNumbers:
                oprot.writeString(iter180.encode('utf-8') if sys.version_info[0] == 2 else iter180)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.filter is not None:
            oprot.writeFieldBegin('filter', TType.LIST, 4)
            oprot.writeListBegin(TType.I32, len(self.filter))
            for iter181 in self.filter:
                oprot.writeI32(iter181)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TripNotification(object):
    """
    Structure specifies trip notification parameters

    Attributes:
     - messageTemplate
     - showOnScreen
     - emailAddresses
     - smsPhoneNumbers
     - disconnectMinutes
     - unscheduledStopMinutes
     - absenceFromTripMinutes
     - soonTripEndKm
     - geofenceNotifications
     - emailOperatorControl
     - reactionRequiredEventTypes

    """


    def __init__(self, messageTemplate="Object: {{device}}, Type: {{event}}", showOnScreen=False, emailAddresses=None, smsPhoneNumbers=None, disconnectMinutes=120, unscheduledStopMinutes=30, absenceFromTripMinutes=20, soonTripEndKm=30, geofenceNotifications=None, emailOperatorControl=None, reactionRequiredEventTypes=None,):
        self.messageTemplate = messageTemplate
        self.showOnScreen = showOnScreen
        self.emailAddresses = emailAddresses
        self.smsPhoneNumbers = smsPhoneNumbers
        self.disconnectMinutes = disconnectMinutes
        self.unscheduledStopMinutes = unscheduledStopMinutes
        self.absenceFromTripMinutes = absenceFromTripMinutes
        self.soonTripEndKm = soonTripEndKm
        self.geofenceNotifications = geofenceNotifications
        self.emailOperatorControl = emailOperatorControl
        self.reactionRequiredEventTypes = reactionRequiredEventTypes

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.messageTemplate = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.showOnScreen = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.emailAddresses = []
                    (_etype185, _size182) = iprot.readListBegin()
                    for _i186 in range(_size182):
                        _elem187 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.emailAddresses.append(_elem187)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.smsPhoneNumbers = []
                    (_etype191, _size188) = iprot.readListBegin()
                    for _i192 in range(_size188):
                        _elem193 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.smsPhoneNumbers.append(_elem193)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.disconnectMinutes = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.unscheduledStopMinutes = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.absenceFromTripMinutes = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.soonTripEndKm = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.geofenceNotifications = []
                    (_etype197, _size194) = iprot.readListBegin()
                    for _i198 in range(_size194):
                        _elem199 = TripGeofenceNotification()
                        _elem199.read(iprot)
                        self.geofenceNotifications.append(_elem199)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.emailOperatorControl = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.reactionRequiredEventTypes = []
                    (_etype203, _size200) = iprot.readListBegin()
                    for _i204 in range(_size200):
                        _elem205 = iprot.readI32()
                        self.reactionRequiredEventTypes.append(_elem205)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TripNotification')
        if self.messageTemplate is not None:
            oprot.writeFieldBegin('messageTemplate', TType.STRING, 1)
            oprot.writeString(self.messageTemplate.encode('utf-8') if sys.version_info[0] == 2 else self.messageTemplate)
            oprot.writeFieldEnd()
        if self.showOnScreen is not None:
            oprot.writeFieldBegin('showOnScreen', TType.BOOL, 2)
            oprot.writeBool(self.showOnScreen)
            oprot.writeFieldEnd()
        if self.emailAddresses is not None:
            oprot.writeFieldBegin('emailAddresses', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.emailAddresses))
            for iter206 in self.emailAddresses:
                oprot.writeString(iter206.encode('utf-8') if sys.version_info[0] == 2 else iter206)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.smsPhoneNumbers is not None:
            oprot.writeFieldBegin('smsPhoneNumbers', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.smsPhoneNumbers))
            for iter207 in self.smsPhoneNumbers:
                oprot.writeString(iter207.encode('utf-8') if sys.version_info[0] == 2 else iter207)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.disconnectMinutes is not None:
            oprot.writeFieldBegin('disconnectMinutes', TType.I32, 5)
            oprot.writeI32(self.disconnectMinutes)
            oprot.writeFieldEnd()
        if self.unscheduledStopMinutes is not None:
            oprot.writeFieldBegin('unscheduledStopMinutes', TType.I32, 6)
            oprot.writeI32(self.unscheduledStopMinutes)
            oprot.writeFieldEnd()
        if self.absenceFromTripMinutes is not None:
            oprot.writeFieldBegin('absenceFromTripMinutes', TType.I32, 7)
            oprot.writeI32(self.absenceFromTripMinutes)
            oprot.writeFieldEnd()
        if self.soonTripEndKm is not None:
            oprot.writeFieldBegin('soonTripEndKm', TType.I32, 8)
            oprot.writeI32(self.soonTripEndKm)
            oprot.writeFieldEnd()
        if self.geofenceNotifications is not None:
            oprot.writeFieldBegin('geofenceNotifications', TType.LIST, 9)
            oprot.writeListBegin(TType.STRUCT, len(self.geofenceNotifications))
            for iter208 in self.geofenceNotifications:
                iter208.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.emailOperatorControl is not None:
            oprot.writeFieldBegin('emailOperatorControl', TType.BOOL, 10)
            oprot.writeBool(self.emailOperatorControl)
            oprot.writeFieldEnd()
        if self.reactionRequiredEventTypes is not None:
            oprot.writeFieldBegin('reactionRequiredEventTypes', TType.LIST, 11)
            oprot.writeListBegin(TType.I32, len(self.reactionRequiredEventTypes))
            for iter209 in self.reactionRequiredEventTypes:
                oprot.writeI32(iter209)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TripStage(object):
    """
    Attributes:
     - routeStageId
     - arrivalUnixTime
     - arrivalToleranceSeconds
     - departureUnixTime
     - departureToleranceSeconds
     - seqNo
     - optionalControl

    """


    def __init__(self, routeStageId=None, arrivalUnixTime=None, arrivalToleranceSeconds=None, departureUnixTime=None, departureToleranceSeconds=None, seqNo=None, optionalControl=None,):
        self.routeStageId = routeStageId
        self.arrivalUnixTime = arrivalUnixTime
        self.arrivalToleranceSeconds = arrivalToleranceSeconds
        self.departureUnixTime = departureUnixTime
        self.departureToleranceSeconds = departureToleranceSeconds
        self.seqNo = seqNo
        self.optionalControl = optionalControl

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.routeStageId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.arrivalUnixTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.arrivalToleranceSeconds = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.departureUnixTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.departureToleranceSeconds = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.seqNo = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.optionalControl = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TripStage')
        if self.routeStageId is not None:
            oprot.writeFieldBegin('routeStageId', TType.STRING, 1)
            oprot.writeString(self.routeStageId.encode('utf-8') if sys.version_info[0] == 2 else self.routeStageId)
            oprot.writeFieldEnd()
        if self.arrivalUnixTime is not None:
            oprot.writeFieldBegin('arrivalUnixTime', TType.I64, 2)
            oprot.writeI64(self.arrivalUnixTime)
            oprot.writeFieldEnd()
        if self.arrivalToleranceSeconds is not None:
            oprot.writeFieldBegin('arrivalToleranceSeconds', TType.I32, 3)
            oprot.writeI32(self.arrivalToleranceSeconds)
            oprot.writeFieldEnd()
        if self.departureUnixTime is not None:
            oprot.writeFieldBegin('departureUnixTime', TType.I64, 4)
            oprot.writeI64(self.departureUnixTime)
            oprot.writeFieldEnd()
        if self.departureToleranceSeconds is not None:
            oprot.writeFieldBegin('departureToleranceSeconds', TType.I32, 5)
            oprot.writeI32(self.departureToleranceSeconds)
            oprot.writeFieldEnd()
        if self.seqNo is not None:
            oprot.writeFieldBegin('seqNo', TType.I32, 6)
            oprot.writeI32(self.seqNo)
            oprot.writeFieldEnd()
        if self.optionalControl is not None:
            oprot.writeFieldBegin('optionalControl', TType.BOOL, 7)
            oprot.writeBool(self.optionalControl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TripStageSet(object):
    """
    Attributes:
     - tripStages

    """


    def __init__(self, tripStages=None,):
        self.tripStages = tripStages

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.tripStages = []
                    (_etype213, _size210) = iprot.readListBegin()
                    for _i214 in range(_size210):
                        _elem215 = TripStage()
                        _elem215.read(iprot)
                        self.tripStages.append(_elem215)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TripStageSet')
        if self.tripStages is not None:
            oprot.writeFieldBegin('tripStages', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.tripStages))
            for iter216 in self.tripStages:
                iter216.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Trip(object):
    """
    Attributes:
     - id
     - status
     - vehicleId
     - routeId
     - tripStageSets
     - startTripUnixTime
     - abortTripUnixTime
     - notificationParams
     - additionalFields

    """


    def __init__(self, id=None, status=None, vehicleId=None, routeId=None, tripStageSets=None, startTripUnixTime=None, abortTripUnixTime=None, notificationParams=None, additionalFields=None,):
        self.id = id
        self.status = status
        self.vehicleId = vehicleId
        self.routeId = routeId
        self.tripStageSets = tripStageSets
        self.startTripUnixTime = startTripUnixTime
        self.abortTripUnixTime = abortTripUnixTime
        self.notificationParams = notificationParams
        self.additionalFields = additionalFields

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.vehicleId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.routeId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.tripStageSets = []
                    (_etype220, _size217) = iprot.readListBegin()
                    for _i221 in range(_size217):
                        _elem222 = TripStageSet()
                        _elem222.read(iprot)
                        self.tripStageSets.append(_elem222)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.startTripUnixTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.abortTripUnixTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.notificationParams = TripNotification()
                    self.notificationParams.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.additionalFields = AdditionalFields()
                    self.additionalFields.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Trip')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.vehicleId is not None:
            oprot.writeFieldBegin('vehicleId', TType.STRING, 3)
            oprot.writeString(self.vehicleId.encode('utf-8') if sys.version_info[0] == 2 else self.vehicleId)
            oprot.writeFieldEnd()
        if self.routeId is not None:
            oprot.writeFieldBegin('routeId', TType.STRING, 4)
            oprot.writeString(self.routeId.encode('utf-8') if sys.version_info[0] == 2 else self.routeId)
            oprot.writeFieldEnd()
        if self.tripStageSets is not None:
            oprot.writeFieldBegin('tripStageSets', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.tripStageSets))
            for iter223 in self.tripStageSets:
                iter223.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.startTripUnixTime is not None:
            oprot.writeFieldBegin('startTripUnixTime', TType.I64, 6)
            oprot.writeI64(self.startTripUnixTime)
            oprot.writeFieldEnd()
        if self.abortTripUnixTime is not None:
            oprot.writeFieldBegin('abortTripUnixTime', TType.I64, 7)
            oprot.writeI64(self.abortTripUnixTime)
            oprot.writeFieldEnd()
        if self.notificationParams is not None:
            oprot.writeFieldBegin('notificationParams', TType.STRUCT, 8)
            self.notificationParams.write(oprot)
            oprot.writeFieldEnd()
        if self.additionalFields is not None:
            oprot.writeFieldBegin('additionalFields', TType.STRUCT, 9)
            self.additionalFields.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AddressFilterInfo(object):
    """
    Filtering info for address info service

    Attributes:
     - mask: Symbol mask for search
     - limit: Limits the number of results returned by search

    """


    def __init__(self, mask=None, limit=None,):
        self.mask = mask
        self.limit = limit

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mask = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.limit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddressFilterInfo')
        if self.mask is not None:
            oprot.writeFieldBegin('mask', TType.STRING, 1)
            oprot.writeString(self.mask.encode('utf-8') if sys.version_info[0] == 2 else self.mask)
            oprot.writeFieldEnd()
        if self.limit is not None:
            oprot.writeFieldBegin('limit', TType.I32, 2)
            oprot.writeI32(self.limit)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AddressInfoItContext(object):
    """
    Context for continues address search using AddressInfoIt

    Attributes:
     - key

    """


    def __init__(self, key=None,):
        self.key = key

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.key = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddressInfoItContext')
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.STRING, 1)
            oprot.writeString(self.key.encode('utf-8') if sys.version_info[0] == 2 else self.key)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AddressInfoIt(object):
    """
    Result of address search

    Attributes:
     - info
     - context: Context to use in subsequent search

    """


    def __init__(self, info=None, context=None,):
        self.info = info
        self.context = context

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.info = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.context = AddressInfoItContext()
                    self.context.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AddressInfoIt')
        if self.info is not None:
            oprot.writeFieldBegin('info', TType.STRING, 1)
            oprot.writeString(self.info.encode('utf-8') if sys.version_info[0] == 2 else self.info)
            oprot.writeFieldEnd()
        if self.context is not None:
            oprot.writeFieldBegin('context', TType.STRUCT, 2)
            self.context.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SensorCalibrationTablePoint(object):
    """
    Attributes:
     - x
     - y

    """


    def __init__(self, x=None, y=None,):
        self.x = x
        self.y = y

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.x = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.y = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SensorCalibrationTablePoint')
        if self.x is not None:
            oprot.writeFieldBegin('x', TType.DOUBLE, 1)
            oprot.writeDouble(self.x)
            oprot.writeFieldEnd()
        if self.y is not None:
            oprot.writeFieldBegin('y', TType.DOUBLE, 2)
            oprot.writeDouble(self.y)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SensorCalibrationTable(object):
    """
    Attributes:
     - points
     - fixMinMax

    """


    def __init__(self, points=None, fixMinMax=None,):
        self.points = points
        self.fixMinMax = fixMinMax

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.points = []
                    (_etype227, _size224) = iprot.readListBegin()
                    for _i228 in range(_size224):
                        _elem229 = SensorCalibrationTablePoint()
                        _elem229.read(iprot)
                        self.points.append(_elem229)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.fixMinMax = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SensorCalibrationTable')
        if self.points is not None:
            oprot.writeFieldBegin('points', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.points))
            for iter230 in self.points:
                iter230.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.fixMinMax is not None:
            oprot.writeFieldBegin('fixMinMax', TType.BOOL, 2)
            oprot.writeBool(self.fixMinMax)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SensorBooleanValues(object):
    """
    Attributes:
     - onValue
     - offValue

    """


    def __init__(self, onValue=None, offValue=None,):
        self.onValue = onValue
        self.offValue = offValue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.onValue = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.offValue = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SensorBooleanValues')
        if self.onValue is not None:
            oprot.writeFieldBegin('onValue', TType.STRING, 1)
            oprot.writeString(self.onValue.encode('utf-8') if sys.version_info[0] == 2 else self.onValue)
            oprot.writeFieldEnd()
        if self.offValue is not None:
            oprot.writeFieldBegin('offValue', TType.STRING, 2)
            oprot.writeString(self.offValue.encode('utf-8') if sys.version_info[0] == 2 else self.offValue)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SensorConfiguration(object):
    """
    Attributes:
     - sensorId
     - expression
     - calibrationTable
     - description
     - visible
     - booleanValues

    """


    def __init__(self, sensorId=None, expression=None, calibrationTable=None, description=None, visible=None, booleanValues=None,):
        self.sensorId = sensorId
        self.expression = expression
        self.calibrationTable = calibrationTable
        self.description = description
        self.visible = visible
        self.booleanValues = booleanValues

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sensorId = SensorId()
                    self.sensorId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.expression = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.calibrationTable = SensorCalibrationTable()
                    self.calibrationTable.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.visible = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.booleanValues = SensorBooleanValues()
                    self.booleanValues.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SensorConfiguration')
        if self.sensorId is not None:
            oprot.writeFieldBegin('sensorId', TType.STRUCT, 1)
            self.sensorId.write(oprot)
            oprot.writeFieldEnd()
        if self.expression is not None:
            oprot.writeFieldBegin('expression', TType.STRING, 2)
            oprot.writeString(self.expression.encode('utf-8') if sys.version_info[0] == 2 else self.expression)
            oprot.writeFieldEnd()
        if self.calibrationTable is not None:
            oprot.writeFieldBegin('calibrationTable', TType.STRUCT, 3)
            self.calibrationTable.write(oprot)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 4)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.visible is not None:
            oprot.writeFieldBegin('visible', TType.BOOL, 5)
            oprot.writeBool(self.visible)
            oprot.writeFieldEnd()
        if self.booleanValues is not None:
            oprot.writeFieldBegin('booleanValues', TType.STRUCT, 6)
            self.booleanValues.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TrackSensorConfiguration(object):
    """
    Attributes:
     - sensorKey: sensor key
     - color: color string in '#RRGGBB' format
     - iconUuid: icon ID as in monitoring object properties
     - iconFormat: icon format as in monitoring object properties
     - delay: delay in seconds

    """


    def __init__(self, sensorKey=None, color=None, iconUuid=None, iconFormat=None, delay=None,):
        self.sensorKey = sensorKey
        self.color = color
        self.iconUuid = iconUuid
        self.iconFormat = iconFormat
        self.delay = delay

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sensorKey = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.color = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.iconUuid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.iconFormat = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.delay = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TrackSensorConfiguration')
        if self.sensorKey is not None:
            oprot.writeFieldBegin('sensorKey', TType.STRING, 1)
            oprot.writeString(self.sensorKey.encode('utf-8') if sys.version_info[0] == 2 else self.sensorKey)
            oprot.writeFieldEnd()
        if self.color is not None:
            oprot.writeFieldBegin('color', TType.STRING, 2)
            oprot.writeString(self.color.encode('utf-8') if sys.version_info[0] == 2 else self.color)
            oprot.writeFieldEnd()
        if self.iconUuid is not None:
            oprot.writeFieldBegin('iconUuid', TType.STRING, 3)
            oprot.writeString(self.iconUuid.encode('utf-8') if sys.version_info[0] == 2 else self.iconUuid)
            oprot.writeFieldEnd()
        if self.iconFormat is not None:
            oprot.writeFieldBegin('iconFormat', TType.STRING, 4)
            oprot.writeString(self.iconFormat.encode('utf-8') if sys.version_info[0] == 2 else self.iconFormat)
            oprot.writeFieldEnd()
        if self.delay is not None:
            oprot.writeFieldBegin('delay', TType.I32, 5)
            oprot.writeI32(self.delay)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SensorConfigurationSet(object):
    """
    Attributes:
     - id
     - parentGroupId
     - name
     - sensorConfigurations

    """


    def __init__(self, id=None, parentGroupId=None, name=None, sensorConfigurations=None,):
        self.id = id
        self.parentGroupId = parentGroupId
        self.name = name
        self.sensorConfigurations = sensorConfigurations

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parentGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.sensorConfigurations = []
                    (_etype234, _size231) = iprot.readListBegin()
                    for _i235 in range(_size231):
                        _elem236 = SensorConfiguration()
                        _elem236.read(iprot)
                        self.sensorConfigurations.append(_elem236)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SensorConfigurationSet')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.parentGroupId is not None:
            oprot.writeFieldBegin('parentGroupId', TType.STRING, 2)
            oprot.writeString(self.parentGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.parentGroupId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.sensorConfigurations is not None:
            oprot.writeFieldBegin('sensorConfigurations', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.sensorConfigurations))
            for iter237 in self.sensorConfigurations:
                iter237.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BrokenTrackerRequest(object):
    """
    reportBrokenTracker Request

    Attributes:
     - monitoringObjectId
     - brokenSinceUnixTime: < Monitoring Object ID, not empty, uuid

    """


    def __init__(self, monitoringObjectId=None, brokenSinceUnixTime=None,):
        self.monitoringObjectId = monitoringObjectId
        self.brokenSinceUnixTime = brokenSinceUnixTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.monitoringObjectId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.brokenSinceUnixTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BrokenTrackerRequest')
        if self.monitoringObjectId is not None:
            oprot.writeFieldBegin('monitoringObjectId', TType.STRING, 1)
            oprot.writeString(self.monitoringObjectId.encode('utf-8') if sys.version_info[0] == 2 else self.monitoringObjectId)
            oprot.writeFieldEnd()
        if self.brokenSinceUnixTime is not None:
            oprot.writeFieldBegin('brokenSinceUnixTime', TType.I64, 2)
            oprot.writeI64(self.brokenSinceUnixTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ReportWorkingHours(object):
    """
    Attributes:
     - workingDaysMask
     - beginOffset
     - endOffset

    """


    def __init__(self, workingDaysMask=None, beginOffset=None, endOffset=None,):
        self.workingDaysMask = workingDaysMask
        self.beginOffset = beginOffset
        self.endOffset = endOffset

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.workingDaysMask = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.beginOffset = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.endOffset = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ReportWorkingHours')
        if self.workingDaysMask is not None:
            oprot.writeFieldBegin('workingDaysMask', TType.I16, 1)
            oprot.writeI16(self.workingDaysMask)
            oprot.writeFieldEnd()
        if self.beginOffset is not None:
            oprot.writeFieldBegin('beginOffset', TType.I32, 2)
            oprot.writeI32(self.beginOffset)
            oprot.writeFieldEnd()
        if self.endOffset is not None:
            oprot.writeFieldBegin('endOffset', TType.I32, 3)
            oprot.writeI32(self.endOffset)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ReportTimeFilter(object):
    """
    Attributes:
     - isWorkingTime
     - workingHours

    """


    def __init__(self, isWorkingTime=None, workingHours=None,):
        self.isWorkingTime = isWorkingTime
        self.workingHours = workingHours

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.isWorkingTime = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.workingHours = ReportWorkingHours()
                    self.workingHours.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ReportTimeFilter')
        if self.isWorkingTime is not None:
            oprot.writeFieldBegin('isWorkingTime', TType.BOOL, 1)
            oprot.writeBool(self.isWorkingTime)
            oprot.writeFieldEnd()
        if self.workingHours is not None:
            oprot.writeFieldBegin('workingHours', TType.STRUCT, 2)
            self.workingHours.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ReportInfo(object):
    """
    Attributes:
     - type: Report type, not empty
     - title
     - supportedArgumentTypes
     - supportedColumns
     - supportedGroupBy
     - supportedFilters
     - hierarchicalRows

    """


    def __init__(self, type=None, title=None, supportedArgumentTypes=None, supportedColumns=None, supportedGroupBy=None, supportedFilters=None, hierarchicalRows=None,):
        self.type = type
        self.title = title
        self.supportedArgumentTypes = supportedArgumentTypes
        self.supportedColumns = supportedColumns
        self.supportedGroupBy = supportedGroupBy
        self.supportedFilters = supportedFilters
        self.hierarchicalRows = hierarchicalRows

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.supportedArgumentTypes = []
                    (_etype241, _size238) = iprot.readListBegin()
                    for _i242 in range(_size238):
                        _elem243 = iprot.readI32()
                        self.supportedArgumentTypes.append(_elem243)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.supportedColumns = []
                    (_etype247, _size244) = iprot.readListBegin()
                    for _i248 in range(_size244):
                        _elem249 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.supportedColumns.append(_elem249)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.supportedGroupBy = []
                    (_etype253, _size250) = iprot.readListBegin()
                    for _i254 in range(_size250):
                        _elem255 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.supportedGroupBy.append(_elem255)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.supportedFilters = []
                    (_etype259, _size256) = iprot.readListBegin()
                    for _i260 in range(_size256):
                        _elem261 = iprot.readI32()
                        self.supportedFilters.append(_elem261)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.hierarchicalRows = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ReportInfo')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 2)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 3)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.supportedArgumentTypes is not None:
            oprot.writeFieldBegin('supportedArgumentTypes', TType.LIST, 4)
            oprot.writeListBegin(TType.I32, len(self.supportedArgumentTypes))
            for iter262 in self.supportedArgumentTypes:
                oprot.writeI32(iter262)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.supportedColumns is not None:
            oprot.writeFieldBegin('supportedColumns', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.supportedColumns))
            for iter263 in self.supportedColumns:
                oprot.writeString(iter263.encode('utf-8') if sys.version_info[0] == 2 else iter263)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.supportedGroupBy is not None:
            oprot.writeFieldBegin('supportedGroupBy', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.supportedGroupBy))
            for iter264 in self.supportedGroupBy:
                oprot.writeString(iter264.encode('utf-8') if sys.version_info[0] == 2 else iter264)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.supportedFilters is not None:
            oprot.writeFieldBegin('supportedFilters', TType.LIST, 7)
            oprot.writeListBegin(TType.I32, len(self.supportedFilters))
            for iter265 in self.supportedFilters:
                oprot.writeI32(iter265)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.hierarchicalRows is not None:
            oprot.writeFieldBegin('hierarchicalRows', TType.BOOL, 8)
            oprot.writeBool(self.hierarchicalRows)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ReportRequest(object):
    """
    Attributes:
     - type: Report Type
     - title
     - format
     - language
     - timezone
     - fromTimestamp
     - toTimestamp
     - columns
     - groupBy
     - stateFilter
     - timeFilter
     - argumentType
     - argumentIds

    """


    def __init__(self, type=None, title=None, format=None, language=None, timezone=None, fromTimestamp=None, toTimestamp=None, columns=None, groupBy=None, stateFilter=None, timeFilter=None, argumentType=None, argumentIds=None,):
        self.type = type
        self.title = title
        self.format = format
        self.language = language
        self.timezone = timezone
        self.fromTimestamp = fromTimestamp
        self.toTimestamp = toTimestamp
        self.columns = columns
        self.groupBy = groupBy
        self.stateFilter = stateFilter
        self.timeFilter = timeFilter
        self.argumentType = argumentType
        self.argumentIds = argumentIds

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.format = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.language = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.timezone = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.fromTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.toTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.columns = []
                    (_etype269, _size266) = iprot.readListBegin()
                    for _i270 in range(_size266):
                        _elem271 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.columns.append(_elem271)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.groupBy = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.stateFilter = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRUCT:
                    self.timeFilter = ReportTimeFilter()
                    self.timeFilter.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.I32:
                    self.argumentType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.LIST:
                    self.argumentIds = []
                    (_etype275, _size272) = iprot.readListBegin()
                    for _i276 in range(_size272):
                        _elem277 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.argumentIds.append(_elem277)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ReportRequest')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 2)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 3)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.format is not None:
            oprot.writeFieldBegin('format', TType.I32, 4)
            oprot.writeI32(self.format)
            oprot.writeFieldEnd()
        if self.language is not None:
            oprot.writeFieldBegin('language', TType.STRING, 5)
            oprot.writeString(self.language.encode('utf-8') if sys.version_info[0] == 2 else self.language)
            oprot.writeFieldEnd()
        if self.timezone is not None:
            oprot.writeFieldBegin('timezone', TType.STRING, 6)
            oprot.writeString(self.timezone.encode('utf-8') if sys.version_info[0] == 2 else self.timezone)
            oprot.writeFieldEnd()
        if self.fromTimestamp is not None:
            oprot.writeFieldBegin('fromTimestamp', TType.I64, 7)
            oprot.writeI64(self.fromTimestamp)
            oprot.writeFieldEnd()
        if self.toTimestamp is not None:
            oprot.writeFieldBegin('toTimestamp', TType.I64, 8)
            oprot.writeI64(self.toTimestamp)
            oprot.writeFieldEnd()
        if self.columns is not None:
            oprot.writeFieldBegin('columns', TType.LIST, 9)
            oprot.writeListBegin(TType.STRING, len(self.columns))
            for iter278 in self.columns:
                oprot.writeString(iter278.encode('utf-8') if sys.version_info[0] == 2 else iter278)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.groupBy is not None:
            oprot.writeFieldBegin('groupBy', TType.STRING, 10)
            oprot.writeString(self.groupBy.encode('utf-8') if sys.version_info[0] == 2 else self.groupBy)
            oprot.writeFieldEnd()
        if self.stateFilter is not None:
            oprot.writeFieldBegin('stateFilter', TType.I32, 11)
            oprot.writeI32(self.stateFilter)
            oprot.writeFieldEnd()
        if self.timeFilter is not None:
            oprot.writeFieldBegin('timeFilter', TType.STRUCT, 12)
            self.timeFilter.write(oprot)
            oprot.writeFieldEnd()
        if self.argumentType is not None:
            oprot.writeFieldBegin('argumentType', TType.I32, 20)
            oprot.writeI32(self.argumentType)
            oprot.writeFieldEnd()
        if self.argumentIds is not None:
            oprot.writeFieldBegin('argumentIds', TType.LIST, 21)
            oprot.writeListBegin(TType.STRING, len(self.argumentIds))
            for iter279 in self.argumentIds:
                oprot.writeString(iter279.encode('utf-8') if sys.version_info[0] == 2 else iter279)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ScreenReportCell(object):
    """
    Attributes:
     - stringValue
     - i64Value
     - boolValue
     - doubleValue

    """


    def __init__(self, stringValue=None, i64Value=None, boolValue=None, doubleValue=None,):
        self.stringValue = stringValue
        self.i64Value = i64Value
        self.boolValue = boolValue
        self.doubleValue = doubleValue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.stringValue = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.i64Value = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.boolValue = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.doubleValue = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ScreenReportCell')
        if self.stringValue is not None:
            oprot.writeFieldBegin('stringValue', TType.STRING, 1)
            oprot.writeString(self.stringValue.encode('utf-8') if sys.version_info[0] == 2 else self.stringValue)
            oprot.writeFieldEnd()
        if self.i64Value is not None:
            oprot.writeFieldBegin('i64Value', TType.I64, 2)
            oprot.writeI64(self.i64Value)
            oprot.writeFieldEnd()
        if self.boolValue is not None:
            oprot.writeFieldBegin('boolValue', TType.BOOL, 3)
            oprot.writeBool(self.boolValue)
            oprot.writeFieldEnd()
        if self.doubleValue is not None:
            oprot.writeFieldBegin('doubleValue', TType.DOUBLE, 4)
            oprot.writeDouble(self.doubleValue)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ScreenReportSimpleRow(object):
    """
    Attributes:
     - cells

    """


    def __init__(self, cells=None,):
        self.cells = cells

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.cells = []
                    (_etype283, _size280) = iprot.readListBegin()
                    for _i284 in range(_size280):
                        _elem285 = ScreenReportCell()
                        _elem285.read(iprot)
                        self.cells.append(_elem285)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ScreenReportSimpleRow')
        if self.cells is not None:
            oprot.writeFieldBegin('cells', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.cells))
            for iter286 in self.cells:
                iter286.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ScreenReportHierarchicalRow(object):
    """
    Attributes:
     - rows
     - subtotal

    """


    def __init__(self, rows=None, subtotal=None,):
        self.rows = rows
        self.subtotal = subtotal

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.rows = []
                    (_etype290, _size287) = iprot.readListBegin()
                    for _i291 in range(_size287):
                        _elem292 = ScreenReportSimpleRow()
                        _elem292.read(iprot)
                        self.rows.append(_elem292)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.subtotal = ScreenReportSimpleRow()
                    self.subtotal.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ScreenReportHierarchicalRow')
        if self.rows is not None:
            oprot.writeFieldBegin('rows', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.rows))
            for iter293 in self.rows:
                iter293.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.subtotal is not None:
            oprot.writeFieldBegin('subtotal', TType.STRUCT, 2)
            self.subtotal.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ScreenReportRow(object):
    """
    Attributes:
     - simple
     - hierarchical

    """


    def __init__(self, simple=None, hierarchical=None,):
        self.simple = simple
        self.hierarchical = hierarchical

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.simple = ScreenReportSimpleRow()
                    self.simple.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.hierarchical = ScreenReportHierarchicalRow()
                    self.hierarchical.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ScreenReportRow')
        if self.simple is not None:
            oprot.writeFieldBegin('simple', TType.STRUCT, 1)
            self.simple.write(oprot)
            oprot.writeFieldEnd()
        if self.hierarchical is not None:
            oprot.writeFieldBegin('hierarchical', TType.STRUCT, 2)
            self.hierarchical.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ScreenReport(object):
    """
    Attributes:
     - type
     - fromTimestamp
     - toTimestamp
     - generatedAt
     - columns
     - rows

    """


    def __init__(self, type=None, fromTimestamp=None, toTimestamp=None, generatedAt=None, columns=None, rows=None,):
        self.type = type
        self.fromTimestamp = fromTimestamp
        self.toTimestamp = toTimestamp
        self.generatedAt = generatedAt
        self.columns = columns
        self.rows = rows

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.fromTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.toTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.generatedAt = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.columns = []
                    (_etype297, _size294) = iprot.readListBegin()
                    for _i298 in range(_size294):
                        _elem299 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.columns.append(_elem299)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.rows = []
                    (_etype303, _size300) = iprot.readListBegin()
                    for _i304 in range(_size300):
                        _elem305 = ScreenReportRow()
                        _elem305.read(iprot)
                        self.rows.append(_elem305)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ScreenReport')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 2)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.fromTimestamp is not None:
            oprot.writeFieldBegin('fromTimestamp', TType.I64, 3)
            oprot.writeI64(self.fromTimestamp)
            oprot.writeFieldEnd()
        if self.toTimestamp is not None:
            oprot.writeFieldBegin('toTimestamp', TType.I64, 4)
            oprot.writeI64(self.toTimestamp)
            oprot.writeFieldEnd()
        if self.generatedAt is not None:
            oprot.writeFieldBegin('generatedAt', TType.I64, 5)
            oprot.writeI64(self.generatedAt)
            oprot.writeFieldEnd()
        if self.columns is not None:
            oprot.writeFieldBegin('columns', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.columns))
            for iter306 in self.columns:
                oprot.writeString(iter306.encode('utf-8') if sys.version_info[0] == 2 else iter306)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.rows is not None:
            oprot.writeFieldBegin('rows', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.rows))
            for iter307 in self.rows:
                iter307.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(BadRequest)
BadRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(InternalServerError)
InternalServerError.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(Busy)
Busy.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(Unauthorized)
Unauthorized.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(AccessDenied)
AccessDenied.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(ObjectNotFound)
ObjectNotFound.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(UserLicenseExpired)
UserLicenseExpired.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(TrialIsNotActivated)
TrialIsNotActivated.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(LoginAlreadyExists)
LoginAlreadyExists.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(LoginFailed)
LoginFailed.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(TrackerAlreadyUsed)
TrackerAlreadyUsed.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(ObjectIdMustBeEmptyOnObjectCreation)
ObjectIdMustBeEmptyOnObjectCreation.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(StoreField)
StoreField.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'title', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'description', 'UTF8', None, ),  # 3
    (4, TType.BOOL, 'inherited', None, None, ),  # 4
)
all_structs.append(StoreSchemeId)
StoreSchemeId.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.I32, 'extensionFor', None, None, ),  # 2
)
all_structs.append(StoreScheme)
StoreScheme.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'id', [StoreSchemeId, None], None, ),  # 1
    (2, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'description', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'inheritId', 'UTF8', None, ),  # 5
    (6, TType.LIST, 'fields', (TType.STRUCT, [StoreField, None], False), None, ),  # 6
)
all_structs.append(StoreFieldValue)
StoreFieldValue.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'title', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'value', 'UTF8', None, ),  # 2
)
all_structs.append(AdditionalFields)
AdditionalFields.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'data', (TType.STRUCT, [StoreFieldValue, None], False), None, ),  # 1
)
all_structs.append(Session)
Session.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
)
all_structs.append(License)
License.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'expire', None, None, ),  # 1
    (2, TType.I32, 'monitoringObjectsLimit', None, None, ),  # 2
    (3, TType.I32, 'usersLimit', None, None, ),  # 3
    (4, TType.I32, 'smsLimit', None, None, ),  # 4
    (5, TType.BOOL, 'enabled', None, None, ),  # 5
)
all_structs.append(Group)
Group.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'title', 'UTF8', None, ),  # 3
    (4, TType.STRUCT, 'license', [License, None], None, ),  # 4
    (5, TType.STRUCT, 'additionalFields', [AdditionalFields, None], None, ),  # 5
)
all_structs.append(Permission)
Permission.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.I64, 'mask', None, None, ),  # 2
)
all_structs.append(Role)
Role.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'extensionPermissions', (TType.STRUCT, [Permission, None], False), None, ),  # 4
)
all_structs.append(User)
User.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'roleId', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'groupLink', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.STRING, 'login', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'welcomeName', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'email', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'phone', 'UTF8', None, ),  # 8
    (9, TType.BOOL, 'enabled', None, None, ),  # 9
)
all_structs.append(UserSecurityData)
UserSecurityData.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'data1', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'data2', 'UTF8', None, ),  # 3
)
all_structs.append(UserFilter)
UserFilter.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'groupId', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'recursive', None, None, ),  # 2
    None,  # 3
    (4, TType.STRING, 'login', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'email', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'phone', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'welcomeName', 'UTF8', None, ),  # 7
)
all_structs.append(UserFilterOptionalParams)
UserFilterOptionalParams.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'type', None, None, ),  # 1
    (2, TType.I32, 'offset', None, None, ),  # 2
    (3, TType.I32, 'limit', None, None, ),  # 3
)
all_structs.append(TrackerStatusChange)
TrackerStatusChange.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'timestamp', None, None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
)
all_structs.append(Tracker)
Tracker.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'vendor', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'model', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'identifier', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.STRING, 'phoneNumber', 'UTF8', None, ),  # 4
)
all_structs.append(TrackerCertificate)
TrackerCertificate.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'monitoringObjectId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'certificateJson', 'UTF8', None, ),  # 2
)
all_structs.append(MonitoringObject)
MonitoringObject.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
    (4, TType.STRUCT, 'tracker', [Tracker, None], None, ),  # 4
    (5, TType.STRING, 'displayColor', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'displayIcon', 'UTF8', None, ),  # 6
    (7, TType.STRUCT, 'additionalFields', [AdditionalFields, None], None, ),  # 7
    (8, TType.STRING, 'vin', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'displayIconUuid', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'displayIconFormat', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'mapIconUuid', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'mapIconFormat', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'description', 'UTF8', None, ),  # 13
)
all_structs.append(DataRelevanceFilter)
DataRelevanceFilter.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'period', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'newer', None, None, ),  # 2
)
all_structs.append(MonitoringObjectFilter)
MonitoringObjectFilter.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'groupId', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'recursive', None, None, ),  # 2
    (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'imei', 'UTF8', None, ),  # 4
    (5, TType.STRUCT, 'additionalFields', [AdditionalFields, None], None, ),  # 5
    (6, TType.STRING, 'vin', 'UTF8', None, ),  # 6
    (7, TType.STRUCT, 'capturedTimestamp', [DataRelevanceFilter, None], None, ),  # 7
    (8, TType.STRUCT, 'receivedTimestamp', [DataRelevanceFilter, None], None, ),  # 8
    (9, TType.STRING, 'geofenceId', 'UTF8', None, ),  # 9
)
all_structs.append(MonitoringObjectIcon)
MonitoringObjectIcon.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'icon', 'BINARY', None, ),  # 2
    (3, TType.STRING, 'format', 'UTF8', None, ),  # 3
)
all_structs.append(MonitoringObjectIconFilter)
MonitoringObjectIconFilter.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'iconUuids', (TType.STRING, 'UTF8', False), None, ),  # 1
)
all_structs.append(CompanyStatistics)
CompanyStatistics.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'uuid', 'UTF8', None, ),  # 1
    (2, TType.I32, 'smsCount', None, None, ),  # 2
    (3, TType.I32, 'vehiclesCount', None, None, ),  # 3
)
all_structs.append(SensorId)
SensorId.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'type', None, None, ),  # 1
    (2, TType.STRING, 'index', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'customId', 'UTF8', None, ),  # 3
)
all_structs.append(SensorValue)
SensorValue.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sensorId', [SensorId, None], None, ),  # 1
    (2, TType.I64, 'value_integer', None, None, ),  # 2
    (3, TType.DOUBLE, 'value_double', None, None, ),  # 3
    (4, TType.BOOL, 'value_boolean', None, None, ),  # 4
    (5, TType.STRING, 'value_string', 'UTF8', None, ),  # 5
)
all_structs.append(RoadAccidentEventParameters)
RoadAccidentEventParameters.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'accidentId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'vin', 'UTF8', None, ),  # 2
    (3, TType.I64, 'capturedTimestamp', None, None, ),  # 3
    (4, TType.STRUCT, 'coordinates', [thrif.dispatch.common.ttypes.GeoPoint, None], None, ),  # 4
    (5, TType.BOOL, 'crashSevere', None, None, ),  # 5
    (6, TType.STRUCT, 'address', [thrif.dispatch.common.ttypes.RoadAccidentAddress, None], None, ),  # 6
    (7, TType.STRING, 'location', 'UTF8', None, ),  # 7
)
all_structs.append(EventAdditionalInfo)
EventAdditionalInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'pairDuration', None, None, ),  # 1
    (2, TType.STRING, 'fenceName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'routeName', 'UTF8', None, ),  # 3
    (4, TType.I16, 'speed', None, None, ),  # 4
    (5, TType.I16, 'speedLimit', None, None, ),  # 5
    (6, TType.I16, 'maxSpeed', None, None, ),  # 6
    (7, TType.I16, 'direction', None, None, ),  # 7
    (8, TType.I16, 'fuelingAmount', None, None, ),  # 8
    (9, TType.I16, 'drainedAmount', None, None, ),  # 9
    (10, TType.I16, 'accelerarion', None, None, ),  # 10
    (11, TType.I16, 'turnAngle', None, None, ),  # 11
    (12, TType.STRUCT, 'accidentInfo', [RoadAccidentEventParameters, None], None, ),  # 12
)
all_structs.append(MonitoringObjectEvent)
MonitoringObjectEvent.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'monitoringObjectUuid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'uuid', 'UTF8', None, ),  # 2
    (3, TType.I64, 'capturedTime', None, None, ),  # 3
    (4, TType.I32, 'type', None, None, ),  # 4
    (5, TType.STRUCT, 'position', [thrif.dispatch.common.ttypes.GeoPoint, None], None, ),  # 5
    (6, TType.I64, 'globalMonotonicIndex', None, None, ),  # 6
    (7, TType.STRING, 'eventRuleId', 'UTF8', None, ),  # 7
    (8, TType.LIST, 'sensorsValues', (TType.STRUCT, [SensorValue, None], False), None, ),  # 8
    (9, TType.LIST, 'sensorsValuesAtRegistration', (TType.STRUCT, [SensorValue, None], False), None, ),  # 9
    (10, TType.STRING, 'geofenceId', 'UTF8', None, ),  # 10
    (11, TType.STRUCT, 'additionalFields', [EventAdditionalInfo, None], None, ),  # 11
    (12, TType.STRING, 'eventRuleName', 'UTF8', None, ),  # 12
)
all_structs.append(TripEvent)
TripEvent.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'event', [MonitoringObjectEvent, None], None, ),  # 1
    (2, TType.STRING, 'uuid', 'UTF8', None, ),  # 2
    (3, TType.I64, 'globalMonotonicIndex', None, None, ),  # 3
    (4, TType.I32, 'tripStageSeqNo', None, None, ),  # 4
    (5, TType.DOUBLE, 'speed', None, None, ),  # 5
    (6, TType.DOUBLE, 'direction', None, None, ),  # 6
)
all_structs.append(Command)
Command.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'parentMonitoringObjectId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'commandDescription', 'UTF8', None, ),  # 4
)
all_structs.append(CommandStatus)
CommandStatus.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'launchId', None, None, ),  # 1
    (2, TType.STRING, 'commandId', 'UTF8', None, ),  # 2
    (3, TType.I32, 'status', None, None, ),  # 3
    (4, TType.I64, 'startTime', None, None, ),  # 4
    (5, TType.STRING, 'commandStatusDescription', 'UTF8', None, ),  # 5
)
all_structs.append(RelayOptionalParams)
RelayOptionalParams.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'egtsUseOID', None, None, ),  # 1
    (2, TType.STRING, 'egtsProtocolVersion', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'wialonPassword', 'UTF8', None, ),  # 3
    (4, TType.I32, 'port', None, None, ),  # 4
    (5, TType.STRING, 'yandexClid', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'egtsLogin', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'egtsPassword', 'UTF8', None, ),  # 7
    (8, TType.I32, 'egtsDispatcherId', None, None, ),  # 8
    (9, TType.STRING, 'yandexRouteSourceType', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'yandexRouteSourceAdditionalField', 'UTF8', None, ),  # 10
)
all_structs.append(Relay)
Relay.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'title', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'protocol', 'UTF8', None, ),  # 4
    (5, TType.BOOL, 'enabled', None, None, ),  # 5
    (6, TType.LIST, 'monitoringObjectsIds', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.STRING, 'host', 'UTF8', None, ),  # 7
    (8, TType.STRUCT, 'optionalParams', [RelayOptionalParams, None], None, ),  # 8
)
all_structs.append(Geofence)
Geofence.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'title', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'color', 'UTF8', None, ),  # 4
)
all_structs.append(Place)
Place.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'title', 'UTF8', None, ),  # 3
    (4, TType.STRUCT, 'position', [thrif.dispatch.common.ttypes.GeoPoint, None], None, ),  # 4
)
all_structs.append(SegmentPlan)
SegmentPlan.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'seconds', None, None, ),  # 1
    (2, TType.I32, 'meters', None, None, ),  # 2
)
all_structs.append(RouteStage)
RouteStage.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.I32, 'type', None, None, ),  # 2
    (3, TType.STRUCT, 'point', [thrif.dispatch.common.ttypes.GeoPoint, None], None, ),  # 3
    (4, TType.LIST, 'places', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.LIST, 'geofences', (TType.STRING, 'UTF8', False), None, ),  # 5
)
all_structs.append(RouteStageSet)
RouteStageSet.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'routeStages', (TType.STRUCT, [RouteStage, None], False), None, ),  # 1
)
all_structs.append(Route)
Route.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'title', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'color', 'UTF8', None, ),  # 4
    None,  # 5
    (6, TType.DOUBLE, 'corridorWidth', None, None, ),  # 6
    (7, TType.I32, 'routeControlMethod', None, None, ),  # 7
    (8, TType.I32, 'vehicleRoutingType', None, None, ),  # 8
    (9, TType.LIST, 'routeStageSets', (TType.STRUCT, [RouteStageSet, None], False), None, ),  # 9
)
all_structs.append(SegmentPlanSet)
SegmentPlanSet.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'plan', (TType.STRUCT, [SegmentPlan, None], False), None, ),  # 1
)
all_structs.append(RouteInfo)
RouteInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'route', [Route, None], None, ),  # 1
    (2, TType.LIST, 'segmentsPlanSets', (TType.STRUCT, [SegmentPlanSet, None], False), None, ),  # 2
)
all_structs.append(RouteGeometry)
RouteGeometry.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'segmentsPlan', (TType.STRUCT, [SegmentPlan, None], False), None, ),  # 1
    (2, TType.STRUCT, 'routeLine', [thrif.dispatch.common.ttypes.ClippedPolyline, None], None, ),  # 2
)
all_structs.append(Timepoint)
Timepoint.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'value', None, None, ),  # 1
    (2, TType.STRING, 'timezone', 'UTF8', None, ),  # 2
)
all_structs.append(GeofenceCondition)
GeofenceCondition.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'geofenceIds', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.I32, 'speedlimit', None, None, ),  # 2
    (3, TType.STRUCT, 'timepoint', [Timepoint, None], None, ),  # 3
)
all_structs.append(SensorCondition)
SensorCondition.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sensorId', [SensorId, None], None, ),  # 1
    (2, TType.I32, 'conditionType', None, None, ),  # 2
    (3, TType.DOUBLE, 'value', None, None, ),  # 3
    (4, TType.DOUBLE, 'toValue', None, None, ),  # 4
    (5, TType.BOOL, 'ignoreNull', None, None, ),  # 5
)
all_structs.append(GenerateEventsCondition)
GenerateEventsCondition.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'geofenceCondition', [GeofenceCondition, None], None, ),  # 1
    (2, TType.STRUCT, 'sensorCondition', [SensorCondition, None], None, ),  # 2
    (3, TType.DOUBLE, 'distanceCondition', None, None, ),  # 3
    (4, TType.I64, 'connectTimeoutCondition', None, None, ),  # 4
    (5, TType.I64, 'durationCondition', None, None, ),  # 5
    (6, TType.I64, 'generateAfterTimestamp', None, None, ),  # 6
    (7, TType.BOOL, 'durationOnlyByTrack', None, None, ),  # 7
)
all_structs.append(ScheduleInterval)
ScheduleInterval.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'enabled', None, None, ),  # 1
    (2, TType.I32, 'left', None, None, ),  # 2
    (3, TType.I32, 'right', None, None, ),  # 3
)
all_structs.append(ScheduleCondition)
ScheduleCondition.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'weekDaysMask', None, None, ),  # 1
    (2, TType.LIST, 'scheduleIntervals', (TType.STRUCT, [ScheduleInterval, None], False), None, ),  # 2
    (3, TType.STRING, 'timezone', 'UTF8', None, ),  # 3
)
all_structs.append(ApplyActionsCondition)
ApplyActionsCondition.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'enabled', None, None, ),  # 1
    (2, TType.I32, 'autoDisableAfter', None, None, ),  # 2
    (3, TType.I32, 'boundaryCondition', None, None, ),  # 3
    (4, TType.STRUCT, 'scheduleCondition', [ScheduleCondition, None], None, ),  # 4
)
all_structs.append(Notification)
Notification.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'userReactionRequired', None, None, ),  # 1
    (2, TType.BOOL, 'showOnScreen', None, None, ),  # 2
    (3, TType.STRING, 'locale', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'emailAddresses', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.LIST, 'smsPhoneNumbers', (TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.STRING, 'screenTemplate', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'emailBodyTemplate', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'smsBodyTemplate', 'UTF8', None, ),  # 8
)
all_structs.append(TrackerCommand)
TrackerCommand.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'roleId', 'UTF8', None, ),  # 2
)
all_structs.append(EventsRuleActions)
EventsRuleActions.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'notification', [Notification, None], None, ),  # 1
    (2, TType.STRING, 'newGroupId', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'commandsToSend', (TType.STRUCT, [TrackerCommand, None], False), None, ),  # 3
)
all_structs.append(EventsRule)
EventsRule.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'title', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'monitoringObjectIds', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.LIST, 'eventsConditions', (TType.STRUCT, [GenerateEventsCondition, None], False), None, ),  # 5
    (6, TType.BOOL, 'eventsConditionsAreDisjunctive', None, None, ),  # 6
    (7, TType.I32, 'generatedEventType', None, None, ),  # 7
    (8, TType.STRUCT, 'actionsCondition', [ApplyActionsCondition, None], None, ),  # 8
    (9, TType.STRUCT, 'actions', [EventsRuleActions, None], None, ),  # 9
)
all_structs.append(TripGeofenceNotification)
TripGeofenceNotification.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'geofence', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'emailAddresses', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.LIST, 'smsPhoneNumbers', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.LIST, 'filter', (TType.I32, None, False), None, ),  # 4
)
all_structs.append(TripNotification)
TripNotification.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'messageTemplate', 'UTF8', "Object: {{device}}, Type: {{event}}", ),  # 1
    (2, TType.BOOL, 'showOnScreen', None, False, ),  # 2
    (3, TType.LIST, 'emailAddresses', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.LIST, 'smsPhoneNumbers', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.I32, 'disconnectMinutes', None, 120, ),  # 5
    (6, TType.I32, 'unscheduledStopMinutes', None, 30, ),  # 6
    (7, TType.I32, 'absenceFromTripMinutes', None, 20, ),  # 7
    (8, TType.I32, 'soonTripEndKm', None, 30, ),  # 8
    (9, TType.LIST, 'geofenceNotifications', (TType.STRUCT, [TripGeofenceNotification, None], False), None, ),  # 9
    (10, TType.BOOL, 'emailOperatorControl', None, None, ),  # 10
    (11, TType.LIST, 'reactionRequiredEventTypes', (TType.I32, None, False), None, ),  # 11
)
all_structs.append(TripStage)
TripStage.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'routeStageId', 'UTF8', None, ),  # 1
    (2, TType.I64, 'arrivalUnixTime', None, None, ),  # 2
    (3, TType.I32, 'arrivalToleranceSeconds', None, None, ),  # 3
    (4, TType.I64, 'departureUnixTime', None, None, ),  # 4
    (5, TType.I32, 'departureToleranceSeconds', None, None, ),  # 5
    (6, TType.I32, 'seqNo', None, None, ),  # 6
    (7, TType.BOOL, 'optionalControl', None, None, ),  # 7
)
all_structs.append(TripStageSet)
TripStageSet.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'tripStages', (TType.STRUCT, [TripStage, None], False), None, ),  # 1
)
all_structs.append(Trip)
Trip.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.STRING, 'vehicleId', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'routeId', 'UTF8', None, ),  # 4
    (5, TType.LIST, 'tripStageSets', (TType.STRUCT, [TripStageSet, None], False), None, ),  # 5
    (6, TType.I64, 'startTripUnixTime', None, None, ),  # 6
    (7, TType.I64, 'abortTripUnixTime', None, None, ),  # 7
    (8, TType.STRUCT, 'notificationParams', [TripNotification, None], None, ),  # 8
    (9, TType.STRUCT, 'additionalFields', [AdditionalFields, None], None, ),  # 9
)
all_structs.append(AddressFilterInfo)
AddressFilterInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'mask', 'UTF8', None, ),  # 1
    (2, TType.I32, 'limit', None, None, ),  # 2
)
all_structs.append(AddressInfoItContext)
AddressInfoItContext.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'key', 'UTF8', None, ),  # 1
)
all_structs.append(AddressInfoIt)
AddressInfoIt.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'info', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'context', [AddressInfoItContext, None], None, ),  # 2
)
all_structs.append(SensorCalibrationTablePoint)
SensorCalibrationTablePoint.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'x', None, None, ),  # 1
    (2, TType.DOUBLE, 'y', None, None, ),  # 2
)
all_structs.append(SensorCalibrationTable)
SensorCalibrationTable.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'points', (TType.STRUCT, [SensorCalibrationTablePoint, None], False), None, ),  # 1
    (2, TType.BOOL, 'fixMinMax', None, None, ),  # 2
)
all_structs.append(SensorBooleanValues)
SensorBooleanValues.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'onValue', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'offValue', 'UTF8', None, ),  # 2
)
all_structs.append(SensorConfiguration)
SensorConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sensorId', [SensorId, None], None, ),  # 1
    (2, TType.STRING, 'expression', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'calibrationTable', [SensorCalibrationTable, None], None, ),  # 3
    (4, TType.STRING, 'description', 'UTF8', None, ),  # 4
    (5, TType.BOOL, 'visible', None, None, ),  # 5
    (6, TType.STRUCT, 'booleanValues', [SensorBooleanValues, None], None, ),  # 6
)
all_structs.append(TrackSensorConfiguration)
TrackSensorConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sensorKey', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'color', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'iconUuid', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'iconFormat', 'UTF8', None, ),  # 4
    (5, TType.I32, 'delay', None, None, ),  # 5
)
all_structs.append(SensorConfigurationSet)
SensorConfigurationSet.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'parentGroupId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'sensorConfigurations', (TType.STRUCT, [SensorConfiguration, None], False), None, ),  # 4
)
all_structs.append(BrokenTrackerRequest)
BrokenTrackerRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'monitoringObjectId', 'UTF8', None, ),  # 1
    (2, TType.I64, 'brokenSinceUnixTime', None, None, ),  # 2
)
all_structs.append(ReportWorkingHours)
ReportWorkingHours.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'workingDaysMask', None, None, ),  # 1
    (2, TType.I32, 'beginOffset', None, None, ),  # 2
    (3, TType.I32, 'endOffset', None, None, ),  # 3
)
all_structs.append(ReportTimeFilter)
ReportTimeFilter.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'isWorkingTime', None, None, ),  # 1
    (2, TType.STRUCT, 'workingHours', [ReportWorkingHours, None], None, ),  # 2
)
all_structs.append(ReportInfo)
ReportInfo.thrift_spec = (
    None,  # 0
    None,  # 1
    (2, TType.STRING, 'type', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'title', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'supportedArgumentTypes', (TType.I32, None, False), None, ),  # 4
    (5, TType.LIST, 'supportedColumns', (TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.LIST, 'supportedGroupBy', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.LIST, 'supportedFilters', (TType.I32, None, False), None, ),  # 7
    (8, TType.BOOL, 'hierarchicalRows', None, None, ),  # 8
)
all_structs.append(ReportRequest)
ReportRequest.thrift_spec = (
    None,  # 0
    None,  # 1
    (2, TType.STRING, 'type', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'title', 'UTF8', None, ),  # 3
    (4, TType.I32, 'format', None, None, ),  # 4
    (5, TType.STRING, 'language', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'timezone', 'UTF8', None, ),  # 6
    (7, TType.I64, 'fromTimestamp', None, None, ),  # 7
    (8, TType.I64, 'toTimestamp', None, None, ),  # 8
    (9, TType.LIST, 'columns', (TType.STRING, 'UTF8', False), None, ),  # 9
    (10, TType.STRING, 'groupBy', 'UTF8', None, ),  # 10
    (11, TType.I32, 'stateFilter', None, None, ),  # 11
    (12, TType.STRUCT, 'timeFilter', [ReportTimeFilter, None], None, ),  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    (20, TType.I32, 'argumentType', None, None, ),  # 20
    (21, TType.LIST, 'argumentIds', (TType.STRING, 'UTF8', False), None, ),  # 21
)
all_structs.append(ScreenReportCell)
ScreenReportCell.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'stringValue', 'UTF8', None, ),  # 1
    (2, TType.I64, 'i64Value', None, None, ),  # 2
    (3, TType.BOOL, 'boolValue', None, None, ),  # 3
    (4, TType.DOUBLE, 'doubleValue', None, None, ),  # 4
)
all_structs.append(ScreenReportSimpleRow)
ScreenReportSimpleRow.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'cells', (TType.STRUCT, [ScreenReportCell, None], False), None, ),  # 1
)
all_structs.append(ScreenReportHierarchicalRow)
ScreenReportHierarchicalRow.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'rows', (TType.STRUCT, [ScreenReportSimpleRow, None], False), None, ),  # 1
    (2, TType.STRUCT, 'subtotal', [ScreenReportSimpleRow, None], None, ),  # 2
)
all_structs.append(ScreenReportRow)
ScreenReportRow.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'simple', [ScreenReportSimpleRow, None], None, ),  # 1
    (2, TType.STRUCT, 'hierarchical', [ScreenReportHierarchicalRow, None], None, ),  # 2
)
all_structs.append(ScreenReport)
ScreenReport.thrift_spec = (
    None,  # 0
    None,  # 1
    (2, TType.STRING, 'type', 'UTF8', None, ),  # 2
    (3, TType.I64, 'fromTimestamp', None, None, ),  # 3
    (4, TType.I64, 'toTimestamp', None, None, ),  # 4
    (5, TType.I64, 'generatedAt', None, None, ),  # 5
    (6, TType.LIST, 'columns', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.LIST, 'rows', (TType.STRUCT, [ScreenReportRow, None], False), None, ),  # 7
)
fix_spec(all_structs)
del all_structs
